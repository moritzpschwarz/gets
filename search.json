[{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"An Introduction to the gets package","text":"vignette4 provides overview R package gets, contains facilities automated general--specific (GETS) modeling mean variance regression, indicator saturation () methods detection modeling outliers structural breaks. mean can specified autoregressive model covariates (“AR-X” model), variance can specified autoregressive log-variance model covariates (“log-ARCH-X” model). covariates two specifications need , classical linear regression model obtained special case dynamics, covariates variance equation. four main functions package arx(), getsm(), getsv() isat(). first function estimates AR-X model log-ARCH-X errors. second function undertakes GETS modeling mean specification arx object. third function undertakes GETS modeling log-variance specification arx object. fourth function undertakes GETS modeling indicator-saturated mean specification allowing detection outliers structural breaks. usage two convenience functions export results EViews STATA illustrated, LaTeX code estimation output can readily generated.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An Introduction to the gets package","text":"General--specific (GETS) modeling combines well-known ingredients: backwards elimination, single multiple hypothesis testing, goodness--fit measures diagnostics tests. way combined GETS modeling enables rival theories models tested , ultimately resulting parsimonious, statistically valid model explains characteristics data investigated. methodology thus provides systematic coherent approach model development maintenance, cumulative research scientific progress. paper provides overview R package gets, contains facilities automated general--specific (GETS) modeling mean variance cross-sectional time-series regressions, indicator saturation () methods detection modeling outliers structural breaks mean. origins GETS modeling can traced back Denis Sargan London School Economics (LSE) 1960s, see (Hendry 2003) (Mizon 1995). However, 1980s 1990s methodology gained widespread acceptance usage economics, David F. Hendry particular main proponent, see two-volume article collection (Campos, Hendry, Ericsson 2005) comprehensive overview GETS methodology. important software-contribution GETS modeling made 1999, (Hoover Perez 1999) re-visited data-mining experiment (Lovell 1983). (Hoover Perez 1999) showed automated multi-path GETS modeling substantially improved upon (economics) popular model selection strategies. study (Hoover Perez 1999), purpose-specific limited MATLAB code used simulations.5 Subsequently, improvements achieved commercial software packages PcGets successor Autometrics . particular, indicator-saturation methods detection outliers structural breaks proposed (Hendry, Johansen, Santos 2008) added Autometrics 2008, see (Doornik 2009). Another milestone reached 2011, R package AutoSEARCH published Comprehensive R Archive Network (CRAN). package, whose code developed based (Sucarrat Escribano 2012), offered automated GETS modeling conditional variance specifications within log-ARCH-X class models. R package gets, available CRAN since October 2014, successor AutoSEARCH. gets package, time writing, statistical software offers GETS modeling conditional variance regression, addition GETS modeling mean regression, indicator saturation () methods detection breaks outliers structural breaks mean regression using impulses (IIS), step (SIS; see ) well trend indicators (TIS). paper provides overview gets package. main model class consideration autoregressive (AR) model exponential autoregressive conditional heteroscedastic (ARCH) variance, possibly additional covariates mean variance equations, . short, AR-X model log-ARCH-X error term, “X” refers covariates (covariates need mean variance specifications). underlined, however, gets limited time-series models (see Section 2.3): Static models (e.g., cross-sectional panel) can estimated specifying regression without dynamics. next section, Section 2, provides overview GETS modeling alternatives, outlines principles guides development gets. Section 3 contains note advantage providing data time-series attributes – data indeed time-series, since useful estimation dynamic models, output graphing. Section 4 contains overview AR-X model log-ARCH-X errors, explains can simulated, illustrates can estimated arx function. Section 5 illustrates GETS modeling can undertaken getsm getsv functions. first undertakes GETS modeling mean specification, whereas second undertakes GETS modeling log-variance specification. Section 6 introduces isat function indicator saturation methods. Section 7 illustrates two convenience functions, eviews stata, facilitate GETS modeling users EViews STATA , .e., two popular commercial software packages econometrics. section also briefly alludes estimation output can readily converted LaTeX code. Finally, Section 8 concludes.","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:gets:modeling","dir":"Articles","previous_headings":"An overview, alternatives and development principles","what":"GETS modeling","title":"An Introduction to the gets package","text":"convenient provide overview GETS modeling terms linear regression model yt=β1x1t+⋯+βkxkt+ut,t=1,2,...,n(#eq:linear−regression−model)\\begin{equation}  y_{t} = \\beta_1 x_{1t} + \\cdots + \\beta_k x_{kt} + u_{t}, \\qquad t=1,2,..., n   (\\#eq:linear-regression-model)  \\end{equation} yty_t dependent variable, β\\beta’s slope coefficients, xx’s regressors utu_t zero mean error term. GETS modeling assumes exists least one “local” data generating process (LDGP) nested (@ref(eq:linear-regression-model)). philosophical assumption thethe DGP contained simple model , see (Sucarrat 2010) . qualifier`local’’ thus means assumed exists specification within (@ref(eq:linear:regression:model)) statistically valid representation thethe DGP. Henceforth, notational theoretical convenience, assume exists single LDGP, necessary condition. variable xjtx_{jt}, j∈{1,...,k}j\\\\{1,...,k\\}, said relevant βj≠0\\beta_j \\neq 0 irrelevant βj=0\\beta_j = 0. Let krel≥0k_{\\text{rel}} \\geq 0 kirr≥0k_{\\text{irr}} \\geq 0 denote number relevant irrelevant variables, respectively, krel+kirr=kk_{\\text{rel}} + k_{\\text{irr}} = k. course, krelk_{\\text{rel}} kirrk_{\\text{irr}} unknown investigator. GETS modeling aims finding specification contains many relevant variables possible, proportion irrelevant variables corresponds significance level α\\alpha chosen investigator. Put differently, k̂rel\\widehat{k}_{\\text{rel}} k̂irr\\widehat{k}_{\\text{irr}} retained number relevant irrelevant variables, respectively, GETS modeling aims satisfying krel,kirr>0k_{\\text{rel}},k_{\\text{irr}}>0. either krel=0k_{\\text{rel}}=0 kirr=0k_{\\text{irr}}=0, criteria modified obvious ways: krel=0k_{\\text{rel}}=0, E(k̂rel)=0E(\\widehat{k}_{\\text{rel}}) = 0, kirr=0k_{\\text{irr}}=0, E(k̂irr)=0E(\\widehat{k}_{\\text{irr}}) = 0. proportion spuriously retained variables, .e., k̂irr/kirr\\widehat{k}_{\\text{irr}}/k_{\\text{irr}}, also referred gauge GETS literature, distributional results gauge specific case (variables impulses IIS) provided (Johansen Nielsen 2016). relevance proportion, .e., k̂irr/kirr\\widehat{k}_{\\text{irr}}/k_{\\text{irr}}, also referred potency GETS literature. Table @ref(tab:comparison--gets-algorithms) contains comparison variable selection properties GETS software packages well-known experiments. results show, gets performs expected experiments, since irrelevance proportion corresponds well nominal regressor significance level α\\alpha, since relevance proportion 1. Additional simulations, comparisons alternative algorithms, contained Section @ref(subsec:comparison--gets--alternatives). Variable selection properties GETS algorithms. table essentially Table 2 Sucarrat Escribano (2012), p. 724, augmented properties gets, see Appendix @ref(sec:simulation-tables) details simulations. variable selection undertaken nominal regressor significance level 5%. m(k̂rel/krel)m(\\widehat{k}_{\\text{rel}}/k_{\\text{rel}}), average proportion relevant variables k̂rel\\widehat{k}_{\\text{rel}}. m(k̂irr/kirr)m(\\widehat{k}_{\\text{irr}}/k_{\\text{irr}}), average proportion irrelevant variables k̂irr\\widehat{k}_{\\text{irr}} retained relative actual number irrelevant variables kirrk_{\\text{irr}} GUM. p̂(DGP)\\widehat{p}(\\text{DGP}), proportion times exact DGP found. properties HP1999 algorithm Hoover Perez (1999) Table 4 p. 179. properties algorithm Hendry Krolzig (2005) Figure 1 p. C39, properties algorithm Doornik (2009), Section 6. GETS modeling combines well-known ingredients model-selection literature: backwards elimination, tests βj\\beta_j’s (single multiple hypothesis tests), diagnostics tests, fit-measures (e.g., information criteria). Specifically, GETS modeling may described proceeding three steps: Formulate general unrestricted model (GUM) passes set chosen diagnostic tests.6 non-significant regressor GUM constitutes starting point backwards elimination path, regressor non-significant pp~value two-sided tt-test lower chosen significance level α\\alpha. Undertake backwards elimination along multiple paths removing, one--one, non-significant regressors determined chosen significance level α\\alpha. removal checked validity chosen set diagnostic tests, parsimonious encompassing (.e., multiple hypothesis test) GUM. Select, among terminal models, specification best fit according fit-criterion, e.g., (Schwarz 1978) information criterion. kk candidate variables, 2k2^k possible models. kk becomes large number models becomes computationally infeasible, thus, structured search required. GETS provides structured search starting general model (GUM), subsequently removing variables along search paths checking diagnostics removal.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:comparison-of-gets-with-alternatives","dir":"Articles","previous_headings":"An overview, alternatives and development principles","what":"A comparison of GETS and gets with alternatives","title":"An Introduction to the gets package","text":"comparing R package gets alternatives, important differentiate methodological approach GETS modeling relative modeling approaches, different software implementations within GETS methodology. , denote broader field GETS modeling GETS, R package gets. First briefly review compare alternative approaches GETS modeling, discuss alternative implementations GETS.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:GETSalt","dir":"Articles","previous_headings":"An overview, alternatives and development principles > A comparison of GETS and gets with alternatives","what":"GETS compared to alternative methods – a feature-based comparison","title":"An Introduction to the gets package","text":"Numerous model variable selection methods proposed, even larger number implementations available. Focusing variable selection, Table @ref(table:comparison::softwares) contains feature-based comparison gets common alternatives R. ar function stats searches best AR(PP) model using AIC. step function, also stats, offers forward backward step-wise search. packages lars glmnet , provide shrinkage-based search methods variable selection. clear table, GETS may viewed general many competitors. comes cost: computational speed. Relying multiple path searches implies required computational time increases non-linearly number potential candidate regressors selected . particular concern using indicator saturation see section “Indicator Saturation”, number candidate variables scales linearly number observations subsequently implies non-linear increase required computational time. example, selection kk (irrelevant) candidate regressors gets (sample n=200n=200 observations) 1.8GHz processor requires approximately 0.8 seconds (s) k=10k=10, 2.9s k=20k=20, 15s k=40k=40, 114s k=80k=80. contrast, identical experiment k=80k=80 requires 0.16s using Lasso glmnet, 0.41s lars, 0.3s using step (backward). Begin Lines: [[1]] [1] “\\begin{table}[t!]” Options Lines: [[1]] [1] “\\centering” [[2]] [1] “\\begin{tabular}{lcccccc}” [[3]] [1] “\\hline” [[4]] [1] “\\hline” [[5]] [1] “\\hline” [[6]] [1] “\\end{tabular}\\” Body Lines: [[1]] [1] “& ar & step (forward) & step (backward) & \\pkg{lars} & \\pkg{glmnet} & gets \\” [[2]] [1] “AR-terms & Yes & Yes & Yes & Yes & Yes & Yes \\\\[1mm]” [[3]] [1] “Covariates (``X’’) & & Yes & Yes & Yes& Yes & Yes \\\\[1mm]” [[4]] [1] “variables & & & & & & \\” [[5]] [1] “observations & & Yes & & Yes & Yes & Yes \\\\[1mm]” [[6]] [1] “Variance-modeling & & & & & & Yes \\\\[1mm]” [[7]] [1] “Regressor tests & & & & & & \\” [[8]] [1] “search & & & & & & Yes \\\\[1mm]” [[9]] [1] “Diagnostics tests & & & & & & \\” [[10]] [1] “search & & & & & & Yes \\\\[1mm]” [[11]] [1] “Computational & & & & & & \\” [[12]] [1] “cost (relative) & Low & Low & Low & Low & Low & High \\\\[1mm]” Caption Lines: [[1]] [1] “\\caption{variable-selection focused feature-based comparison gets ar step functions \\proglang{R} package stats \\citep{RCoreTeam2016}, \\proglang{R} packages \\pkg{lars} \\citep{HastieEfron2013} \\pkg{glmnet} \\citep{friedman2010regularization}. {#table:comparison::softwares} }” End Lines: [[1]] [1] “\\end{table}” variable-selection focused feature-based comparison gets ar step functions package stats , packages . {#table:comparison::softwares}","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"gets-compared-to-alternative-methods-a-performance-based-comparison","dir":"Articles","previous_headings":"An overview, alternatives and development principles > A comparison of GETS and gets with alternatives","what":"GETS compared to alternative methods – a performance-based comparison","title":"An Introduction to the gets package","text":"Hendry Doornik (2014) (Section 17) together (Castle, Doornik, Hendry 2011) provide broad overview performance GETS relative alternative model selection strategies mean regression, including step-wise regression, information criteria penalized shrinkage-based selection using Lasso . (Castle et al. 2015) compare GETS context step-shifts Lasso using LARS , (F. Pretis Volz 2016) compare GETS Lasso designed break functions (see Section 7.3) detailed discussion gets context break detection). instances shrinkage-based selection implemented using R packages lars glmnet . emerging consensus simulation comparisons false-positive rate, irrelevance proportion gauge, erratic difficult control step-wise well shrinkage-based selection procedures. selecting information criteria , implicit significance level selection results high gauge number candidate variables increases relative sample size. contrast, gauge tends well-calibrated around nominal size selection α\\alpha GETS. retention relevant variables often high shrinkage-based approaches (erratic step-wise regression), result comes cost high gauge performance becomes less reliable presence correlation candidate variables. provide additional comparisons performance alternative methods detecting relevant discarding irrelevant variables, compare gets : shrinkage-based selection, 1-cut selection (variables pp values ≤α\\leq \\alpha GUM retained single decision), conducting selection inference starting DGP . results provided Figure @ref(fig_lass) (Tables @ref(tab_lassuncorr), @ref(tab_lassposcorr), @ref(tab_lassnegcorr) Appendix @ref(sec:simulation-tables)). simulations cover three correlation structures regressors: First, -expectation uncorrelated regressors, second, positively correlated regressors (ρ=0.5\\rho=0.5), third, alternating negatively correlated regressors (ρ(xi,xi+1)=0.5\\rho(x_i, x_{+1}) = 0.5, ρ(xi,xi+2)=−0.5\\rho(x_i, x_{+2})=-0.5). consider total k=20k=20 regressors sample n=500n=500 observations 10001000 replications. number relevant regressors increased krel=0k_{\\text{rel}}=0 krel=10k_{\\text{rel}}=10 coefficients set correspond expected tt-statistic ≈3\\approx 3. performance gets using getsm function compared cross-validated Lasso glmnet Lasso fixed penalty parameter false-detection rate approximately matches getsm null (krel=0k_{\\text{rel}}=0). significance level 1-cut selection chosen match α=1%\\alpha=1\\% getsm selection. simulation results presented match evidence previous studies: GETS selection yields false-detection rate close nominal size selection regardless correlation structure regressors considered. exhibiting high potency, false detection rate Lasso difficult control correlation structure varies number relevant variables unknown. GETS dominates 1-cut selection regressors correlated, closely matches 1-cut absence correlation. best knowledge, currently publicly available software provides automated model selection variance gets. reason gets sidesteps numerical estimation difficulties usually associated models variance thanks OLS estimation procedure, see discussion (Sucarrat Escribano 2012).","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"getsalt","dir":"Articles","previous_headings":"An overview, alternatives and development principles > A comparison of GETS and gets with alternatives","what":"Alternatives within the field of GETS","title":"An Introduction to the gets package","text":"different software implementations GETS modeling – Table @ref(table:feature-comparison::gets:softwares) summarizes similarities differences . main (currently available) alternative package gets GETS modeling mean regression models Autometrics written Ox within software package PcGive . Autometrics gets share common features GETS modeling mean regression models, general implementation impulse- step-indicator saturation. , however, notable differences two implementations: main advantages gets lie GETS implementation variance models, implementation new unique features indicator saturation methods including trend-indicator saturation (TIS), consistency efficiency corrections variance estimates, testing time-varying mean (see Section 7.3) -depth discussion (see @ref(isat_comp) differences indicator saturation Autometrics gets), well new features model selection (e.g., availability direct function correct model-selection bias). turn, selection systems equations can conducted automatically Autometrics done one-equation time gets.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"development","dir":"Articles","previous_headings":"An overview, alternatives and development principles","what":"Development principles of the package gets","title":"An Introduction to the gets package","text":"original motivation behind precursor gets (.e., AutoSEARCH ) make GETS modeling methods variance (mean) regression freely publicly available, open-source implementing recent developments GETS. principle continue guide development gets. Indicator saturation methods added gets version 0.2, plan expand gets include model classes currently GETS software, e.g., spatial models, panel-data, etc. Naturally, encourage others keen develop publish GETS modeling methods wider range alternatives, either within gets package separate package. Another important development principle like enable user-specified control. User-specified diagnostics, example, added version 0.10, also plan enable user-specified estimation inference procedures (already available arx, getsm, getsv isat). Finally, also aim making package computationally faster user-friendly.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:setting:time:series:attributes","dir":"Articles","previous_headings":"","what":"Setting time-series attributes","title":"An Introduction to the gets package","text":"gets package limited time series models require time-series characteristics set beforehand (example data hand time series). However, time series characteristics set, data fact time series, graphs outputs (e.g., fitted values, residuals, etc.) optimal. gets package optimized work Z’s ordered observations (ZOO) package zoo, see (Zeileis Grothendieck 2005). fact, fitted values, residuals, recursive estimates returned gets functions, objects class ‘zoo’. zoo package provides general versatile infrastructure observations ordered according arbitrary index, e.g., time-series, zoo adapted interact well less versatile time-series class base distribution, ‘ts’: convert ‘ts’ objects ‘zoo’ objects, simply use .zooreg (preferred) .zoo. See help system webpage zoo package several short intros vignettes: https://CRAN.R-project.org/package=zoo.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:ar-x:model:with:log-arch-x:errors","dir":"Articles","previous_headings":"","what":"The AR-X model with log-ARCH-X errors","title":"An Introduction to the gets package","text":"specifications considered gets contained AR-X model log-ARCH-X errors. model made two equations, one mean one log-variance: yt=ϕ0+∑r=1Rϕryt−r+∑s=1Sηsxs,tm+ϵt,ϵt=σtzt,zt∼iid(0,1),y_t = \\phi_0 + \\sum_{r=1}^R \\phi_r y_{t-r} + \\sum_{s=1}^S\\eta_s x_{s,t}^m + \\epsilon_t, \\qquad \\epsilon_t =\\sigma_tz_t, \\quad z_t \\sim \\text{iid}(0,1), {#eq:ar-x} ln(σt2)=α0+∑p=1Pαplnϵt−p2+∑q∈QβqlnEqWMAq,t−1+∑=1Aλa(lnϵt−a2){ϵt−<0}+∑d=1Dδdxd,tv\\ln(\\sigma_t^2) = \\alpha_0 + \\sum_{p=1}^P \\alpha_p \\ln\\epsilon_{t-p}^2 + \\sum_{q\\Q} \\beta_q \\ln \\text{EqWMA}_{q,t-1} + \\sum_{=1}^\\lambda_a(\\ln\\epsilon_{t-}^2)I_{\\{\\epsilon_{t-} < 0\\}} + \\sum_{d=1}^D\\delta_d x_{d,t}^v {#eq:log-variance} conditional mean equation (@ref(eq:ar-x)) autoregressive (AR) specification order RR SS covariates x1,tm,...,xS,tmx_{1,t}^m, ..., x_{S,t}^m (“X”), AR-X short. covariates may contain lags conditioning variables. error term ϵt\\epsilon_t product time-varying conditional standard deviation σt>0\\sigma_t > 0 real-valued innovation ztz_t, ztz_t iid zero mean unit variance conditional past. conditional log-variance equation (@ref(eq:log-variance)) given logarithmic autoregressive conditional heteroscedasticity (log-ARCH) specification order PP volatility proxies defined EqWMAq,t−1=(ϵt−12+⋯+ϵt−q2)/q\\text{EqWMA}_{q,t-1} = (\\epsilon_{t-1}^2 + \\cdots + \\epsilon_{t-q}^2)/q, AA logarithmic asymmetry terms (.e. “leverage”) analogous (Glosten, Jagannathan, Runkle 1993) – Iϵt−<0I_{\\epsilon_{t-} < 0} indicator function equal 1 ϵt−<0\\epsilon_{t-} < 0 0 otherwise, DD covariates x1,tv,...,xD,tvx_{1,t}^v, ..., x_{D,t}^v, log-ARCH-X short. covariates may contain lags conditioning variables, covariates mean need log-variance specification. Hence superscripts mm vv, respectively. log-proxies lnEqWMAq,t−1\\ln \\text{EqWMA}_{q,t-1}, EqWMA short equally weighted moving average, intended proxy lagged log-GARCH terms, e.g., lnσt−12\\ln\\sigma_{t-1}^2. However, noted log-proxies can also given additional interpretation interest. example, yt=ϵty_t=\\epsilon_t daily financial return, returns recorded weekdays , EqWMA5,t−1\\text{EqWMA}_{5,t-1}, EqWMA20,t−1\\text{EqWMA}_{20,t-1} EqWMA60,t−1\\text{EqWMA}_{60,t-1} can interpreted weekly'',monthly’’ ``quarterly’’ volatilities, respectively. log-proxies thus provide great flexibility modeling persistence log-volatility. Also, note EqWMAq,t−1=lnϵt−12\\text{EqWMA}_{q,t-1} = \\ln\\epsilon_{t-1}^2, .e., ARCH(1) term, q=1q=1. course, additional volatility proxies can included via covariates xd,tx_{d,t}. model (@ref(eq:ar-x))–(@ref(eq:log-variance)) estimated two steps.^[multi-step, iterative procedure might improve finite sample efficiency, necessarily improve asymptotic efficiency. Joint estimation two equations single step, e.g., Gaussian maximum likelihood, likely asymptotically efficient ztz_t fat-tailed, see First, mean specification (@ref(eq:ar-x)) estimated OLS. default variance-covariance matrix ordinary one, – optionally – can changed either (White 1980) (Newey West 1987). Second, nonlinear AR-representation (@ref(eq:log-variance)) estimated, also OLS. nonlinear AR-representation given lnϵt2=α0*+∑p=1Pαplnϵt−p2+∑q∈QβqlnEqWMAq,t−1+∑=1Aλa(lnϵt−a2){ϵt−<0}+∑d=1Dδdxd,tv+ut,\\begin{eqnarray} \\ln\\epsilon_t^2 &=& \\alpha_0^* + \\sum_{p=1}^P \\alpha_p \\ln\\epsilon_{t-p}^2 + \\sum_{q\\Q} \\beta_q \\ln \\text{EqWMA}_{q,t-1}\\\\ % && + \\sum_{=1}^\\lambda_a(\\ln\\epsilon_{t-}^2)I_{\\{\\epsilon_{t-} < 0\\}} + \\sum_{d=1}^D\\delta_d x_{d,t}^v + u_t, \\end{eqnarray} α0*=α0+E(lnzt2)\\alpha_0^* = \\alpha_0 + E(\\ln z_t^2) ut=lnzt2−E(lnzt2)u_t=\\ln z_t^2 - E(\\ln z_t^2) ut∼iid(0,σu2)u_t \\sim \\text{iid}(0, \\sigma_u^2). provides consistent estimates parameters (@ref(eq:log-variance)) except α0\\alpha_0, appropriate assumptions. identify α0\\alpha_0, estimate E(lnzt2)E(\\ln z_t^2) needed, depends density ztz_t. (Sucarrat, Grønneberg, Escribano 2016) show simple formula made residuals ût\\widehat{u}_t provides consistent asymptotically normal estimate general non-restrictive assumptions. estimator essentially negative natural log smearing estimate (Duan 1983): Ê(lnzt2)=−ln[n−1∑t=1nexp(ût)]\\widehat{E}(\\ln z_t^2) = -\\ln \\left[ n^{-1} \\sum_{t=1}^n \\exp(\\widehat{u}_t) \\right]. expression square brackets smearing estimate. log-variance intercept α0\\alpha_0 can thus estimated α̂0*−Ê(lnzt2)\\widehat{\\alpha}_0^* - \\widehat{E}(\\ln z_t^2). Finally, ordinary variance-covariance matrix used inference log-variance specification, since error term utu_t nonlinear AR-representation iid.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:simulation","dir":"Articles","previous_headings":"The AR-X model with log-ARCH-X errors","what":"Simulation","title":"An Introduction to the gets package","text":"Simulation AR(PP) process can readily done arima.sim function stats package (part base distribution R). example, following code simulates 100 observations AR(1) model yt=ϕ0+ϕ1yt−1+ϵty_t = \\phi_0 + \\phi_1 y_{t-1} + \\epsilon_t ϕ0=0\\phi_0=0 ϕ1=0.4\\phi_1=0.4: set.seed(123) y <- arima.sim(list(ar = 0.4), 100) simulate model log-ARCH errors, first need simulate errors. can achieved lgarchSim lgarch package : library(“lgarch”) Next, following code simulates error-term ϵt\\epsilon_t follows log-ARCH(1) specification lnσt2=α0+α1lnϵt−12\\ln\\sigma_t^2 = \\alpha_0 + \\alpha_1 \\ln\\epsilon_{t-1}^2 α0=0\\alpha_0=0 α1=0.3\\alpha_1=0.3: default, standardized error ztz_t normal, can changed via innovation argument lgarchSim function. combine log-ARCH error AR(1) model ϕ0=0\\phi_0=0 ϕ1=0.4\\phi_1=0.4 following code can used: yy <- arima.sim(list(ar = 0.4), 100, innov = eps) command plot(.zoo(cbind(y, yy, eps))) plots three series.","code":"eps <- lgarchSim(100, arch = 0.3, garch = 0)"},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:arx:estimation","dir":"Articles","previous_headings":"The AR-X model with log-ARCH-X errors","what":"arx(): Estimation","title":"An Introduction to the gets package","text":"function arx estimates AR-X model log-ARCH-X errors. example, following code loads gets package, fits AR(1) model intercept series y generated Section 5.1, stores results object called mod01: library(“gets”) mod01 <- arx(y, ar = 1) print estimation results, simply type mod01. returns: Date: Fri Aug 06 10:57:59 2021 Dependent var.: y Method: Ordinary Least Squares (OLS) Variance-Covariance: Ordinary . observations (mean eq.): 99 Sample: 2 100 Mean equation: coef std.error t-stat p-value mconst 0.034045 0.091664 0.3714 0.7111 ar1 0.397411 0.095212 4.1740 6.533e-05 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(2) 0.25922 2 0.8784 Ljung-Box ARCH(1) 0.26124 1 0.6093 SE regression 0.90933 R-squared 0.15226 Log-lik.(n=99) -130.06490 two diagnostic tests standardized residuals ẑt\\widehat{z}_t. AR ARCH tests (Ljung Box 1978) tests serial correlation ẑt\\widehat{z}_t ẑt2\\widehat{z}_t^2, respectively, number parentheses indicates lag test conducted. R-squared mean specification, whereas (Gaussian) log-likelihood made residuals ϵ̂t\\widehat{\\epsilon}_t. log-variance specification fitted, conditional variance log-likelihood constant equal sample variance residuals. contrast, log-variance specification fitted, conditional variance log-likelihood equal fitted conditional variance, given σ̂t2=exp(lnσ̂t2)\\widehat{\\sigma}_t^2 = \\exp(\\ln\\widehat{\\sigma}_t^2). main optional arguments arx function estimating mean : mc: TRUE (default) FALSE. mc short ``mean constant’’, mc = TRUE includes intercept, whereas FALSE . ar: integer vector indicates AR terms include, say, ar = 1, ar = 1:4 ar = c(2, 4). mxreg: vector, matrix `zoo’ object contains additional regressors included mean specification. vcov.type: type variance-covariance matrix used inference mean specification. default, ordinary (\"ordinary\") matrix used. options available \"white\", .e., heteroscedasticity robust variance-covariance matrix (White 1980), \"newey-west\", .e., heteroscedasticity autocorrelation robust variance-covariance matrix (Newey West 1987). make full use arguments, let us first generate set 5 regressors: mX <- matrix(rnorm(100 * 5), 100, 5) Next, following code estimates AR-X model intercept, two AR-lags five regressors, stores estimation results object called mod02: mod02 <- arx(y, ar = 1:2, mxreg = mX, vcov.type = “white”) Estimation log-variance specification also undertaken arx function. example, following code fits log-ARCH(1) specification lnσt2=α0+α1lnϵt−12\\ln\\sigma_t^2 = \\alpha_0 + \\alpha_1 \\ln\\epsilon_{t-1}^2 variable eps generated : mod03 <- arx(eps, mc = FALSE, arch = 1) Typing mod03 prints estimation results. main optional arguments estimating log-variance : arch : integer vector indicates log-ARCH terms include, say, arch = 1, arch = 1:3 arch = c(3, 5). asym: integer vector indicates logarithmic asymmetry terms (often referred ``leverage’’) include, say, asym = 1, asym = 1:4, asym = c(2, 4). vxreg: vector, matrix `zoo’ object contains additional regressors included log-volatility specification. following code provides example makes use three arguments: mod04 <- arx(eps, mc = FALSE, arch = 1:3, asym = 2, vxreg = log(mX^2)) , typing mod04 prints results. Finally give example jointly fit mean log-variance equation series yy generated , using variance-covariance matrix (White 1980) mean equation: mod05 <- arx(yy, ar = 1:2, mxreg = mX, arch = 1:3, asym = 2, vxreg = log(mX^2), vcov.type = “white”)","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:arx:extraction:functions","dir":"Articles","previous_headings":"The AR-X model with log-ARCH-X errors","what":"Extraction functions","title":"An Introduction to the gets package","text":"number functions available extracting information ‘arx’ objects. important (S3 methods) : coef, ES, fitted, logLik, plot, predict, print, recursive, residuals,   rsquared, sigma, summary, toLatex, VaR, vcov Six (coef, fitted, predict, recursive, residuals} andvcov}) optional argument allows choose whether extract information pertaining mean log-variance specification. print function prints estimation result, logLik extracts (Gaussian) log-likelihood associated joint model, summary lists entries ‘arx’ object (list), plot plots fitted values residuals model, recursive computes – optionally – plots recursive coefficient estimates, rsquared sigma extract R-squared standard error regression, respectively, ES VaR extract conditional expected shortfall value--risk, respectively.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:arx:example","dir":"Articles","previous_headings":"The AR-X model with log-ARCH-X errors","what":"Example: A model of quarterly inflation with time-varying conditional variance","title":"An Introduction to the gets package","text":"(Engle 1982) proposed ARCH-class models, empirical application uncertainty UK-inflation. However, ARCH(4) specification used model conditional variance severely restricted order ensure positivity variance estimates, see . Arguably, (non-exponential) ARCH specifications never became popular macroeconomics. log-ARCH class models, contrast, suffer positivity problem, since conditional variance specified logs. illustrate fit AR(4)-X-log-ARCH(4)-X model quarterly inflation series, show conditional variance specification provides substantial improvement terms fit diagnostics. following code imports data7 assigns quarterly time-series attributes: data(“infldata”, package = “gets”) infldata <- zooreg(infldata[, -1], frequency = 4, start = c(1989, 1)) Note [, -1] removes first column, since needed. dataset thus contains four variables: infl, q2dum, q3dum q4dum. first variable quarterly Norwegian inflation (year--year) % 1989(1) 2015(4), whereas latter three seasonal dummies associated second, third fourth quarter, respectively. Initially, illustrate time-varying conditional variance needed, estimate mean specification: $$\\begin{equation} \\verb|infl|_t = \\phi_0 + \\sum_{r=1}^4 \\phi_r \\verb|infl|_{t-r} + \\eta_2 \\verb|q2dum|_{t} + \\eta_3 \\verb|q3dum|_{t} + \\eta_4 \\verb|q4dum|_{t} + \\epsilon_t \\end{equation}$$ , AR(4)-X, dummies constitute X-part. code inflMod01 <- arx(inflData[, \"infl\"], ar = 1:4, mxreg = inflData[, 2:4], vcov.type = \"white\") estimates model using heteroscedasticity-robust coefficient standard errors (White 1980) type, typing inflMod01 prints estimation results: Date: Fri Aug 06 11:11:17 2021 Dependent var.: y Method: Ordinary Least Squares (OLS) Variance-Covariance: White (1980) . observations (mean eq.): 104 Sample: 1990(1) 2015(4) Mean equation: coef std.error t-stat p-value mconst 0.8386311 0.2961338 2.8319 0.005637 ar1 0.7257550 0.1300407 5.5810 2.211e-07 ar2 0.0195911 0.1171347 0.1673 0.867523 ar3 0.0350092 0.1385735 0.2526 0.801087 ar4 -0.1676751 0.1336972 -1.2541 0.212836 q2dum -0.0148892 0.2333917 -0.0638 0.949266 q3dum -0.0072972 0.2262704 -0.0322 0.974340 q4dum 0.0103990 0.2226772 0.0467 0.962849 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(5) 16.3205 5 0.005986 Ljung-Box ARCH(1) 5.9665 1 0.014580 SE regression 0.72814 R-squared 0.53166 Log-lik.(n=104) -110.57435 diagnostics suggest standardized residuals autocorrelated heteroscedastic, since tests autocorrelation heteroscedasticity yield pp~values 0.6% 1.5%, respectively. Next, specify conditional variance log-ARCH(4)-X, X-part made seasonal dummies: $$\\begin{equation} \\ln\\sigma_t^2 = \\alpha_0 + \\sum_{p=1}^4 \\alpha_p \\ln\\epsilon_{t-p}^2 + \\delta_2 \\verb|q2dum|_{t} + \\delta_3 \\verb|q3dum|_{t} + \\delta_4 \\verb|q4dum|_{t}. \\end{equation}$$ code inflMod02 <- arx(inflData[, “infl”], ar = 1:4, mxreg = inflData[, 2:4], arch = 1:4, vxreg = inflData[, 2:4], vcov.type = “white”) estimates full model (White 1980) standard errors mean ordinary standard errors log-variance. Typing inflMod02 returns Date: Fri Aug 06 11:12:20 2021 Dependent var.: y Method: Ordinary Least Squares (OLS) Variance-Covariance: White (1980) . observations (mean eq.): 104 Sample: 1990(1) 2015(4) Mean equation: coef std.error t-stat p-value mconst 0.8386311 0.2961338 2.8319 0.005637 ar1 0.7257550 0.1300407 5.5810 2.211e-07 ar2 0.0195911 0.1171347 0.1673 0.867523 ar3 0.0350092 0.1385735 0.2526 0.801087 ar4 -0.1676751 0.1336972 -1.2541 0.212836 q2dum -0.0148892 0.2333917 -0.0638 0.949266 q3dum -0.0072972 0.2262704 -0.0322 0.974340 q4dum 0.0103990 0.2226772 0.0467 0.962849 Log-variance equation: coef std.error t-stat p-value vconst 0.95935 0.53464 3.2199 0.072749 arch1 0.16697 0.10352 1.6130 0.110169 arch2 0.12027 0.10335 1.1637 0.247566 arch3 0.14740 0.10332 1.4267 0.157060 arch4 0.05982 0.10515 0.5689 0.570824 q2dum -1.32860 0.61862 -2.1477 0.034366 q3dum -0.92707 0.58400 -1.5874 0.115843 q4dum -1.82736 0.62014 -2.9467 0.004069 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(5) 9.1776 5 0.1022 Ljung-Box ARCH(5) 1.7613 5 0.8811 SE regression 0.72814 R-squared 0.53166 Log-lik.(n=100) -82.32892 first noticeable difference inflMod01 inflMod02 diagnostics improve substantially. inflMod02, AR ARCH tests standardized residuals suggest standardized error ztz_t uncorrelated homoscedastic usual significance levels (1%, 5% 10%), (Jarque Bera 1980) test suggests ztz_t normal. second noticeable improvement terms fit, measured average (Gaussian) log-likelihood. inflMod01 average log-likelihood −110.57435/104=−1.06-110.57435/104= -1.06, whereas inflMod02 average log-likelihood −82.3289/100=−0.82-82.3289/100= -0.82. substantial increase. terms (Schwarz 1978) information criterion (SC), favors parsimony, comparison average log-likelihoods can made info.criterion function: info.criterion(.numeric(logLik(inflMod01)), n = 104, k = 8 + 1) info.criterion(.numeric(logLik(inflMod02)), n = 100, k = 8 + 8) clear, value falls 2.53 inflMod01 2.38 inflMod02. (comparison average log-likelihoods necessary, since two models estimated different number observations. main difference info.criterion function AIC BIC.) Together, enhanced fit diagnostics indicate log-variance specification provides notable improvement. Later, Section @ref(subsec:gets:inflation:example), undertake GETS modeling mean variance specifications inflMod02.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:arx:example:sp500-volatility","dir":"Articles","previous_headings":"The AR-X model with log-ARCH-X errors","what":"Example: A log-ARCH-X model of daily SP500 volatility","title":"An Introduction to the gets package","text":"common volatility specification finance first order GARCH-like specifications. log-GARCH class models, corresponds log-GARCH(1, 1): lnσt2=α0+α1lnϵt−12+β1lnσt−12\\ln\\sigma_t^2 = \\alpha_0 + \\alpha_1\\ln\\epsilon_{t-1}^2 + \\beta_1\\ln\\sigma_{t-1}^2. , show log-ARCH-X model makes use commonly available information provides better fit. start loading dataset Standard Poor’s 500 (SP500) index: data(“sp500data”, package = “gets”) sp500data <- zoo(sp500data[, -1], order.= .Date(sp500data[, “Date”])) dataset contains daily value SP500 index, highs lows, daily volume. make use information together day---week dummies construct rich model SP500 return volatility. first shorten sample, since variables available start: sp500data <- window(sp500data, start = .Date(“1983-07-01”)) resulting sample thus goes 1 July 1983 8 March 2016, total 8241 observations differencing lagging. Next, following lines code create variable equal log-return percent, lagged range-based volatility proxy, lagged log-difference volume: sp500Ret <- diff(log(sp500data[, “Adj.Close”])) * 100 relrange <- (log(sp500data[, “High”]) - log(sp500data[, “Low”]) ) * 100 volproxy <- log(relrange^2) volproxylag <- lag(volproxy, k = -1) volume <- log(sp500data[, “Volume”]) volumediff <- diff(volume) * 100 volumedifflag <- lag(volumediff, k = -1) Finally, make day---week dummies estimate full model, log-ARCH(5)-X specification: sp500Index <- index(sp500Ret) days <- weekdays(sp500Index) days <- union(days, days) dTue <- zoo(.numeric(weekdays(sp500Index) == days[1]), order.= sp500Index) dWed <- zoo(.numeric(weekdays(sp500Index) == days[2]), order.= sp500Index) dThu <- zoo(.numeric(weekdays(sp500Index) == days[3]), order.= sp500Index) dFri <- zoo(.numeric(weekdays(sp500Index) == days[4]), order.= sp500Index) sp500Mod01 <- arx(sp500Ret, mc = FALSE, arch = 1:5, log.ewma = c(5, 20, 60, 120), asym = 1, vxreg = cbind(volproxylag, volumedifflag, dTue, dWed, dThu, dFri)) Typing sp500Mod01 returns following print output: Date: Fri Aug 06 11:17:38 2021 Dependent var.: y Method: Ordinary Least Squares (OLS) Sample: 1983-07-05 2016-03-08 Log-variance equation: coef std.error t-stat p-value vconst 0.0107260 0.0784437 0.0187 0.891241 arch1 -0.0482520 0.0161972 -2.9790 0.002900 arch2 0.0071996 0.0122312 0.5886 0.556127 arch3 0.0256668 0.0122521 2.0949 0.036212 arch4 0.0149581 0.0122145 1.2246 0.220758 arch5 0.0371055 0.0122796 3.0217 0.002521 asym1 -0.0336271 0.0175185 -1.9195 0.054954 logEqWMA(5) 0.0262491 0.0519435 0.5053 0.613334 logEqWMA(20) 0.2817220 0.0713466 3.9486 7.926e-05 logEqWMA(60) 0.1970841 0.1052311 1.8729 0.061122 logEqWMA(120) 0.1936954 0.0865864 2.2370 0.025312 volproxylag 0.2078785 0.0400515 5.1903 2.151e-07 volumedifflag -0.0030906 0.0014207 -2.1754 0.029630 dTue 0.0978314 0.0834703 1.1720 0.241212 dWed -0.0804053 0.0853471 -0.9421 0.346171 dThu 0.0838896 0.0843500 0.9945 0.319988 dFri 0.0756869 0.0840118 0.9009 0.367664 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(1) 0.53421 1 0.4648 Ljung-Box ARCH(6) 29.21040 6 5.55e-05 SE regression 1.13957 R-squared -0.00069 Log-lik.(n=8120) -10985.79738 Later, Section @ref(subsec:gets:sp500:example), simplify model getsv function. now, provide comparison log-GARCH(1, 1) using R package lgarch, see (Sucarrat 2015). following code loads package, estimates model stores estimation results: library(“lgarch”) sp500Mod02 <- lgarch(sp500Ret) Extracting log-likelihood logLik(sp500Mod02) reveals substantially lower, namely −11396.11-11396.11. compare models terms (Schwarz 1978) information criterion, necessary undertake comparison terms average log-likelihoods, since estimation samples two models different number observations: info.criterion(.numeric(logLik(sp500Mod01)), n = 8120, k = 17) info.criterion(.numeric(logLik(sp500Mod02)), n = 8240, k = 3) value increases 2.7247 sp500Mod01 2.7693 sp500Mod02, indicates former specification provides better fit.","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:getsm:modeling:the:mean","dir":"Articles","previous_headings":"GETS modeling","what":"getsm(): Modeling the mean","title":"An Introduction to the gets package","text":"GETS modeling mean specification regression (e.g., simple time series cross-sectional model) undertaken applying getsm function ‘arx’ object. conducts GETS variable selection regressors included initially specified arx model. example, following code performs GETS model selection regressors mean specification mod05 default values optional arguments: getsm05 <- getsm(mod05) results stored object named getsm05, information produced specification search : GUM mean equation: reg.. keep coef std.error t-stat p-value mconst 1 0 -0.0596894 0.0782285 -0.7630 0.4475 ar1 2 0 0.1938157 0.1235456 1.5688 0.1202 ar2 3 0 0.0343803 0.1141559 0.3012 0.7640 mxreg1 4 0 0.1171045 0.0805838 1.4532 0.1496 mxreg2 5 0 0.0116124 0.0865925 0.1341 0.8936 mxreg3 6 0 -0.1087162 0.0815946 -1.3324 0.1861 mxreg4 7 0 -0.2226722 0.1019820 -2.1834 0.0316 mxreg5 8 0 0.0012498 0.0694024 0.0180 0.9857 GUM log-variance equation: coef std.error t-stat p-value vconst 0.351872 0.438687 0.6434 0.42249 arch1 0.268975 0.107470 2.5028 0.01424 arch2 0.088540 0.159135 0.5564 0.57941 arch3 0.022932 0.115861 0.1979 0.84357 asym2 -0.112941 0.171767 -0.6575 0.51262 vxreg1 0.102181 0.110374 0.9258 0.35718 vxreg2 -0.068873 0.093762 -0.7345 0.46464 vxreg3 -0.032006 0.102597 -0.3120 0.75584 vxreg4 0.029429 0.106865 0.2754 0.78369 vxreg5 0.187176 0.120259 1.5564 0.12332 Diagnostics: Chi-sq df p-value Ljung-Box AR(3) 0.18672 3 0.97970 Ljung-Box ARCH(4) 0.43983 4 0.97909 7 path(s) search Searching: 1 2 3 4 5 6 7 Path 1: 1 8 5 3 4 6 2 Path 2: 2 8 5 3 1 4 6 Path 3: 3 8 5 1 4 6 2 Path 4: 4 3 5 8 1 6 2 Path 5: 5 8 3 1 4 6 2 Path 6: 6 8 5 3 1 4 2 Path 7: 8 5 3 1 4 6 2 Terminal models: info(sc) logl n k spec 1 (1-cut): 2.285792 -109.7113 98 1 Retained regressors (final model): mxreg4 see estimation results final model, type getsm05. first part printed results pertains GUM, .e. starting model. Note particular regressors numbered (reg.column GUM mean equation). useful interpreting paths searched, indicates order regressors deleted path. Next, Terminal models part contains distinct terminal specifications. default, (Schwarz 1978) information criterion (sc) used choose among terminals, can changed (see ). last part contains estimation results final, simplified model. main optional arguments getsm function (type args(getsm) ?getsm arguments): t.pval: numeric value 0 1 (default 0.05). significance level used two-sided tt-tests regressors. wald.pval: numeric value 0 1 (default t.pval). significance level used parsimonious encompassing test (PET) general unrestricted model (GUM) regressor deletion. .pet: logical, TRUE (default) FALSE. TRUE, PET GUM undertaken regressor removal. ar.LjungB: list two elements named lag pval, respectively, NULL. list NULL, (Ljung Box 1978) test serial correlation standardized residuals undertaken attempt remove regressor. default, list(lag = NULL, pval = 0.025), means lag chosen automatically (max(ar) + 1), pp~value pval = 0.025 used. list NULL, standardized residuals ẑt\\widehat{z}_t checked serial correlation removal. arch.LjungB: list two elements named lag pval, respectively, NULL. list NULL, (Ljung Box 1978) test serial correlation squared standardized residuals undertaken attempt remove regressor. default, list(lag = NULL, pval = 0.025), means lag chosen automatically (max(arch) + 1) pp~value pval = 0.025} used. list isNULL`, squared standardized residuals ẑt2\\widehat{z}_t^2 checked serial correlation removal. vcov.type: NULL, \"ordinary\", \"white\" \"newey-west\". NULL (default), type variance-covariance matrix automatically determined (option `arx’ object used). \"ordinary\", ordinary variance-covariance matrix used. \"white\", variance-covariance matrix (White 1980) used. \"newey-west\", variance-covariance matrix (Newey West 1987) used. keep: either NULL integer vector. NULL (default), regressors excluded removal. Otherwise, regressors associated numbers keep excluded removal space. example, keep = 1 excludes intercept removal. Retaining variables using keep argument implements “theory-embedding” approach outlined (Hendry Johansen 2015) “forcing” theory variables retained conducting model discovery beyond set forced variables. info.method: \"sc\", \"aic\" \"hq\". \"sc\" (default), information criterion (Schwarz 1978) used tiebreaker terminals. \"aic\", information criterion (Akaike 1974) used, \"hq\", information criterion (Hannan Quinn 1979) used. example, following code uses lower significance level regressor significance tests PETs, turns diagnostic testing ARCH standardized residuals: getsm05a <- getsm(mod05, t.pval = 0.01, arch.LjungB = NULL) Similarly, following code restricts mean intercept deleted, even though significant: getsm05b <- getsm(mod05, keep = 1)","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:getsv:modeling:the:log-variance","dir":"Articles","previous_headings":"GETS modeling","what":"getsv(): Modeling the log-variance}","title":"An Introduction to the gets package","text":"GETS modeling log-variance specification undertaken applying getsv function ‘arx’ object. example, following code performs GETS model selection log-variance specification mod05 default values optional arguments: getsv05 <- getsv(mod05) Alternatively, following code undertakes GETS model selection log-variance specification simplified model getsm05: mod06 <- arx(residuals(getsm05), mc = FALSE, arch = 1:3, asym = 2, vxreg = log(mX^2)) getsv06 <- getsv(mod06) Typing getsv06 prints results. Note vconst, log-variance intercept, forced enter keep set getsv used. , α0\\alpha_0 restricted removal even significant. due estimation procedure, via AR-representation. Finally, main optional arguments getsv almost getsm (see ). main difference variance-covariance matrix available ordinary one, since error-term AR-specification iid. example set options non-default values, following code restricts three log-ARCH terms (addition log-variance intercept) removal, turns diagnostic testing serial correlation standardized residuals: getsv06b <- getsv(mod06, keep = 1:4, ar.LjungB = NULL)","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:gets:extraction:functions","dir":"Articles","previous_headings":"GETS modeling","what":"Extraction functions","title":"An Introduction to the gets package","text":"number extraction functions available gets objects, .e., objects produced either getsm getsv. important functions (3 methods) : coef, ES, fitted, logLik, paths, plot, predict, print, recursive,   residuals, rsquared, sigma, summary, terminals, toLatex, VaR, vcov , apart paths terminals, behave similar way corresponding extraction functions ‘arx’ objects. particular, coef, fitted, print residuals automatically detect whether getsm getsv used, behave accordingly. paths function extracts paths searched, terminals terminal models.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:gets:inflation:example","dir":"Articles","previous_headings":"GETS modeling","what":"Example: A parsimonious model of quarterly inflation","title":"An Introduction to the gets package","text":"Section @ref(subsec:arx:example), showed log-ARCH(4)-X specification log-variance improved fit diagnostics AR(4)-X model quarterly inflation. , obtain simplified version using getsm getsv functions. estimation results AR(4)-X-log-ARCH(4)-X specification fitted stored ‘arx’ object named inflMod02. following code undertakes GETS modeling mean, stores results object named inflMod03: inflMod03 <- getsm(inflMod02) produces following specification search: GUM mean equation: reg.. keep coef std.error t-stat p-value mconst 1 0 0.8386311 0.2961338 2.8319 0.005637 ar1 2 0 0.7257550 0.1300407 5.5810 2.211e-07 ar2 3 0 0.0195911 0.1171347 0.1673 0.867523 ar3 4 0 0.0350092 0.1385735 0.2526 0.801087 ar4 5 0 -0.1676751 0.1336972 -1.2541 0.212836 q2dum 6 0 -0.0148892 0.2333917 -0.0638 0.949266 q3dum 7 0 -0.0072972 0.2262704 -0.0322 0.974340 q4dum 8 0 0.0103990 0.2226772 0.0467 0.962849 GUM log-variance equation: coef std.error t-stat p-value vconst 0.95935 0.53464 3.2199 0.072749 arch1 0.16697 0.10352 1.6130 0.110169 arch2 0.12027 0.10335 1.1637 0.247566 arch3 0.14740 0.10332 1.4267 0.157060 arch4 0.05982 0.10515 0.5689 0.570824 q2dum -1.32860 0.61862 -2.1477 0.034366 q3dum -0.92707 0.58400 -1.5874 0.115843 q4dum -1.82736 0.62014 -2.9467 0.004069 Diagnostics: Chi-sq df p-value Ljung-Box AR(5) 9.1776 5 0.10219 Ljung-Box ARCH(5) 1.7613 5 0.88109 6 path(s) search Searching: 1 2 3 4 5 6 Path 1: 3 7 6 8 4 5 -5 Path 2: 4 7 6 8 3 5 -5 Path 3: 5 7 6 3 8 -8 4 -4 Path 4: 6 7 8 3 4 5 -5 Path 5: 7 6 8 3 4 5 -5 Path 6: 8 7 6 3 4 5 -5 Terminal models: info(sc) logl n k spec 1: 1.722352 -82.59571 104 3 spec 2: 1.776284 -83.07798 104 4 Retained regressors (final model): mconst ar1 ar4 addition intercept, final model contains AR(1) AR(4) terms, quarterly dummies. level quarterly year--year inflation seem depend quarter. Note , searched paths, regressor . 5 (.e., AR(4) term) minus sign front one searched paths. means term re-introduced deletion, since deletion leads violation one several diagnostics tests. reason AR(4) term retained even though significant final model. Next, use residuals simplified model develop parsimonious model log-variance, storing results inflMod05: inflMod04 <- arx(residuals(inflMod03), mc = FALSE, arch = 1:4, vxreg = inflData[, 2:4]) inflMod05 <- getsv(inflMod04, ar.LjungB = list(lag = 5, pval = 0.025)) Note , ensure diagnostic test autocorrelation standardized residuals undertaken lag earlier, ar.LjungB argument modified. Next, typing inflMod05 prints results, reproduce selected parts interest brevity: SPECIFIC log-variance equation: coef std.error t-stat p-value vconst 0.71311 0.53965 1.7462 0.186355 arch1 0.17438 0.10057 1.7339 0.086217 arch2 0.16822 0.10034 1.6764 0.096975 q2dum -1.43834 0.62992 -2.2834 0.024662 q3dum -1.09189 0.60035 -1.8187 0.072135 q4dum -1.82836 0.60351 -3.0295 0.003163 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(5) 8.1224 5 0.1496 Ljung-Box ARCH(5) 7.7418 5 0.1711 results suggest high impact ARCH(1) ARCH(2) terms – much higher financial returns,8 conditional variance depends quarter. obtain idea economic importance results, re-estimate full, simplified model, generate --sample forecasts conditional standard deviation four quarters ahead. full, simplified model re-estimated using: inflMod06 <- inflMod06 <- arx(inflData[, “infl”], ar = c(1, 4), arch = 1:2, vxreg = inflData[, 2:4], vcov.type = “white”) order generate --sample forecasts, first need generate --sample values retained quarterly dummies: newvxreg <- matrix(0, 4, 3) colnames(newvxreg) <- c(“q2dum”, “q3dum”, “q4dum”) newvxreg[2, “q2dum”] <- 1 newvxreg[3, “q3dum”] <- 1 newvxreg[4, “q4dum”] <- 1 can now generate --sample forecasts conditional standard deviations: set.seed(123) predict(inflMod06, n.ahead = 4, spec = “variance”, newvxreg = newvxreg) first command, set.seed(123), reproducibility purposes, since bootstrap procedure used generate variance forecasts two steps ahead (number draws can changed via n.sim argument). forecasts 2016(1) 2016(4) : 2016(1) 2016(2) 2016(3) 2016(4) 1.0448239 0.3403215 0.4628250 0.2075531 words, conditional variance forecasted four times higher 2016(1) 2016(4). notable economic consequences. example, forecasted inflation 2016(1) 2%, approximate 95% prediction interval computed 2±2×σ̂n+12 \\pm 2 \\times \\widehat{\\sigma}_{n+1} given range 00% 4%, large. contrast, approximate 95% prediction interval 2016(4) computed 2±2×σ̂n+42 \\pm 2 \\times \\widehat{\\sigma}_{n+4} given range 1.1% 2.9%, much tighter.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"subsec:gets:sp500:example","dir":"Articles","previous_headings":"GETS modeling","what":"Example: A parsimonious model of daily SP500 volatility","title":"An Introduction to the gets package","text":"Section @ref(subsec:arx:example:sp500-volatility) estimated rich model daily SP500 return volatility named sp500Mod01. Simplification model straightforward getsv function. Since model fully get rid ARCH standardized residuals, turn ARCH diagnostics. Also, parsimony choose small regressor significance level equal 0.1%0.1\\%: sp500Mod03 <- getsv(sp500Mod01, t.pval = 0.001, arch.LjungB = NULL) Typing sp500Mod03 returns (amongst ): SPECIFIC log-variance equation: coef std.error t-stat p-value vconst 0.016309 0.044960 0.1316 0.7167940 arch1 -0.064147 0.013740 -4.6687 3.080e-06 arch5 0.038690 0.011324 3.4168 0.0006368 logEqWMA(20) 0.427071 0.053110 8.0413 1.014e-15 logEqWMA(120) 0.327148 0.052734 6.2038 5.782e-10 volproxylag 0.197866 0.036558 5.4124 6.396e-08 dWed -0.176576 0.064799 -2.7250 0.0064442 Diagnostics fit: Chi-sq df p-value Ljung-Box AR(1) 0.40681 1 0.5236 Ljung-Box ARCH(6) 32.33070 6 1.41e-05 SE regression 1.14417 Log-lik.(n=8120) -10993.62221 words, day---week dummies retained first ARCH-term retained. However, three log-proxies retained, .e., weekly, monthly half-yearly, lagged range-based volatility proxy lagged log-volume difference retained. log-likelihood now −11131.4-11131.4, following code computes (Schwarz 1978) information criterion value terms average log-likelihood: % info.criterion(.numeric(logLik(sp500Mod03)), n = 8120, k = 7) value 2.7155, parsimonious model provides better fit (according sc) compared GUM (.e., sp500Mod01).","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:indicator:saturation","dir":"Articles","previous_headings":"","what":"Indicator saturation","title":"An Introduction to the gets package","text":"Indicator saturation crucial development GETS modeling address distorting influence outliers structural breaks (changes parameters) econometric models. parameter changes generally unknown magnitudes may occur unknown times. Indicator saturation tackles challenge starting general model allowing outlier shift every point removing significant ones using GETS selection. serves method detect outliers breaks, well generalized approach model mis-specification testing – model well-specified, outliers/shifts detected. function isat conducts multi-path indicator saturation detect outliers location-shifts regression models using impulse indicator saturation (IIS – see , comprehensive asymptotic analysis), step-indicator saturation (SIS – see ), trend-indicator saturation (TIS – applied ), user-designed indicator saturation (UIS, designed break functions , ). Formulating detection structural breaks problem model selection, regression model saturated full set indicators selected using general--specific getsm algorithm chosen level significance t.pval. approach break detection imposes minimum break length, outliers can identified jointly structural breaks. false-detection rate gauge given αk\\alpha k kk irrelevant indicators selected , k=nk=n IIS TIS, k=n−1k=n-1 SIS intercept forced. Thus, false-detection rate can easily controlled reducing α\\alpha cost reduced power detecting true shifts outliers. ensure low false-detection rate, rule thumb setting α=min(0.05,[1/k])\\alpha=\\min(0.05,[1/k]) can used, yields one incorrectly retained indicator expectation large samples, aims false-detection rate 5% small samples. Figure @ref(fig_isat) (Table @ref(tab_isatgauge) Appendix @ref(sec:simulation-tables)) show false-detection rate using isat simple static simulation increasing sample sizes. respective GUMs simple model mean yty_t using impulse-, step- trend-indicator saturation9 given SIS GUM: yt=μ+∑j=2nδj1{t≥j}+uty_t = \\mu + \\sum^{n}_{j=2} \\delta_j 1_{\\{ t \\geq j \\} } + u_t IIS GUM: yt=μ+∑j=1nδj1{t=j}+uty_t = \\mu + \\sum^{n}_{j=1} \\delta_j 1_{\\{ t = j \\} } + u_t TIS GUM: yt=μ+∑j=1nδj1{t>j}(t−j)+uty_t = \\mu + \\sum^{n}_{j=1} \\delta_j 1_{\\{ t > j \\} }(t-j) + u_t nn denotes total number observations sample. Indicators partitioned blocks based values ratio.threshold max.block.size arguments isat function, block size used maximum given either criterion. Indicators retained block re-combined selected yield terminal models. Additional regressors selected can included mxreg argument, autoregressive terms particular, can included using ar argument. Naturally different indicators can combined, specifying iis = TRUE sis = TRUE selection takes place impulse- well step-indicators. different regimes made indicators (e.g., retained step-functions impulses) weighted estimated coefficients describe shifts intercept time – coefficient path intercept. detection shifts SIS focused time-series analysis, IIS can used cross-sectional regression models detect individual outliers (see e.g., ). primary arguments selection indicators isat carry getsm function. main differences additional arguments : % t.pval: numeric value 0 1. significance level α\\alpha used two-sided tt-tests indicators selection. default lower regular getsm model selection set 0.001 control number false positives. null outliers (structural breaks), irrelevance proportion gauge (proportion spuriously retained indicators) equal αk\\alpha k kk number indicators selected . Thus setting α≈1/k\\alpha \\approx 1/k yields one spuriously retained indicator average null. iis: logical, TRUE FALSE. TRUE, full set impulse indicators added selected . sis: logical, TRUE FALSE. TRUE, full set step indicators added selected . tis: logical, TRUE FALSE. TRUE, full set trend indicators added selected . uis: matrix object contains designed break functions selected . ratio.threshold: numeric, 0 1. Minimum ratio variables block total observations determine block size, default equals 0.8. Block size used maximum given either ratio.threshold max.block.size. max.block.size: integer least 2. Maximum size block variables selected , default equals 30. Block size used maximum given either ratio.threshold max.block.size. parallel.options: either NULL integer. integer denotes number cores used search blocks parallel. argument NULL parallel computation used. option can speed computation number blocks indicators searched large.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"example-structural-breaks-in-the-growth-rate-of-uk-so_2-emissions","dir":"Articles","previous_headings":"Indicator saturation","what":"Example: Structural breaks in the growth rate of UK SO2_2 emissions","title":"An Introduction to the gets package","text":"Annual emissions pollutant sulphur dioxide (SO2_2) UK declined latter half 20th century due policy interventions changes energy production. assess whether significant shifts growth rate (Δlog(SO2)t\\Delta \\log(SO_2)_t) sulphur dioxide emissions 1946 2005, using SIS emission time series compiled (Smith et al. 2011). Setting t.pval 0.01 yields approximate gauge 0.01k0.01k null hypothesis shifts kk spuriously included variables. Inclusion full set indicators implies k=nk=n IIS, k=n−1k=n-1 SIS, thus 0.01(n−1)=0.01×590.01(n-1) = 0.01 \\times 59. suggests less one indicator retained spuriously average well-specified model null shifts outliers. Estimating isat model using SIS (sis = TRUE default): % options(plot = TRUE) so2 <- data(“so2data”, package = “gets”) yso2 <- zoo(so2data[, “DLuk_tot_so2”], order.= so2data[, “year”]) (sis <- isat(yso2, t.pval = 0.01)) SIS block 1 2: 30 paths search Searching: 1 2 3 4 … SIS block 2 2: 26 paths search Searching: 1 2 3 4 … GETS union retained SIS variables… 2 paths search Searching: 1 2 … SPECIFIC mean equation: coef std.error t-stat p-value mconst 0.01465385 0.007931984 1.847438 7.026836e-02 sis1972 -0.04332051 0.011866458 -3.650669 5.990412e-04 sis1993 -0.11693333 0.020126141 -5.810023 3.625832e-07 sis1998 0.12860000 0.044305650 2.902564 5.382516e-03 sis1999 -0.28400000 0.057198348 -4.965178 7.505854e-06 sis2000 0.24550000 0.045219264 5.429102 1.441154e-06 sis2004 -0.11550000 0.035026692 -3.297485 1.746083e-03 Diagnostics: Chi-sq df p-value Ljung-Box AR(1) 0.61553 1 0.43271 Ljung-Box ARCH(1) 1.44153 1 0.22989 Jarque-Bera 0.57302 2 0.75088 SE regression 0.04045 R-squared 0.73021 Log-lik.(n=60) 110.83192 output shows multiple detected step-shifts (labeled sis1972–sis2004) time series. plotting active (plot = TRUE), isat also displays output Figure @ref(fig_sisso2) plotting observed fitted values, together coefficient path (time-varying intercept regimes detected using SIS) well standardized residuals. downward step-shift detected growth rate 1972, outlying observations detected two subsequent step-indicators opposite-signs (e.g., 1998/1999), well downward step-shift end sample 2004. example demonstrates flexibility SIS approach – step-shifts easily identified even end sample outliers can detected simultaneously. model can easily extended include autoregressive terms using ar argument, example estimate AR(1) model step-indicator saturation writing isat(yso2, ar = 1, t.pval = 0.01). Detection outliers structural breaks can directly parallelized increase computational speed large number blocks searched setting argument parallel.options equal number cores available processing. example, isat(yso2, t.pval = 0.01, parallel.options = 2) estimates model parallel using two cores. Additional covariates can included regression model including mxreg argument. fixed regressors entering mxreg induce perfect collinear break functions , indicators removed automatically selection. example, consider forcing hypothesized step-shift 1972 retained simultaneously searching additional shifts throughout sample: % x1972 <- zoo(sim(so2data[, “year”])[, 26], order.= so2data[, “year”]) isat(yso2, t.pval = 0.01, mxreg = x1972) resulting estimation select fixed step-shift 1972, though particular example estimated terminal model forced step shift matches SIS results general search. %","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"testing-and-bias-correcting-post-model-selection-in-indicator-saturation","dir":"Articles","previous_headings":"Indicator saturation","what":"Testing and bias correcting post-model selection in indicator saturation","title":"An Introduction to the gets package","text":"coefficient path describes value coefficient particular variable evolves time. coefficient path intercept ‘isat’ object can extracted using isatvar function. function returns coefficient path time-varying intercept (const.path) deviation relative full-sample intercept (coef.path), together approximate variance coefficient path computed using approach (Felix Pretis 2017). model specified include autoregressive terms, isatvar (setting lr = TRUE) also returns static long-run solution dynamic model approximate variance. % sisvar <- isatvar(sis) sisvar coef.path const.path const.var const.se 1946 0.00000000 0.01465385 6.291637e-05 0.007931984 1947 0.00000000 0.01465385 6.291637e-05 0.007931984 … Indicator saturation may result -estimation error variance observations ``dummied ’’ resulting truncation distribution error terms. magnitude effect depends level significance selection generally small low values α\\alpha. effect manifests -estimation error variance, -estimation variance regressors selected . can corrected using IIS consistency efficiency correction factors derived (Johansen Nielsen 2016). correction factors implemented gets functions isvarcor corrects estimated error variance, isvareffcor additional correction estimated variance fixed regressors. correction factors can applied manually estimation results, specified arguments (conscorr = TRUE effcorr = TRUE) within isatvar function. demonstrated running IIS autoregressive model one lag (ar = 1) growth rate SO2_2 emissions. estimated variance coefficient path higher consistency efficiency corrections applied: % iis <- isat(yso2, ar = 1, sis = FALSE, iis = TRUE, t.pval = 0.05) isatvar(iis, conscorr = TRUE, effcorr = TRUE) coef.path const.path const.var const.se 1947 0.00000000 -0.006210179 7.225479e-05 0.008500282 1948 0.00000000 -0.006210179 7.225479e-05 0.008500282 … isatvar(iis, conscorr = FALSE, effcorr = FALSE) coef.path const.path const.var const.se 1947 0.00000000 -0.006210179 4.483453e-05 0.006695859 1948 0.00000000 -0.006210179 4.483453e-05 0.006695859 … terminal models isat result model selection, may therefore lead selection bias coefficient estimates selected variables. Post-selection bias-correction orthogonal variables can conducted using method proposed (Hendry Krolzig 2005). implemented function biascorr. Following (Felix Pretis 2017), bias-correction coefficients SIS model can directly applied coefficient path without prior orthogonalization. Bias-correcting coefficient path model growth rate SO2_2 yields one- two-step bias-corrected coefficients: % bcorr <- biascorr(b = sisvar[, “const.path”], b.se = sisvar[, “const.se”], p.alpha = 0.01, T = length(sisvar[, “const.path”])) beta beta.1step beta.2step … 1997 -0.14560000 -0.14560000 -0.14560000 1998 -0.01700000 -0.01700000 -0.01700000 1999 -0.30100000 -0.30099983 -0.30099983 2000 -0.05550000 -0.04043232 -0.03000334 2001 -0.05550000 -0.04043232 -0.03000334 … Bias-correction reduces magnitude estimated coefficients slightly account potential selection bias. function isattest makes possible conduct hypothesis tests coefficient path intercept `isat’ object. test described (Felix Pretis 2017) builds (Ericsson Hendry 2013) (Felix Pretis, Mann, Kaufmann 2015) use indicator saturation test time-varying forecast accuracy. main arguments isattest function : % hnull: numeric. null-hypothesis value tested . lr: logical. TRUE `isat’ object tested contains autoregressive terms, test conducted long-run equilibrium coefficient path. ci.pval: numeric, 0 1. level significance confidence interval hypothesis test. conscorr: logical. TRUE estimated error variance IIS consistency-corrected using results (Johansen Nielsen 2016). effcorr: logical. TRUE estimated variance fixed regressors IIS efficiency corrected using results (Johansen Nielsen 2016). biascorr: logical. TRUE coefficient path bias-corrected prior testing. valid non-dynamic (auto-regressive terms) test without additional covariates. test time-varying mean (determined using SIS) annual growth rate UK SO2_2 emissions null hypothesis zero-growth using isattest: % isattest(sis, hnull = 0, lr = FALSE, ci.pval = 0.99, plot.turn = TRUE, biascorr = TRUE) ci.low ci.high bias.high bias.low 1946 -0.006539007 0.035846700 0 0.0000000 1947 -0.006539007 0.035846700 0 0.0000000 1948 -0.006539007 0.035846700 0 0.0000000 … results shown automatically-generated plot given Figure @ref(fig_sistest) (plot.turn = TRUE argument automatically adds break dates plot lower panel). testing 1% using bias-correction suggests detected shift 1972 significantly move growth-rate away zero. Similarly, upward shift 2000 moves growth rate back zero. change, however, -set shift end sample shows growth rate turning significantly negative 2004.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"comparison-of-isat-with-other-methods-isat_comp","dir":"Articles","previous_headings":"Indicator saturation","what":"Comparison of isat with other methods {isat_comp}","title":"An Introduction to the gets package","text":"Indicator saturation formulates detection breaks outliers problem model (variable) selection. first provide overview software implementing indicator saturation, followed discussion isat gets relative existing break detection packages. currently existing software implementing indicator saturation Autometrics. IIS SIS available Autometrics gets, however, crucial difference within SIS construction subsequent interpretation step-indicators. gets steps constructed forward-steps: ${\\bf S} = \\left( 1_{\\{t \\geq j\\}}, j=1,...,n\\right)$, 1{t≥j}1_{\\{t \\geq j \\}} denotes indicator function 1{t≥j}=11_{ \\{t \\geq j\\}}=1 observations jj onwards, zero otherwise. Thus signs coefficients retained regression model gets correspond direction step: positive (negative) coefficients imply upward (downward) step, coefficient path begins regression intercept subsequent regime coefficient step indicator added full sample intercept. Autometrics relies backward-steps: ${\\bf S} = \\left( 1_{\\{t \\leq j\\}}, j=1,...,n\\right)$ thus step-coefficients interpreted opposite-signed relative reported regression coefficients. Autometrics currently implementation computation coefficient path approximate variance, thus testing different regimes non-trivial. directly implemented gets automatically plotting coefficient path (plot = TRUE), can extracted using isatvar. variance estimates Autometrics currently consistency efficiency corrected using . implemented gets – together extraction coefficient path variance – enables testing coefficient path using isattest function, together automatic bias-correction specified. , automatic trend-indicator saturation (TIS) currently available gets. Autometrics gets enable selection designed break functions – argument uis gets general variables observations model selection algorithm Autometrics. broader field detection breaks changepoints, main difference existing methods (e.g., , , implemented strucchange ) detection changepoints general (package changepoint – see ) model-selection approach break detection indicator saturation (discussion methodological differences see , well , ). makes possible detect outliers (single period shifts) jointly structural breaks (multiple period shifts), also possible detect breaks using designed functions possible conventional structural break methods changepoint analysis. indicator saturation methodology overlaps applications existing methods detection shifts intercept time series regression models, example using breakpoints strucchange . Relative strucchange Bai Perron least-squares approach changes mean, isat gets impose minimum break length can therefore conduct outlier detection jointly shifts intercept, implicit upper limit number breaks, thus possible identify outliers shifts mean start end samples trimming required. Changes regression coefficients random variables can detected isat using designed break functions uis argument interacting full set step-indicators random variable. , however, computationally expensive additional variable whose coefficient allowed break time adds set nn variables selected GUM. function breakpoints strucchange estimates pure structural change model coefficients change, isat gets partial model coefficients variables included mxreg allowed break, breaks mean (specified coefficients inclusion uis) permitted – making possible pre-specify constancy. partial structural change model using Bai Perron least-squares approach can estimated using available code.10 Relative changepoint , isat gets focused regression modeling structural breaks intercept regression models jointly outlier detection. authors changepoint note, changepoint focus changes regression models. function isat directly enables inclusion covariates mxreg ar within isat, additional covariates specified isat searches changes mean time series models used changepoint package , however, simultaneously detecting outliers.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:eviews:and:stata:export","dir":"Articles","previous_headings":"","what":"Exporting results to EViews, STATA and LaTeX","title":"An Introduction to the gets package","text":"two popular commercial econometric software packages EViews STATA , none provide GETS modeling capabilities. facilitate usage GETS modeling EViews STATA users, provide two functions purpose, eviews stata. functions work similar way, can applied either ‘arx’,‘gets’ ‘isat’ objects. example, typing eviews(getsm05) yields following print output: % EViews code estimate model: equation getsm05.ls(cov = white) yy mxreg4 R code (example) export data model: eviews(getsm05, file = ‘C:/Users/myname/Documents/getsdata.csv’) words, code estimate final model EViews, – needed – code-suggestion export data model. need export data final model likely relevant subsequent use isat. stata function works similarly. Note eviews stata functions applicable conditional mean specifications, since neither EViews STATA offer estimation dynamic log-variance models. objects returned arx, getsm, getsv isat lists. entries lists contain main estimation output objects class `data.frame’. means R package xtable (Dahl 2016) can used generate code data frames.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"An Introduction to the gets package","text":"R package gets provides toolkit general--specific modeling automatic variable selection regression specifications mean variance, well indicator saturation methods detect outliers structural breaks. Starting general candidate set variables unknown relevant irrelevant, selection using getsm getsv can yield parsimonious terminal models satisfy set chosen diagnostic criteria, parameter changes outlying observations detected using isat.","code":""},{"path":[]},{"path":[]},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"hoover1999data-simulations","dir":"Articles","previous_headings":"","what":"Hoover and Perez (1999) simulations","title":"An Introduction to the gets package","text":"Table @ref(table:list 1 experiments) contains list experiments. design experiments HP1, HP2’ HP7’ based , make use data x1tHP,...,x36tHPx_{1t}^{\\text{HP}},...,x_{36t}^{\\text{HP}}. noted two typos Table 3. value (7/4)\\sqrt{(7/4)} instead 7/4\\sqrt{7}/4 model autoregressive error, value 6.73 instead 6.44 model 7’, see also . number relevant variables GUM krelk_{\\text{rel}}, number irrelevant variables GUM kirrk_{\\text{irr}} total number variables (constant included) GUM k=krel+kirr+1k = k_{\\text{rel}} + k_{\\text{irr}} + 1. Nominal regressor significance level used 5%, 1000 replications. term m(k̂rel/krel)m(\\hat{k}_{\\text{rel}}/k_{\\text{rel}}) average proportion relevant variables k̂rel\\hat{k}_{\\text{rel}} retained relative actual number relevant variables krelk_{\\text{rel}} DGP. term m(k̂irr/kirr)m(\\hat{k}_{\\text{irr}}/k_{\\text{irr}}) denotes average proportion irrelevant variables k̂irr\\hat{k}_{\\text{irr}} retained relative actual number irrelevant variables kirrk_{\\text{irr}} GUM. estimate k̂irr\\hat{k}_{\\text{irr}} includes significant insignificant retained irrelevant variables (line , , counter HP includes significant irrelevant variables estimate). p̂(DGP)\\hat{p}(\\text{DGP}) proportion times DGP found exactly. properties HP algorithm . properties PcGets algorithm , properties Autometrics algorithm . AutoSEARCH, constant included regressions ignored evaluation successes failures (line counter , ), diagnostic checks AR ARCH test standardized residuals undertaken lag 2 using significance level 2.5% , tiebreaker Schwarz information criterion used Gaussian log-likelihood made standardized residuals mean specification.","code":""},{"path":"http://moritzschwarz.org/gets/articles/introduction.html","id":"sec:simulation-tables","dir":"Articles","previous_headings":"","what":"Simulation tables","title":"An Introduction to the gets package","text":"Tables @ref(tab_lassuncorr), @ref(tab_lassposcorr), @ref(tab_lassnegcorr) @ref(tab_isatgauge) present simulation results comparing gets alternative variable selection methods, properties isat null breaks.","code":""},{"path":"http://moritzschwarz.org/gets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Genaro Sucarrat. Maintainer.","code":""},{"path":"http://moritzschwarz.org/gets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pretis F, Reade JJ, Sucarrat G (2018). “Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks.” Journal Statistical Software, 86(3), 1–44. doi:10.18637/jss.v086.i03.","code":"@Article{,   title = {Automated General-to-Specific ({GETS}) Regression Modeling and Indicator Saturation for Outliers and Structural Breaks},   author = {Felix Pretis and J. James Reade and Genaro Sucarrat},   journal = {Journal of Statistical Software},   year = {2018},   volume = {86},   number = {3},   pages = {1--44},   doi = {10.18637/jss.v086.i03}, }"},{"path":"http://moritzschwarz.org/gets/index.html","id":"gets","dir":"","previous_headings":"","what":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"R Package gets provides General--Specific (GETS) modelling mean variance regression, Indicator Saturation (ISAT) methods detecting testing structural breaks mean. Facilities user-specified GETS ISAT methods also provided. CRAN webpage package : https://CRAN.R-project.org/package=gets. , Github, provide development version package. overview files folders, see ‘Overview files folders’.","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"following R command installs stable version CRAN: install current development version available Github, use following command:","code":"install.packages('gets', dependencies = TRUE) install.packages(   \"https://github.com/gsucarrat/gets/raw/master/gets_devel.tar.gz\",   repos = NULL, type = \"source\" )"},{"path":"http://moritzschwarz.org/gets/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"introduction (PDF): https://doi.org/10.18637/jss.v086.i03 User-specified GETS ISAT (PDF): https://journal.r-project.org/archive/2021/RJ-2021-024/ Webpage: http://www.sucarrat.net/R/gets CRAN webpage: https://CRAN.R-project.org/package=gets https://felixpretis.climateeconometrics.org/software/","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"package free open source software, licensed GPL (>= 2)","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"overview-of-files-and-folders","dir":"","previous_headings":"","what":"Overview of files and folders","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"folder gets contains ‘raw-material’ current development version package. file gets_devel.tar.gz contains tarball package passed CRAN checks. See instructions install version.","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"source-code","dir":"","previous_headings":"","what":"Source code","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"source code package contained following files gets/R/ folder: first file contains base functions package, functions related arx() function. second file contains functions related isat() function. third file contains functions related dlogitx() function. fourth file contains functions related lm() function. associated help-files contained folder named gets/man/.","code":"gets-base-source.R gets-isat-source.R gets-dlogitx-source.R gets-lm-source.R"},{"path":"http://moritzschwarz.org/gets/index.html","id":"create-and-check-the-tarball","dir":"","previous_headings":"","what":"Create and check the tarball","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"files 0-make--check-tarball--G used maintainer build CRAN-check tarball.","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"test-files","dir":"","previous_headings":"","what":"Test-files","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"files 0-test-files--G used maintainer test code new version released. subset tests automatically invoked test-files gets/tests/ folder.","code":""},{"path":"http://moritzschwarz.org/gets/index.html","id":"other-files","dir":"","previous_headings":"","what":"Other files","title":"General-to-Specific (GETS) Modelling and Indicator Saturation Methods","text":"remaining files Github auxiliary files, prototypes new ideas functionality.","code":""},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"Extract -sample conditional Value--Risk, -sample conditional Expected Shortfall chosen risk level(s).","code":""},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"","code":"ES(object, level=0.99, type=7, ...) VaR(object, level=0.99, type=7, ...)"},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"object arx gets object level risk level(s), must 0 1 type method used compute empirical quantiles standardised residuals ... arguments passed (currently used)","code":""},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"vector matrix containing either conditional Value--Risk (VaR) conditional Expected Shortfall (ES) chosen risk level(s).","code":""},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/ES.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Value-at-Risk (VaR) and Expected Shortfall (ES) — ES","text":"","code":"##generate random variates, estimate model: y <- rnorm(50) mymodel <- arx(y, arch=1) #> Warning:  #>  #> New default 'mc = TRUE' in arx() as of version 0.28 #> This warning only appears the first time arx() is invoked #> To suppress this warning, set options(mc.warning = FALSE)  ##extract 99% expected shortfall: ES(mymodel) #>        1        2        3        4        5        6        7        8  #>       NA 1.936948 2.437264 1.750214 3.100744 2.150171 1.953261 1.845047  #>        9       10       11       12       13       14       15       16  #> 2.822709 2.833070 2.720507 2.324843 2.146301 1.774875 1.882906 2.213164  #>       17       18       19       20       21       22       23       24  #> 1.837523 2.354211 3.539351 2.194244 2.100634 2.242658 2.325362 1.962710  #>       25       26       27       28       29       30       31       32  #> 2.094489 1.801252 5.935343 2.091040 3.169212 2.142369 1.909355 2.018193  #>       33       34       35       36       37       38       39       40  #> 2.548935 2.451759 1.846552 2.673493 3.594995 1.829174 2.729474 2.648705  #>       41       42       43       44       45       46       47       48  #> 1.976308 2.782538 2.256312 3.501649 2.809309 2.259346 1.691855 2.859025  #>       49       50  #> 2.174019 2.659726   ##extract 99%, 95% and 90% expected shortfalls: ES(mymodel, level=c(0.99, 0.95, 0.9)) #>      ES0.99   ES0.95    ES0.9 #> 1        NA       NA       NA #> 2  1.936948 1.840929 1.710999 #> 3  2.437264 2.315162 2.149938 #> 4  1.750214 1.663930 1.547172 #> 5  3.100744 2.944054 2.732026 #> 6  2.150171 2.043036 1.898064 #> 7  1.953261 1.856391 1.725311 #> 8  1.845047 1.753818 1.630371 #> 9  2.822709 2.680513 2.488099 #> 10 2.833070 2.690334 2.497189 #> 11 2.720507 2.583639 2.398435 #> 12 2.324843 2.208602 2.051309 #> 13 2.146301 2.039367 1.894669 #> 14 1.774875 1.687305 1.568808 #> 15 1.882906 1.789703 1.663586 #> 16 2.213164 2.102745 1.953330 #> 17 1.837523 1.746686 1.623770 #> 18 2.354211 2.236439 2.077074 #> 19 3.539351 3.359796 3.116828 #> 20 2.194244 2.084812 1.936731 #> 21 2.100634 1.996081 1.854604 #> 22 2.242658 2.130702 1.979206 #> 23 2.325362 2.209094 2.051764 #> 24 1.962710 1.865347 1.733600 #> 25 2.094489 1.990257 1.849213 #> 26 1.801252 1.712307 1.591949 #> 27 5.935343 5.630881 5.218893 #> 28 2.091040 1.986987 1.846187 #> 29 3.169212 3.008952 2.792095 #> 30 2.142369 2.035640 1.891219 #> 31 1.909355 1.814774 1.686790 #> 32 2.018193 1.917938 1.782277 #> 33 2.548935 2.421011 2.247910 #> 34 2.451759 2.328902 2.162655 #> 35 1.846552 1.755245 1.631692 #> 36 2.673493 2.539076 2.357188 #> 37 3.594995 3.412539 3.165646 #> 38 1.829174 1.738773 1.616446 #> 39 2.729474 2.592139 2.406302 #> 40 2.648705 2.515580 2.335441 #> 41 1.976308 1.878237 1.745530 #> 42 2.782538 2.642436 2.452856 #> 43 2.256312 2.143643 1.991185 #> 44 3.501649 3.324059 3.083751 #> 45 2.809309 2.667812 2.476343 #> 46 2.259346 2.146520 1.993847 #> 47 1.691855 1.608613 1.495972 #> 48 2.859025 2.714936 2.519960 #> 49 2.174019 2.065641 1.918987 #> 50 2.659726 2.526027 2.345110  ##extract 99% value-at-risk: VaR(mymodel) #>        1        2        3        4        5        6        7        8  #>       NA 1.874409 2.357737 1.694016 2.998689 2.080392 1.890168 1.785628  #>        9       10       11       12       13       14       15       16  #> 2.730094 2.740104 2.631362 2.249134 2.076653 1.717839 1.822201 2.141246  #>       17       18       19       20       21       22       23       24  #> 1.778359 2.277504 3.422404 2.122969 2.032537 2.169739 2.249634 1.899296  #>       25       26       27       28       29       30       31       32  #> 2.026601 1.743321 5.737042 2.023269 3.064832 2.072855 1.847753 1.952895  #>       33       34       35       36       37       38       39       40  #> 2.465616 2.371740 1.787082 2.585945 3.476158 1.770294 2.640026 2.561998  #>       41       42       43       44       45       46       47       48  #> 1.912433 2.691287 2.182929 3.385982 2.717150 2.185861 1.637638 2.765177  #>       49       50  #> 2.103431 2.572646   ##extract 99%, 95% and 90% values-at-risk: VaR(mymodel, level=c(0.99, 0.95, 0.9)) #>     VaR0.99  VaR0.95   VaR0.9 #> 1        NA       NA       NA #> 2  1.874409 1.720491 1.376101 #> 3  2.357737 2.162009 1.724070 #> 4  1.694016 1.555702 1.246227 #> 5  2.998689 2.747517 2.185521 #> 6  2.080392 1.908656 1.524397 #> 7  1.890168 1.734887 1.387447 #> 8  1.785628 1.639390 1.312183 #> 9  2.730094 2.502157 1.992148 #> 10 2.740104 2.511300 1.999354 #> 11 2.631362 2.411965 1.921066 #> 12 2.249134 2.062801 1.645882 #> 13 2.076653 1.905240 1.521705 #> 14 1.717839 1.577465 1.263379 #> 15 1.822201 1.672800 1.338514 #> 16 2.141246 1.964246 1.568209 #> 17 1.778359 1.632750 1.306950 #> 18 2.277504 2.088717 1.666307 #> 19 3.422404 3.134579 2.490573 #> 20 2.122969 1.947550 1.555050 #> 21 2.032537 1.864940 1.489944 #> 22 2.169739 1.990274 1.588722 #> 23 2.249634 2.063258 1.646242 #> 24 1.899296 1.743225 1.394018 #> 25 2.026601 1.859518 1.485670 #> 26 1.743321 1.600742 1.281724 #> 27 5.737042 5.248993 4.156986 #> 28 2.023269 1.856474 1.483271 #> 29 3.064832 2.807938 2.233141 #> 30 2.072855 1.901771 1.518971 #> 31 1.847753 1.696141 1.356910 #> 32 1.952895 1.792188 1.432606 #> 33 2.465616 2.260557 1.801738 #> 34 2.371740 2.174801 1.734152 #> 35 1.787082 1.640718 1.313230 #> 36 2.585945 2.370477 1.888368 #> 37 3.476158 3.183683 2.529273 #> 38 1.770294 1.625383 1.301144 #> 39 2.640026 2.419879 1.927303 #> 40 2.561998 2.348602 1.871128 #> 41 1.912433 1.755226 1.403476 #> 42 2.691287 2.466707 1.964209 #> 43 2.182929 2.002323 1.598218 #> 44 3.385982 3.101307 2.464351 #> 45 2.717150 2.490332 1.982828 #> 46 2.185861 2.005001 1.600329 #> 47 1.637638 1.504201 1.205638 #> 48 2.765177 2.534205 2.017405 #> 49 2.103431 1.929702 1.540984 #> 50 2.572646 2.358328 1.878793"},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate an AR-X model with log-ARCH-X errors — arx","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"Estimation OLS, two-step OLS variance specification specified: first mean specification (AR-X) estimated, whereas second step log-variance specification (log-ARCH-X) estimated. AR-X mean specification can contain intercept, AR-terms, lagged moving averages regressand conditioning covariates ('X'). log-variance specification can contain log-ARCH terms, asymmetry 'leverage' terms, log(EqWMA) EqWMA lagged equally weighted moving average past squared residuals (volatility proxy) conditioning covariates ('X').","code":""},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"","code":"arx(y, mc=TRUE, ar=NULL, ewma=NULL, mxreg=NULL, vc=FALSE,   arch=NULL, asym=NULL, log.ewma=NULL, vxreg=NULL, zero.adj=0.1,   vc.adj=TRUE, vcov.type=c(\"ordinary\", \"white\", \"newey-west\"),   qstat.options=NULL, normality.JarqueB=FALSE, user.estimator=NULL,   user.diagnostics=NULL, tol=1e-07, LAPACK=FALSE, singular.ok=TRUE,   plot=NULL)"},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"y numeric vector, time-series zoo object. Missing values beginning end series allowed, removed na.trim command mc logical. TRUE (default) includes intercept mean specification, whereas FALSE ar either NULL (default) integer vector, say, c(2,4) 1:4. AR-lags include mean specification. NULL, lags included ewma either NULL (default) list arguments sent eqwma function. latter case lagged moving average y included regressor mxreg either NULL (default) numeric vector matrix, say, zoo object, conditioning variables. Note , y mxreg zoo objects, samples chosen match vc logical. TRUE includes intercept log-variance specification, whereas FALSE (default) . log-variance specification contains item log-variance intercept, vc set TRUE arch either NULL (default) integer vector, say, c(1,3) 2:5. log-ARCH lags include log-variance specification asym either NULL (default) integer vector, say, c(1) 1:3. asymmetry (.e. 'leverage') terms include log-variance specification log.ewma either NULL (default) vector lengths volatility proxies, see leqwma vxreg either NULL (default) numeric vector matrix, say, zoo object, conditioning variables. y mxreg zoo objects, samples chosen match zero.adj numeric value 0 1. quantile adjustment zero values. default 0.1 means zero residuals replaced 10 percent quantile absolute residuals taking logarithm vc.adj logical. TRUE (default), log-variance intercept adjusted estimate E[ln(z^2)], z standardised error. adjustment needed conditional scale equal conditional standard deviation. FALSE, log-variance intercept adjusted vcov.type character vector, \"ordinary\" (default), \"white\" \"newey-west\". \"ordinary\", ordinary variance-covariance matrix used inference. \"white\", White (1980) heteroscedasticity-robust matrix used. \"newey-west\", Newey West (1987) heteroscedasticity autocorrelation-robust matrix used qstat.options NULL (default) integer vector length two, say, c(1,1). first value sets lag-order AR diagnostic test, whereas second value sets lag-order ARCH diagnostic test. NULL, two values vector set automatically normality.JarqueB FALSE (default) TRUE. TRUE, results Jarque Bera (1980) test non-normality residuals included estimation results. user.estimator NULL (default) list one entry, name, containing name user-defined estimator. Additional items, , passed arguments estimator question user.diagnostics NULL (default) list two entries, name pval, see user.fun argument diagnostics tol numeric value (default = 1e-07). tolerance detecting linear dependencies columns regressors (see qr function). used LAPACK FALSE (default) user.estimator NULL. LAPACK logical. TRUE, use LAPACK. FALSE (default), use LINPACK (see qr function). used user.estimator NULL. singular.ok logical. TRUE, regressors checked singularity, ones causing automatically removed. plot NULL logical. TRUE, fitted values residuals plotted. NULL (default), value set options determines whether plot produced .","code":""},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"overview AR-X model log-ARCH-X errors, see Pretis, Reade Sucarrat (2018): doi:10.18637/jss.v086.i03 . arguments user.estimator user.diagnostics enables specification user-defined estimators user-defined diagnostics. end, principles arguments getsFun followed, see documentation \"Details\", Sucarrat (2020): https://journal.r-project.org/archive/2021/RJ-2021-024/.","code":""},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"list class 'arx'","code":""},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"C. Jarque . Bera (1980): 'Efficient Tests Normality, Homoscedasticity Serial Independence'. Economics Letters 6, pp. 255-259. doi:10.1016/0165-1765(80)90024-5 Felix Pretis, James Reade Genaro Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44. doi:10.18637/jss.v086.i03 Genaro Sucarrat (2020): 'User-Specified General--Specific Indicator Saturation Methods'. R Journal 12:2, pages 388-401. https://journal.r-project.org/archive/2021/RJ-2021-024/ Halbert White (1980): 'Heteroskedasticity-Consistent Covariance Matrix Estimator Direct Test Heteroskedasticity', Econometrica 48, pp. 817-838. Whitney K. Newey Kenned D. West (1987): 'Simple, Positive Semi-Definite, Heteroskedasticity Autocorrelation Consistent Covariance Matrix', Econometrica 55, pp. 703-708.","code":""},{"path":[]},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/arx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate an AR-X model with log-ARCH-X errors — arx","text":"","code":"##Simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 70)  ##estimate an AR(2) with intercept: arx(y, mc=TRUE, ar=1:2) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 68  #> Sample: 3 to 70  #>  #> Mean equation: #>  #>             coef std.error  t-stat p-value   #> mconst  0.013715  0.115112  0.1191 0.90553   #> ar1     0.323324  0.125262  2.5812 0.01211 * #> ar2    -0.040814  0.124257 -0.3285 0.74361   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                      Chi-sq df p-value #> Ljung-Box AR(3)   3.8157196  3  0.2821 #> Ljung-Box ARCH(1) 0.0087708  1  0.9254 #>                            #> SE of regression   0.94884 #> R-squared          0.09647 #> Log-lik.(n=68)   -91.41661  ##Simulate four independent Gaussian regressors: xregs <- matrix(rnorm(4*70), 70, 4)  ##estimate an AR(2) with intercept and four conditioning ##regressors in the mean: arx(y, ar=1:2, mxreg=xregs) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 68  #> Sample: 3 to 70  #>  #> Mean equation: #>  #>             coef std.error  t-stat p-value   #> mconst -0.020030  0.117600 -0.1703 0.86532   #> ar1     0.314052  0.130041  2.4150 0.01875 * #> ar2    -0.058036  0.129614 -0.4478 0.65591   #> mxreg1 -0.045191  0.126042 -0.3585 0.72118   #> mxreg2  0.108048  0.126116  0.8567 0.39494   #> mxreg3  0.159350  0.133675  1.1921 0.23785   #> mxreg4  0.145276  0.114408  1.2698 0.20898   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                    Chi-sq df p-value #> Ljung-Box AR(3)   2.92995  3  0.4026 #> Ljung-Box ARCH(1) 0.17116  1  0.6791 #>                            #> SE of regression   0.95304 #> R-squared          0.14454 #> Log-lik.(n=68)   -89.71711  ##estimate a log-variance specification with a log-ARCH(4) ##structure: arx(y, mc=FALSE, arch=1:4) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Sample: 1 to 70  #>  #> Log-variance equation: #>  #>             coef std.error  t-stat p-value #> vconst -0.334531  0.471100  0.5042  0.4776 #> arch1   0.040073  0.128641  0.3115  0.7565 #> arch2  -0.076960  0.133758 -0.5754  0.5672 #> arch3  -0.124580  0.133945 -0.9301  0.3560 #> arch4  -0.058274  0.134204 -0.4342  0.6657 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value   #> Ljung-Box AR(1)   5.8181  1 0.01586 * #> Ljung-Box ARCH(5) 3.6677  5 0.59818   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                            #> SE of regression   0.97479 #> R-squared         -0.00002 #> Log-lik.(n=66)   -91.89688  ##estimate a log-variance specification with a log-ARCH(4) ##structure and an asymmetry/leverage term: arx(y, mc=FALSE, arch=1:4, asym=1) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Sample: 1 to 70  #>  #> Log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst -0.123582  0.468464  0.0696 0.79193   #> arch1   0.246437  0.174802  1.4098 0.16376   #> arch2  -0.071564  0.131724 -0.5433 0.58895   #> arch3  -0.130442  0.131916 -0.9888 0.32672   #> arch4  -0.018810  0.134119 -0.1402 0.88893   #> asym1  -0.378539  0.221001 -1.7128 0.09191 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value   #> Ljung-Box AR(1)   5.2578  1 0.02185 * #> Ljung-Box ARCH(5) 1.4461  5 0.91921   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                            #> SE of regression   0.97479 #> R-squared         -0.00002 #> Log-lik.(n=66)   -95.13333  ##estimate a log-variance specification with a log-ARCH(4) ##structure, an asymmetry or leverage term, a 10-period log(EWMA) as ##volatility proxy, and the log of the squareds of the conditioning ##regressors in the log-variance specification: arx(y, mc=FALSE,   arch=1:4, asym=1, log.ewma=list(length=10), vxreg=log(xregs^2)) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Sample: 1 to 70  #>  #> Log-variance equation: #>  #>                   coef std.error  t-stat p-value #> vconst        0.487403  0.749811  0.4225  0.5157 #> arch1         0.267782  0.202055  1.3253  0.1912 #> arch2        -0.037977  0.146493 -0.2592  0.7965 #> arch3        -0.083006  0.147989 -0.5609  0.5774 #> arch4         0.057241  0.157793  0.3628  0.7183 #> asym1        -0.363850  0.249324 -1.4593  0.1509 #> logEqWMA(10) -1.111548  1.102564 -1.0081  0.3183 #> vxreg1       -0.122789  0.184280 -0.6663  0.5083 #> vxreg2        0.062479  0.189227  0.3302  0.7427 #> vxreg3        0.185292  0.167040  1.1093  0.2727 #> vxreg4        0.069712  0.148582  0.4692  0.6410 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value   #> Ljung-Box AR(1)   4.8085  1 0.02832 * #> Ljung-Box ARCH(5) 4.1348  5 0.53018   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                            #> SE of regression   0.97479 #> R-squared         -0.00002 #> Log-lik.(n=60)   -90.89802  ##estimate an AR(2) with intercept and four conditioning regressors ##in the mean, and a log-variance specification with a log-ARCH(4) ##structure, an asymmetry or leverage term, a 10-period log(EWMA) as ##volatility proxy, and the log of the squareds of the conditioning ##regressors in the log-variance specification: arx(y, ar=1:2, mxreg=xregs,   arch=1:4, asym=1, log.ewma=list(length=10), vxreg=log(xregs^2)) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 68  #> Sample: 3 to 70  #>  #> Mean equation: #>  #>             coef std.error  t-stat p-value   #> mconst -0.020030  0.117600 -0.1703 0.86532   #> ar1     0.314052  0.130041  2.4150 0.01875 * #> ar2    -0.058036  0.129614 -0.4478 0.65591   #> mxreg1 -0.045191  0.126042 -0.3585 0.72118   #> mxreg2  0.108048  0.126116  0.8567 0.39494   #> mxreg3  0.159350  0.133675  1.1921 0.23785   #> mxreg4  0.145276  0.114408  1.2698 0.20898   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log-variance equation: #>  #>                    coef  std.error  t-stat p-value   #> vconst       -0.6418794  0.6313424  1.0337 0.30930   #> arch1         0.0964675  0.1671815  0.5770 0.56668   #> arch2         0.0100427  0.1557870  0.0645 0.94887   #> arch3        -0.0358162  0.1435422 -0.2495 0.80405   #> arch4        -0.0870830  0.1454666 -0.5986 0.55228   #> asym1        -0.4784833  0.2605120 -1.8367 0.07258 . #> logEqWMA(10) -0.3209869  0.9299380 -0.3452 0.73151   #> vxreg1       -0.1216583  0.1350725 -0.9007 0.37235   #> vxreg2        0.0616220  0.1342431  0.4590 0.64833   #> vxreg3       -0.0017352  0.1265075 -0.0137 0.98911   #> vxreg4       -0.0216166  0.1155589 -0.1871 0.85242   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.7660  3  0.2879 #> Ljung-Box ARCH(5) 1.1414  5  0.9504 #>                            #> SE of regression   0.95304 #> R-squared          0.14454 #> Log-lik.(n=58)   -75.68205"},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to class 'arx' — as.arx","title":"Convert an object to class 'arx' — as.arx","text":"function .arx generic function methods returns object class arx.","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to class 'arx' — as.arx","text":"","code":"as.arx(object, ...)  ##S3 method for objects of class 'lm': # S3 method for class 'lm' as.arx(object, ...)"},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to class 'arx' — as.arx","text":"object object class lm ... arguments passed methods","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to class 'arx' — as.arx","text":"Object class arx","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an object to class 'arx' — as.arx","text":"Genaro Sucarrat http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/as.arx.lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to class 'arx' — as.arx","text":"","code":"##generate some data: set.seed(123) #for reproducibility y <- rnorm(30) #generate Y x <- matrix(rnorm(30*10), 30, 10) #create matrix of Xs  ##typical situation: mymodel <- lm(y ~ x) as.arx(mymodel) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 30  #> Sample: 1 to 30  #>  #> Mean equation: #>  #>               coef   std.error  t-stat p-value   #> mconst  0.27005590  0.21026283  1.2844 0.21445   #> x1     -0.61303927  0.28160750 -2.1769 0.04230 * #> x2      0.13398941  0.22947573  0.5839 0.56616   #> x3      0.30619954  0.21734292  1.4088 0.17504   #> x4     -0.00018761  0.19034597 -0.0010 0.99922   #> x5      0.16595175  0.20992401  0.7905 0.43897   #> x6     -0.16893171  0.21399989 -0.7894 0.43962   #> x7      0.51949160  0.22562893  2.3024 0.03279 * #> x8      0.32756857  0.20626559  1.5881 0.12877   #> x9     -0.51817835  0.24477483 -2.1170 0.04768 * #> x10    -0.01454824  0.19954250 -0.0729 0.94264   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                       Chi-sq df p-value #> Ljung-Box AR(1)   0.06042745  1  0.8058 #> Ljung-Box ARCH(1) 0.00067615  1  0.9793 #>                            #> SE of regression   0.93728 #> R-squared          0.40197 #> Log-lik.(n=30)   -35.12486                                   ##use hetero-robust vcov: as.arx(mymodel, vcov.type=\"white\") #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: White (1980)  #> No. of observations (mean eq.): 30  #> Sample: 1 to 30  #>  #> Mean equation: #>  #>               coef   std.error  t-stat p-value   #> mconst  0.27005590  0.13837697  1.9516 0.06589 . #> x1     -0.61303927  0.27212423 -2.2528 0.03629 * #> x2      0.13398941  0.20116413  0.6661 0.51337   #> x3      0.30619954  0.22901348  1.3370 0.19700   #> x4     -0.00018761  0.14658909 -0.0013 0.99899   #> x5      0.16595175  0.14962022  1.1092 0.28121   #> x6     -0.16893171  0.14592354 -1.1577 0.26134   #> x7      0.51949160  0.19021354  2.7311 0.01327 * #> x8      0.32756857  0.16763602  1.9540 0.06558 . #> x9     -0.51817835  0.22303637 -2.3233 0.03141 * #> x10    -0.01454824  0.11859578 -0.1227 0.90366   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                       Chi-sq df p-value #> Ljung-Box AR(1)   0.06042745  1  0.8058 #> Ljung-Box ARCH(1) 0.00067615  1  0.9793 #>                            #> SE of regression   0.93728 #> R-squared          0.40197 #> Log-lik.(n=30)   -35.12486  ##add ar-dynamics: as.arx(mymodel, ar=1:2) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 28  #> Sample: 3 to 30  #>  #> Mean equation: #>  #>             coef std.error  t-stat p-value   #> mconst  0.312270  0.241746  1.2917 0.21600   #> ar1    -0.167514  0.340202 -0.4924 0.62957   #> ar2    -0.199858  0.266832 -0.7490 0.46544   #> x1     -0.592040  0.313247 -1.8900 0.07824 . #> x2      0.080545  0.318537  0.2529 0.80381   #> x3      0.336700  0.243410  1.3833 0.18683   #> x4      0.087082  0.252641  0.3447 0.73511   #> x5      0.180548  0.240054  0.7521 0.46362   #> x6     -0.153325  0.269165 -0.5696 0.57736   #> x7      0.497405  0.251823  1.9752 0.06694 . #> x8      0.282720  0.231063  1.2236 0.23999   #> x9     -0.515726  0.337073 -1.5300 0.14683   #> x10    -0.181715  0.291814 -0.6227 0.54283   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                       Chi-sq df p-value #> Ljung-Box AR(3)   1.25213112  3  0.7405 #> Ljung-Box ARCH(1) 0.00085579  1  0.9767 #>                            #> SE of regression   1.01385 #> R-squared          0.44128 #> Log-lik.(n=28)   -33.61550  ##add log-variance specification: as.arx(mymodel, arch=1:2) #>  #> Date: Sat Jul 27 15:29:46 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 30  #> Sample: 1 to 30  #>  #> Mean equation: #>  #>               coef   std.error  t-stat p-value   #> mconst  0.27005590  0.21026283  1.2844 0.21445   #> x1     -0.61303927  0.28160750 -2.1769 0.04230 * #> x2      0.13398941  0.22947573  0.5839 0.56616   #> x3      0.30619954  0.21734292  1.4088 0.17504   #> x4     -0.00018761  0.19034597 -0.0010 0.99922   #> x5      0.16595175  0.20992401  0.7905 0.43897   #> x6     -0.16893171  0.21399989 -0.7894 0.43962   #> x7      0.51949160  0.22562893  2.3024 0.03279 * #> x8      0.32756857  0.20626559  1.5881 0.12877   #> x9     -0.51817835  0.24477483 -2.1170 0.04768 * #> x10    -0.01454824  0.19954250 -0.0729 0.94264   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log-variance equation: #>  #>            coef std.error  t-stat  p-value    #> vconst -1.86806   0.66211  7.9601 0.004782 ** #> arch1  -0.29450   0.20609 -1.4290 0.165375    #> arch2  -0.38209   0.20848 -1.8327 0.078778 .  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                     Chi-sq df p-value #> Ljung-Box AR(1)   0.027496  1  0.8683 #> Ljung-Box ARCH(3) 0.574734  3  0.9022 #>                            #> SE of regression   0.93728 #> R-squared          0.40197 #> Log-lik.(n=28)   -30.52120"},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to 'lm' object — as.lm","title":"Convert to 'lm' object — as.lm","text":"Convert 'arx'/'gets'/'isat' object 'lm' object","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to 'lm' object — as.lm","text":"","code":"as.lm(object)"},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to 'lm' object — as.lm","text":"object object class arx, gets isat","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to 'lm' object — as.lm","text":"Object class lm","code":""},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert to 'lm' object — as.lm","text":"Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/as.lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to 'lm' object — as.lm","text":"","code":"##generate data, estimate model of class 'arx': set.seed(123) y <- rnorm(30) arxmod <- arx(y, mc=TRUE, ar=1:3) as.lm(arxmod) #>  #> Call: #> lm(formula = y ~ . - 1, data = yx) #>  #> Coefficients: #>   mconst       ar1       ar2       ar3   #> -0.06035   0.03829  -0.15922   0.37697   #>   ##from 'gets' to 'lm': getsmod <- getsm(arxmod, keep=1) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value   #> mconst       1    1 -0.060347  0.185054 -0.3261 0.74729   #> ar1          2    0  0.038286  0.191216  0.2002 0.84306   #> ar2          3    0 -0.159216  0.192118 -0.8287 0.41577   #> ar3          4    0  0.376970  0.194771  1.9354 0.06532 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(4)   2.4348  4 0.65635 #> Ljung-Box ARCH(1) 2.4042  1 0.12101 #>  #> 3 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #>  #>   Path 1: 2 3 4  #>   Path 2: 3 2 4  #>   Path 3: 4 2 3  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.883843 -37.28396 27 1 #>  #> Retained regressors (final model): #>  #>   mconst  as.lm(getsmod) #>  #> Call: #> lm(formula = y ~ . - 1, data = yx) #>  #> Coefficients: #>   mconst   #> -0.08078   #>   ##from 'isat' to 'lm': isatmod <- isat(y) #>  #> SIS block 1 of 2: #> 15 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #>  #> SIS block 2 of 2: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> GETS of union of retained SIS variables...  #>  #> GETS of union of ALL retained variables... as.lm(isatmod) #>  #> Call: #> lm(formula = y ~ . - 1, data = yx) #>  #> Coefficients: #>  mconst   #> -0.0471   #>"},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias-correction of coefficients following general-to-specific model selection — biascorr","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"Takes vector coefficients (valid orthogonal variables), standard errors, significance level variables selected , sample size, return bias-corrected coefficient estimates account bias induced model selection.","code":""},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"","code":"biascorr(b, b.se, p.alpha, T)"},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"b Kx1 vector coefficients. b.se Kx1 vector standard errors coefficients 'b'. p.alpha numeric value 0 1, significance level selection conducted. T integer, sample size original model selection regression.","code":""},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"function computes bias-corrected estimates coefficients regression models post general--specific model selection using approach Hendry Krolzig (2005). results valid orthogonal regressors . Bias correction can applied coefficient path isat models additional covariate besides indicators intercept - see Pretis (2015).","code":""},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"Returns Kx3 matrix, first column lists original coefficients, second column one-step corrected coefficients, third column two-step bias-corrected coefficients.","code":""},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"Hendry, D.F. Krolzig, H.M. (2005): 'properties automatic Gets modelling'. Economic Journal, 115, C32-C61. Pretis, F. (2015): 'Testing time-varying predictive accuracy using bias-corrected indicator saturation'. Oxford Department Economics Discussion Paper. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/biascorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias-correction of coefficients following general-to-specific model selection — biascorr","text":"","code":"###Bias-correction of the coefficient path of the Nile data #nile <- as.zoo(Nile) #isat.nile <- isat(nile, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005) #var <- isatvar(isat.nile) #biascorr(b=var$const.path, b.se=var$const.se, p.alpha=0.005, T=length(var$const.path))  ##Bias-correction of the coefficient path on artificial data #set.seed(123) #d <- matrix(0,100,1) #d[35:55] <- 1 #e <- rnorm(100, 0, 1) #y <- d*1  +e    #ys <- isat(y, sis=TRUE, iis=FALSE, t.pval=0.01) #var <- isatvar(ys) #biascorr(b=var$const.path, b.se=var$const.se, p.alpha=0.01, T=length(var$const.path))"},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":null,"dir":"Reference","previous_headings":"","what":"Block-based General-to-Specific (GETS) modelling — blocksFun","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"Auxiliary function (.e. intended average user) enables block-based GETS-modelling user-specified estimator, diagnostics goodness--fit criterion.","code":""},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"","code":"blocksFun(y, x, untransformed.residuals=NULL, blocks=NULL,   no.of.blocks=NULL, max.block.size=30, ratio.threshold=0.8,   gets.of.union=TRUE, force.invertibility=FALSE,   user.estimator=list(name=\"ols\"), t.pval=0.001, wald.pval=t.pval,   do.pet=FALSE, ar.LjungB=NULL, arch.LjungB=NULL, normality.JarqueB=NULL,   user.diagnostics=NULL, gof.function=list(name=\"infocrit\"),   gof.method=c(\"min\", \"max\"), keep=NULL, include.gum=FALSE,   include.1cut=FALSE, include.empty=FALSE, max.paths=NULL,   turbo=FALSE, parallel.options=NULL, tol=1e-07, LAPACK=FALSE,   max.regs=NULL, print.searchinfo=TRUE, alarm=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"y numeric vector (missing values, .e. non-numeric 'holes') x matrix, list matrices untransformed.residuals NULL (default) , ols used method=6 user.estimator, numeric vector containing untransformed residuals blocks NULL (default) list lists vectors integers indicate blocks put together. NULL, block composition undertaken automatically internal algorithm depends ..blocks, max.block.size ratio.threshold ..blocks NULL (default) integer. NULL, number blocks determined automatically internal algorithm max.block.size integer controls size blocks ratio.threshold numeric 0 1 controls minimum ratio variables block total observations gets..union logical. TRUE (default), GETS modelling undertaken union retained variables. Otherwise force.invertibility logical. TRUE, x-matrix ensured full row-rank passed getsFun user.estimator list, see getsFun details t.pval numeric value 0 1. significance level used two-sided coefficient significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs) .pet logical. TRUE, Parsimonious Encompassing Test (PET) GUM undertaken variable removal joint significance deleted regressors along current GETS path. FALSE, PET undertaken removal ar.LjungB two element vector, NULL. former case, first element contains AR-order, second element significance level. NULL, test autocorrelation residuals conducted arch.LjungB two element vector, NULL. former case, first element contains ARCH-order, second element significance level. NULL, test ARCH residuals conducted normality.JarqueB NULL numeric value 0 1. latter case, test non-normality residuals conducted using significance level equal tonormality.JarqueB. NULL, test non-normality conducted user.diagnostics NULL (default) list two entries, name pval. See getsFun details gof.function list. first item named name contain name (character) Goodness--Fit (GOF) function used. Additional items list gof.function passed arguments GOF-function. . See getsFun details gof.method character. Determines whether best Goodness--Fit minimum (default) maximum keep NULL (default), vector integers list vectors integers. latter case, number vectors equal number matrices x include.gum logical. TRUE, GUM (.e. starting model) included among terminal models include.1cut logical. TRUE, 1-cut model added list terminal models include.empty logical. TRUE, empty model added list terminal models max.paths NULL (default) integer greater 0. NULL, limit number paths. integer (e.g. 1), integer constitutes maximum number paths searched (e.g. single path) turbo logical. TRUE, (parts ) paths searched twice () unnecessarily GETS modelling. Setting turbo TRUE entails small additional computational costs, may outweighed substantially estimation slow, number variables delete path large parallel.options NULL integer indicates number cores/threads use parallel computing (implemented w/makeCluster parLapply) tol numeric value, tolerance detecting linear dependencies columns variance-covariance matrix computing Wald-statistic used Parsimonious Encompassing Tests (PETs), see qr.solve function LAPACK currently used max.regs integer. maximum number regressions along deletion path. alter unless know ! print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started alarm logical. TRUE, sound beep emitted (order alert user) model selection ends","code":""},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"blocksFun undertakes block-based GETS modelling repeated structured call getsFun. details user-specify estimator via user.estimator, diagnostics via user.diagnostics goodness--fit function via gof.function, see documentation getsFun \"Details\". algorithm blocksFun similar isat, flexible. main use blocksFun creation user-specified methods employs block-based GETS modelling, e.g. indicator saturation techniques.","code":""},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"list results block-based GETS-modelling.","code":""},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"F. Pretis, J. Reade G. Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44 G. sucarrat (2020): 'User-Specified General--Specific Indicator Saturation Methods'.  R Journal 12 issue 2, pp. 388-401, https://journal.r-project.org/archive/2021/RJ-2021-024/","code":""},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"Genaro Sucarrat, contributions Jonas kurle, Felix Pretis James Reade","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/blocksFun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block-based General-to-Specific (GETS) modelling — blocksFun","text":"","code":"## more variables than observations: y <- rnorm(20) x <- matrix(rnorm(length(y)*40), length(y), 40) blocksFun(y, x) #>  #> x block 1 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> x block 2 of 3: #> 13 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #>  #> x block 3 of 3: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> $call #> blocksFun(y, x) #>  #> $time.started #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $time.finished #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $y #>  [1]  0.42646422 -0.29507148  0.89512566  0.87813349  0.82158108  0.68864025 #>  [7]  0.55391765 -0.06191171 -0.30596266 -0.38047100 -0.69470698 -0.20791728 #> [13] -1.26539635  2.16895597  1.20796200 -1.12310858 -0.40288484 -0.46665535 #> [19]  0.77996512 -0.08336907 #>  #> $x #> $x$x #>  [1] \"X1.xreg1\"  \"X1.xreg2\"  \"X1.xreg3\"  \"X1.xreg4\"  \"X1.xreg5\"  \"X1.xreg6\"  #>  [7] \"X1.xreg7\"  \"X1.xreg8\"  \"X1.xreg9\"  \"X1.xreg10\" \"X1.xreg11\" \"X1.xreg12\" #> [13] \"X1.xreg13\" \"X1.xreg14\" \"X1.xreg15\" \"X1.xreg16\" \"X1.xreg17\" \"X1.xreg18\" #> [19] \"X1.xreg19\" \"X1.xreg20\" \"X1.xreg21\" \"X1.xreg22\" \"X1.xreg23\" \"X1.xreg24\" #> [25] \"X1.xreg25\" \"X1.xreg26\" \"X1.xreg27\" \"X1.xreg28\" \"X1.xreg29\" \"X1.xreg30\" #> [31] \"X1.xreg31\" \"X1.xreg32\" \"X1.xreg33\" \"X1.xreg34\" \"X1.xreg35\" \"X1.xreg36\" #> [37] \"X1.xreg37\" \"X1.xreg38\" \"X1.xreg39\" \"X1.xreg40\" #>  #>  #> $blocks #> $blocks$x #> $blocks$x[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> $blocks$x[[2]] #>  [1] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>  #> $blocks$x[[3]] #>  [1] 29 30 31 32 33 34 35 36 37 38 39 40 #>  #>  #>  #> $specific.spec #> $specific.spec$x #> integer(0) #>  #>   ## 'x' as list of matrices: z <- matrix(rnorm(length(y)*40), length(y), 40) blocksFun(y, list(x,z)) #>  #> X1 block 1 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> X1 block 2 of 3: #> 13 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #>  #> X1 block 3 of 3: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #>  #> X2 block 1 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> X2 block 2 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> X2 block 3 of 3: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> $call #> blocksFun(y, list(x, z)) #>  #> $time.started #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $time.finished #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $y #>  [1]  0.42646422 -0.29507148  0.89512566  0.87813349  0.82158108  0.68864025 #>  [7]  0.55391765 -0.06191171 -0.30596266 -0.38047100 -0.69470698 -0.20791728 #> [13] -1.26539635  2.16895597  1.20796200 -1.12310858 -0.40288484 -0.46665535 #> [19]  0.77996512 -0.08336907 #>  #> $x #> $x$X1 #>  [1] \"X1.xreg1\"  \"X1.xreg2\"  \"X1.xreg3\"  \"X1.xreg4\"  \"X1.xreg5\"  \"X1.xreg6\"  #>  [7] \"X1.xreg7\"  \"X1.xreg8\"  \"X1.xreg9\"  \"X1.xreg10\" \"X1.xreg11\" \"X1.xreg12\" #> [13] \"X1.xreg13\" \"X1.xreg14\" \"X1.xreg15\" \"X1.xreg16\" \"X1.xreg17\" \"X1.xreg18\" #> [19] \"X1.xreg19\" \"X1.xreg20\" \"X1.xreg21\" \"X1.xreg22\" \"X1.xreg23\" \"X1.xreg24\" #> [25] \"X1.xreg25\" \"X1.xreg26\" \"X1.xreg27\" \"X1.xreg28\" \"X1.xreg29\" \"X1.xreg30\" #> [31] \"X1.xreg31\" \"X1.xreg32\" \"X1.xreg33\" \"X1.xreg34\" \"X1.xreg35\" \"X1.xreg36\" #> [37] \"X1.xreg37\" \"X1.xreg38\" \"X1.xreg39\" \"X1.xreg40\" #>  #> $x$X2 #>  [1] \"X2.xreg1\"  \"X2.xreg2\"  \"X2.xreg3\"  \"X2.xreg4\"  \"X2.xreg5\"  \"X2.xreg6\"  #>  [7] \"X2.xreg7\"  \"X2.xreg8\"  \"X2.xreg9\"  \"X2.xreg10\" \"X2.xreg11\" \"X2.xreg12\" #> [13] \"X2.xreg13\" \"X2.xreg14\" \"X2.xreg15\" \"X2.xreg16\" \"X2.xreg17\" \"X2.xreg18\" #> [19] \"X2.xreg19\" \"X2.xreg20\" \"X2.xreg21\" \"X2.xreg22\" \"X2.xreg23\" \"X2.xreg24\" #> [25] \"X2.xreg25\" \"X2.xreg26\" \"X2.xreg27\" \"X2.xreg28\" \"X2.xreg29\" \"X2.xreg30\" #> [31] \"X2.xreg31\" \"X2.xreg32\" \"X2.xreg33\" \"X2.xreg34\" \"X2.xreg35\" \"X2.xreg36\" #> [37] \"X2.xreg37\" \"X2.xreg38\" \"X2.xreg39\" \"X2.xreg40\" #>  #>  #> $blocks #> $blocks$X1 #> $blocks$X1[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> $blocks$X1[[2]] #>  [1] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>  #> $blocks$X1[[3]] #>  [1] 29 30 31 32 33 34 35 36 37 38 39 40 #>  #>  #> $blocks$X2 #> $blocks$X2[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> $blocks$X2[[2]] #>  [1] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>  #> $blocks$X2[[3]] #>  [1] 29 30 31 32 33 34 35 36 37 38 39 40 #>  #>  #>  #> $specific.spec #> $specific.spec$X1 #> integer(0) #>  #> $specific.spec$X2 #> integer(0) #>  #>   ## ensure regressor no. 3 in matrix no. 2 is not removed: blocksFun(y, list(x,z), keep=list(integer(0), 3)) #>  #> X1 block 1 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> X1 block 2 of 3: #> 13 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #>  #> X1 block 3 of 3: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #>  #> X2 block 1 of 3: #> 13 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #>  #> X2 block 2 of 3: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> X2 block 3 of 3: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #>  #> GETS of union of retained X2 variables...  #>  #> $call #> blocksFun(y, list(x, z), keep = list(integer(0), 3)) #>  #> $time.started #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $time.finished #> [1] \"Sat Jul 27 15:29:47 2024\" #>  #> $y #>  [1]  0.42646422 -0.29507148  0.89512566  0.87813349  0.82158108  0.68864025 #>  [7]  0.55391765 -0.06191171 -0.30596266 -0.38047100 -0.69470698 -0.20791728 #> [13] -1.26539635  2.16895597  1.20796200 -1.12310858 -0.40288484 -0.46665535 #> [19]  0.77996512 -0.08336907 #>  #> $x #> $x$X1 #>  [1] \"X1.xreg1\"  \"X1.xreg2\"  \"X1.xreg3\"  \"X1.xreg4\"  \"X1.xreg5\"  \"X1.xreg6\"  #>  [7] \"X1.xreg7\"  \"X1.xreg8\"  \"X1.xreg9\"  \"X1.xreg10\" \"X1.xreg11\" \"X1.xreg12\" #> [13] \"X1.xreg13\" \"X1.xreg14\" \"X1.xreg15\" \"X1.xreg16\" \"X1.xreg17\" \"X1.xreg18\" #> [19] \"X1.xreg19\" \"X1.xreg20\" \"X1.xreg21\" \"X1.xreg22\" \"X1.xreg23\" \"X1.xreg24\" #> [25] \"X1.xreg25\" \"X1.xreg26\" \"X1.xreg27\" \"X1.xreg28\" \"X1.xreg29\" \"X1.xreg30\" #> [31] \"X1.xreg31\" \"X1.xreg32\" \"X1.xreg33\" \"X1.xreg34\" \"X1.xreg35\" \"X1.xreg36\" #> [37] \"X1.xreg37\" \"X1.xreg38\" \"X1.xreg39\" \"X1.xreg40\" #>  #> $x$X2 #>  [1] \"X2.xreg1\"  \"X2.xreg2\"  \"X2.xreg3\"  \"X2.xreg4\"  \"X2.xreg5\"  \"X2.xreg6\"  #>  [7] \"X2.xreg7\"  \"X2.xreg8\"  \"X2.xreg9\"  \"X2.xreg10\" \"X2.xreg11\" \"X2.xreg12\" #> [13] \"X2.xreg13\" \"X2.xreg14\" \"X2.xreg15\" \"X2.xreg16\" \"X2.xreg17\" \"X2.xreg18\" #> [19] \"X2.xreg19\" \"X2.xreg20\" \"X2.xreg21\" \"X2.xreg22\" \"X2.xreg23\" \"X2.xreg24\" #> [25] \"X2.xreg25\" \"X2.xreg26\" \"X2.xreg27\" \"X2.xreg28\" \"X2.xreg29\" \"X2.xreg30\" #> [31] \"X2.xreg31\" \"X2.xreg32\" \"X2.xreg33\" \"X2.xreg34\" \"X2.xreg35\" \"X2.xreg36\" #> [37] \"X2.xreg37\" \"X2.xreg38\" \"X2.xreg39\" \"X2.xreg40\" #>  #>  #> $blocks #> $blocks$X1 #> $blocks$X1[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> $blocks$X1[[2]] #>  [1] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>  #> $blocks$X1[[3]] #>  [1] 29 30 31 32 33 34 35 36 37 38 39 40 #>  #>  #> $blocks$X2 #> $blocks$X2[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> $blocks$X2[[2]] #>  [1]  3 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>  #> $blocks$X2[[3]] #>  [1]  3 29 30 31 32 33 34 35 36 37 38 39 40 #>  #>  #>  #> $keep #> $keep$X1 #> integer(0) #>  #> $keep$X2 #> X2.xreg3  #>        3  #>  #>  #> $specific.spec #> $specific.spec$X1 #> integer(0) #>  #> $specific.spec$X2 #> [1] \"X2.xreg3\" #>  #>"},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction functions for 'arx' objects — coef.arx","title":"Extraction functions for 'arx' objects — coef.arx","text":"Extraction functions objects class 'arx'","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction functions for 'arx' objects — coef.arx","text":"","code":"# S3 method for class 'arx' coef(object, spec=NULL, ...)   # S3 method for class 'arx' fitted(object, spec=NULL, ...)   # S3 method for class 'arx' logLik(object, ...)   # S3 method for class 'arx' model.matrix(object, spec=c(\"mean\",\"variance\"), response=FALSE, as.zoo=TRUE, ...)   # S3 method for class 'arx' plot(x, spec=NULL, col=c(\"red\",\"blue\"),     lty=c(\"solid\",\"solid\"), lwd=c(1,1), ...)   # S3 method for class 'arx' print(x, signif.stars=TRUE, ...)   # S3 method for class 'arx' residuals(object, std=FALSE, ...)   # S3 method for class 'arx' sigma(object, ...)   # S3 method for class 'arx' summary(object, ...)   # S3 method for class 'arx' vcov(object, spec=NULL, ...)"},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction functions for 'arx' objects — coef.arx","text":"object object class 'arx' x object class 'arx' spec NULL, \"mean\", \"variance\" , instances, \"\". NULL valid value, automatically determined whether information pertaining mean variance specification returned response logical. TRUE, response included first column .zoo logical. TRUE (default), returned matrix class zoo signif.stars logical. TRUE, p-values additionally encoded visually,   see printCoefmat std logical. FALSE (default), mean residuals returned. TRUE, standardised residuals returned col colours actual (default=blue) fitted (default=red) lines lty types actual (default=solid) fitted (default=solid) lines lwd widths actual (default=1) fitted (default=1) lines ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction functions for 'arx' objects — coef.arx","text":"coef: numeric vector containing parameter estimates fitted: zoo object fitted values logLik: log-likelihood (normal density) model.matrix: matrix regressors , optionally, response plot: plot fitted values residuals print: print estimation results residuals: zoo object residuals sigma: regression standard error ('SE regression') summary: print items arx object vcov: variance-covariance matrix","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extraction functions for 'arx' objects — coef.arx","text":"Felix Pretis, http://www.felixpretis.org/ James Reade, https://sites.google.com/site/jjamesreade/ Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/coef.arx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction functions for 'arx' objects — coef.arx","text":"","code":"##simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 40)  ##simulate four independent Gaussian regressors: xregs <- matrix(rnorm(4*40), 40, 4)  ##estimate an 'arx' model: An AR(2) with intercept and four conditioning ##regressors in the mean, and log-ARCH(3) in the variance: mymod <- arx(y, mc=TRUE, ar=1:2, mxreg=xregs, arch=1:3)  ##print results: print(mymod) #>  #> Date: Sat Jul 27 15:29:47 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 38  #> Sample: 3 to 40  #>  #> Mean equation: #>  #>             coef std.error  t-stat p-value   #> mconst  0.012935  0.158622  0.0815 0.93553   #> ar1     0.433919  0.184652  2.3499 0.02532 * #> ar2    -0.158899  0.179586 -0.8848 0.38307   #> mxreg1  0.212861  0.207773  1.0245 0.31353   #> mxreg2  0.177448  0.193842  0.9154 0.36704   #> mxreg3  0.213397  0.143935  1.4826 0.14828   #> mxreg4 -0.052338  0.181769 -0.2879 0.77531   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Log-variance equation: #>  #>             coef std.error  t-stat p-value #> vconst -0.618004  0.802233  0.5934  0.4411 #> arch1  -0.101829  0.179553 -0.5671  0.5747 #> arch2  -0.097682  0.153166 -0.6378  0.5283 #> arch3  -0.026241  0.154150 -0.1702  0.8659 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   5.2768  3  0.1526 #> Ljung-Box ARCH(4) 3.0297  4  0.5529 #>                            #> SE of regression   0.97003 #> R-squared          0.25544 #> Log-lik.(n=35)   -46.34537  ##plot the fitted vs. actual values, and the residuals: plot(mymod)   ##print the entries of object 'mymod': summary(mymod) #>                  Length Class      Mode      #> call              6     -none-     call      #> date              1     -none-     character #> version           1     -none-     character #> aux              20     -none-     list      #> n                 1     -none-     numeric   #> k                 1     -none-     numeric   #> df                1     -none-     numeric   #> coefficients      7     -none-     numeric   #> mean.fit         38     zoo        numeric   #> residuals        38     zoo        numeric   #> rss               1     -none-     numeric   #> sigma2            1     -none-     numeric   #> vcov.mean        49     -none-     numeric   #> logl              1     -none-     numeric   #> Elnz2             1     -none-     numeric   #> vcov.var          9     -none-     numeric   #> var.fit          38     zoo        numeric   #> std.residuals    38     zoo        numeric   #> ustar.residuals  38     zoo        numeric   #> variance.results  4     data.frame list      #> mean.results      4     data.frame list      #> diagnostics       6     -none-     numeric    ##extract coefficient estimates (automatically determined): coef(mymod) #>      mconst         ar1         ar2      mxreg1      mxreg2      mxreg3  #>  0.01293470  0.43391913 -0.15889898  0.21286069  0.17744754  0.21339735  #>      mxreg4      vconst       arch1       arch2       arch3       Elnz2  #> -0.05233799 -0.61800361 -0.10182905 -0.09768241 -0.02624072 -1.51108503   ##extract mean coefficients only: coef(mymod, spec=\"mean\") #>      mconst         ar1         ar2      mxreg1      mxreg2      mxreg3  #>  0.01293470  0.43391913 -0.15889898  0.21286069  0.17744754  0.21339735  #>      mxreg4  #> -0.05233799   ##extract log-variance coefficients only: coef(mymod, spec=\"variance\") #>      vconst       arch1       arch2       arch3       Elnz2  #> -0.61800361 -0.10182905 -0.09768241 -0.02624072 -1.51108503   ##extract all coefficient estimates: coef(mymod, spec=\"both\") #>      mconst         ar1         ar2      mxreg1      mxreg2      mxreg3  #>  0.01293470  0.43391913 -0.15889898  0.21286069  0.17744754  0.21339735  #>      mxreg4      vconst       arch1       arch2       arch3       Elnz2  #> -0.05233799 -0.61800361 -0.10182905 -0.09768241 -0.02624072 -1.51108503   ##extract regression standard error: sigma(mymod) #> [1] 0.9700325  ##extract log-likelihood: logLik(mymod) #> 'log Lik.' -46.34537 (df=7)  ##extract variance-covariance matrix of mean equation: vcov(mymod) #>               mconst           ar1           ar2       mxreg1       mxreg2 #> mconst  0.0251610272 -0.0015285628  0.0005370087 -0.002488587  0.002689960 #> ar1    -0.0015285628  0.0340965226 -0.0137456546  0.009800237 -0.009656845 #> ar2     0.0005370087 -0.0137456546  0.0322510692 -0.009227215 -0.001875021 #> mxreg1 -0.0024885867  0.0098002369 -0.0092272152  0.043169627  0.004287598 #> mxreg2  0.0026899595 -0.0096568451 -0.0018750214  0.004287598  0.037574668 #> mxreg3  0.0009279521  0.0003525202 -0.0060498526 -0.004381605  0.002430933 #> mxreg4  0.0008675077  0.0006219531  0.0033660813 -0.008426761 -0.001919049 #>               mxreg3        mxreg4 #> mconst  0.0009279521  0.0008675077 #> ar1     0.0003525202  0.0006219531 #> ar2    -0.0060498526  0.0033660813 #> mxreg1 -0.0043816051 -0.0084267606 #> mxreg2  0.0024309326 -0.0019190488 #> mxreg3  0.0207172909 -0.0035607424 #> mxreg4 -0.0035607424  0.0330397967  ##extract variance-covariance matrix of log-variance equation: vcov(mymod, spec=\"variance\") #>             arch1       arch2       arch3 #> arch1 0.032239225 0.002548225 0.003175857 #> arch2 0.002548225 0.023459962 0.002435217 #> arch3 0.003175857 0.002435217 0.023762073  ##extract and plot the fitted mean values (automatically determined): mfit <- fitted(mymod) plot(mfit)   ##extract and plot the fitted variance values: vfit <- fitted(mymod, spec=\"variance\") plot(vfit)   ##extract and plot both the fitted mean and variance values: vfit <- fitted(mymod, spec=\"both\") plot(vfit)   ##extract and plot the fitted mean values: vfit <- fitted(mymod, spec=\"mean\") plot(vfit)   ##extract and plot residuals: epshat <- residuals(mymod) plot(epshat)   ##extract and plot standardised residuals: zhat <- residuals(mymod, std=TRUE) plot(zhat)"},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction functions for 'gets' objects — coef.gets","title":"Extraction functions for 'gets' objects — coef.gets","text":"Extraction functions objects class 'gets'","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction functions for 'gets' objects — coef.gets","text":"","code":"# S3 method for class 'gets' coef(object, spec=NULL, ...)   # S3 method for class 'gets' fitted(object, spec=NULL, ...)   # S3 method for class 'gets' logLik(object, ...)   # S3 method for class 'gets' plot(x, spec=NULL, col=c(\"red\",\"blue\"),     lty=c(\"solid\",\"solid\"), lwd=c(1,1), ...)   # S3 method for class 'gets' predict(object, spec=NULL, n.ahead=12, newmxreg=NULL,     newvxreg=NULL, newindex=NULL, n.sim=5000, innov=NULL, probs=NULL,     ci.levels=NULL, quantile.type=7, return=TRUE, verbose=FALSE, plot=NULL,     plot.options=list(), ...)   # S3 method for class 'gets' print(x, signif.stars=TRUE, ...)   # S3 method for class 'gets' residuals(object, std=NULL, ...)   # S3 method for class 'gets' sigma(object, ...)   # S3 method for class 'gets' summary(object, ...)   # S3 method for class 'gets' vcov(object, spec=NULL, ...)"},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction functions for 'gets' objects — coef.gets","text":"object object class 'gets' x object class 'gets' spec NULL, \"mean\", \"variance\" , instances, \"\". NULL valid value, automatically determined whether information pertaining mean variance specification returned signif.stars logical. TRUE, p-values additionally encoded visually,   see printCoefmat std logical. FALSE (default), mean residuals returned. TRUE, standardised residuals returned n.ahead integer determines many steps ahead predictions generated (default 12) newmxreg matrix n.ahead rows NCOL(mxreg) columns --sample values mxreg regressors newvxreg matrix n.ahead rows NCOL(vxreg) columns --sample values vxreg regressors newindex NULL (default) date-index zoo object returned predict.arx. NULL, function uses -sample index generate --sample index n.sim integer, number replications used generation forecasts innov NULL (default) vector length n.ahead * n.sim containing standardised errors (, zero mean unit variance) used forecast simulations. NULL, classica bootstrap procedure used draw standardised -sample residuals probs NULL (default) vector quantile-levels (values strictly 0 1) forecast distribution. NULL, quantiles returned unless ci.levels non-NULL ci.levels NULL (default) vector confidence levels (expressed values strictly 0 1) forecast distribution. upper lower values confidence interval(s) returned quantiles quantile.type integer 1 9 selects algorithm used computing quantiles, see argument type quantile return logical. TRUE (default), --sample predictions returned. value FALSE, return predictions, may interest prediction plot interest verbose logical default FALSE. TRUE, additional information (typically quantiles /simulated series) used generation forecasts returned. FALSE, forecasts returned plot NULL (default) logical. NULL, value set options$plot (see options) determines whether plot produced . TRUE, --sample forecasts plotted. plot.options list options related plotting forecasts, see 'Details' col colours fitted (default=red) actual (default=blue) lines lty types fitted (default=solid) actual (default=solid) lines lwd widths fitted (default=1) actual (default=1) lines ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction functions for 'gets' objects — coef.gets","text":"plot.options argument list controls prediction plot, see 'Details' predict.arx","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction functions for 'gets' objects — coef.gets","text":"coef: numeric vector containing parameter estimates fitted: zoo object fitted values logLik: numeric, log-likelihood (normal density) plot: plot fitted values residuals predict: vector class zoo containing --sample forecasts, matrix class zoo containing --sample forecasts together prediction-quantiles, - return=FALSE - NULL print: print estimation results residuals: zoo object residuals sigma: regression standard error ('SE regression') summary: print items gets object vcov: variance-covariance matrix","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extraction functions for 'gets' objects — coef.gets","text":"Felix Pretis, http://www.felixpretis.org/ James Reade, https://sites.google.com/site/jjamesreade/ Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/coef.gets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction functions for 'gets' objects — coef.gets","text":"","code":"##Simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 100)  ##Simulate four independent Gaussian regressors: xregs <- matrix(rnorm(4*100), 100, 4)  ##estimate an AR(2) with intercept and four conditioning ##regressors in the mean, and a log-ARCH(3) in the variance: mymod <- arx(y, mc=TRUE, ar=1:2, mxreg=xregs, arch=1:3)  ##General-to-Specific (GETS) model selection of the mean: meanmod <- getsm(mymod) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat   p-value     #> mconst       1    0  0.043088  0.094883  0.4541 0.6508240     #> ar1          2    0  0.406777  0.107385  3.7880 0.0002723 *** #> ar2          3    0 -0.014965  0.110010 -0.1360 0.8920956     #> mxreg1       4    0 -0.071650  0.096881 -0.7396 0.4614659     #> mxreg2       5    0 -0.043913  0.101653 -0.4320 0.6667745     #> mxreg3       6    0 -0.033421  0.095433 -0.3502 0.7269975     #> mxreg4       7    0 -0.079345  0.094225 -0.8421 0.4019547     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value #> vconst -0.185723  0.339150  0.2999  0.5840 #> arch1   0.071754  0.105315  0.6813  0.4974 #> arch2  -0.091189  0.105499 -0.8644  0.3897 #> arch3   0.052295  0.105789  0.4943  0.6223 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.9699  3 0.39629 #> Ljung-Box ARCH(4) 4.3880  4 0.35603 #>  #> 6 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #>  #>   Path 1: 1 3 6 5 4 7  #>   Path 2: 3 6 5 1 4 7  #>   Path 3: 4 3 6 5 1 7  #>   Path 4: 5 3 6 1 4 7  #>   Path 5: 6 3 5 1 4 7  #>   Path 6: 7 3 6 1 5 4  #>  #> Terminal models: #>  #>                 info(sc)     logl  n k #> spec 1 (1-cut): 2.616031 -125.893 98 1 #>  #> Retained regressors (final model): #>  #>   ar1   ##General-to-Specific (GETS) model selection of the variance: varmod <- getsv(mymod) #> GUM log-variance equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value #> vconst       1    1 -0.185723  0.339150  0.2999  0.5840 #> arch1        2    0  0.071754  0.105315  0.6813  0.4974 #> arch2        3    0 -0.091189  0.105499 -0.8644  0.3897 #> arch3        4    0  0.052295  0.105789  0.4943  0.6223 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.9699  3 0.39629 #> Ljung-Box ARCH(4) 4.3880  4 0.35603 #>  #> 3 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #>  #>   Path 1: 2 4 3  #>   Path 2: 3 4 2  #>   Path 3: 4 2 3  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.675753 -124.8213 95 1 #>  #> Retained regressors (final model): #>  #>   vconst   ##print results: print(meanmod) #>  #> Date: Sat Jul 27 15:29:48 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 98  #> Sample: 3 to 100  #>  #> SPECIFIC mean equation: #>  #>         coef std.error t-stat   p-value     #> ar1 0.395234  0.095397  4.143 7.328e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> SPECIFIC log-variance equation: #>  #>            coef std.error t-stat p-value #> vconst 0.132172  0.314689 0.1764  0.6745 #> arch1  0.168115  0.105649 1.5913  0.1150 #> arch2  0.041319  0.107019 0.3861  0.7003 #> arch3  0.012057  0.108241 0.1114  0.9116 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.4359  3  0.4870 #> Ljung-Box ARCH(4) 6.6894  4  0.1532 #>                             #> SE of regression    0.90884 #> R-squared           0.14564 #> Log-lik.(n=95)   -125.89303 print(varmod) #>  #> Date: Sat Jul 27 15:29:48 2024  #> Method: Ordinary Least Squares (OLS)  #> No. of observations (variance eq.): 95  #> Sample: 6 to 100  #>  #> SPECIFIC log-variance equation: #>  #>            coef std.error t-stat p-value #> vconst -0.21006   0.21965 0.9146  0.3389 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9427  3  0.2677 #> Ljung-Box ARCH(4) 5.2478  4  0.2628 #>                            #> SE of regression    0.9003 #> Log-lik.(n=95)   -124.8213  ##plot the fitted vs. actual values, and the residuals: plot(meanmod)  plot(varmod)   ##generate and plot predictions of the mean: predict(meanmod, plot=TRUE)  #>           101           102           103           104           105  #> -8.149836e-01 -3.221089e-01 -1.273082e-01 -5.031648e-02 -1.988676e-02  #>           106           107           108           109           110  #> -7.859914e-03 -3.106501e-03 -1.227793e-03 -4.852651e-04 -1.917931e-04  #>           111           112  #> -7.580305e-05 -2.995991e-05   ##print the entries of object 'gets': summary(meanmod) #>                      Length Class      Mode      #> date                  1     -none-     character #> gets.type             1     -none-     character #> time.started          1     -none-     character #> time.finished         1     -none-     character #> call                  2     -none-     call      #> gum.mean              6     data.frame list      #> gum.variance          4     data.frame list      #> gum.diagnostics       6     -none-     numeric   #> no.of.estimations     1     -none-     numeric   #> paths                 6     -none-     list      #> terminals             1     -none-     list      #> terminals.results     4     -none-     numeric   #> best.terminal         1     -none-     numeric   #> specific.spec         1     -none-     numeric   #> version               1     -none-     character #> aux                  21     -none-     list      #> n                     1     -none-     numeric   #> k                     1     -none-     numeric   #> df                    1     -none-     numeric   #> coefficients          1     -none-     numeric   #> mean.fit             98     zoo        numeric   #> residuals            98     zoo        numeric   #> rss                   1     -none-     numeric   #> sigma2                1     -none-     numeric   #> vcov.mean             1     -none-     numeric   #> logl                  1     -none-     numeric   #> Elnz2                 1     -none-     numeric   #> vcov.var              9     -none-     numeric   #> var.fit              98     zoo        numeric   #> std.residuals        98     zoo        numeric   #> ustar.residuals      98     zoo        numeric   #> variance.results      4     data.frame list      #> mean.results          4     data.frame list      #> specific.diagnostics  6     -none-     numeric   summary(varmod) #>                      Length Class      Mode      #> date                  1     -none-     character #> gets.type             1     -none-     character #> time.started          1     -none-     character #> time.finished         1     -none-     character #> call                  2     -none-     call      #> gum.mean              4     data.frame list      #> gum.variance          6     data.frame list      #> gum.diagnostics       6     -none-     numeric   #> no.of.estimations     1     -none-     numeric   #> paths                 3     -none-     list      #> terminals             1     -none-     list      #> terminals.results     4     -none-     numeric   #> best.terminal         1     -none-     numeric   #> specific.spec         1     -none-     numeric   #> version               1     -none-     character #> aux                  18     -none-     list      #> n                     1     -none-     numeric   #> k                     1     -none-     numeric   #> df                    1     -none-     numeric   #> mean.fit             95     zoo        numeric   #> residuals            95     zoo        numeric   #> rss                   1     -none-     numeric   #> sigma2                1     -none-     numeric   #> logl                  1     -none-     numeric   #> Elnz2                 1     -none-     numeric   #> vcov.var              0     -none-     numeric   #> var.fit              95     zoo        numeric   #> std.residuals        95     zoo        numeric   #> ustar.residuals      95     zoo        numeric   #> variance.results      4     data.frame list      #> specific.diagnostics  6     -none-     numeric    ##extract coefficients of the simplified (specific) model: coef(meanmod) #mean spec #>       ar1  #> 0.3952335  coef(varmod) #variance spec #>    vconst     Elnz2  #> -0.210060 -1.178012   ##extract log-likelihood: logLik(mymod) #> 'log Lik.' -123.8917 (df=7)  ##extract coefficient-covariance matrix of simplified ##(specific) model: vcov(meanmod) #mean spec #>             ar1 #> ar1 0.009100632 vcov(varmod) #variance spec #> <0 x 0 matrix>  ##extract and plot the fitted values: mfit <- fitted(meanmod) #mean fit plot(mfit)  vfit <- fitted(varmod) #variance fit plot(vfit)   ##extract and plot residuals: epshat <- residuals(meanmod) plot(epshat)   ##extract and plot standardised residuals: zhat <- residuals(varmod) plot(zhat)"},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction functions for 'isat' objects — coef.isat","title":"Extraction functions for 'isat' objects — coef.isat","text":"Extraction functions objects class 'isat'","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction functions for 'isat' objects — coef.isat","text":"","code":"# S3 method for class 'isat' coef(object, ...)   # S3 method for class 'isat' fitted(object, ...)   # S3 method for class 'isat' logLik(object, ...)   # S3 method for class 'isat' plot(x, col=c(\"red\",\"blue\"), lty=c(\"solid\",\"solid\"),     lwd=c(1,1), coef.path=TRUE, ...)   # S3 method for class 'isat' predict(object, n.ahead=12, newmxreg=NULL, newindex=NULL,     n.sim=2000, probs=NULL, ci.levels=NULL, quantile.type=7,     return=TRUE, verbose=FALSE, plot=NULL, plot.options=list(), ...)   # S3 method for class 'isat' print(x, signif.stars=TRUE, ...)   # S3 method for class 'isat' residuals(object, std=FALSE, ...)   # S3 method for class 'isat' sigma(object, ...)   # S3 method for class 'isat' summary(object, ...)   # S3 method for class 'isat' vcov(object, ...)"},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction functions for 'isat' objects — coef.isat","text":"object object class 'isat' x object class 'isat' std logical. FALSE (default), mean residuals returned. TRUE, standardised residuals returned n.ahead integer determines many steps ahead predictions generated (default 12) newmxreg matrix n.ahead rows NCOL(mxreg) columns --sample values mxreg regressors newindex NULL (default) date-index zoo object returned predict.arx. NULL, function uses -sample index generate --sample index n.sim integer, number replications used generation forecasts probs NULL (default) vector quantile-levels (values strictly 0 1) forecast distribution. NULL, quantiles returned unless ci.levels non-NULL ci.levels NULL (default) vector confidence levels (expressed values strictly 0 1) forecast distribution. upper lower values confidence interval(s) returned quantiles quantile.type integer 1 9 selects algorithm used computing quantiles, see argument type quantile return logical. TRUE (default), --sample predictions returned. value FALSE, return predictions, may interest prediction plot interest verbose logical default FALSE. TRUE, additional information (typically quantiles /simulated series) used generation forecasts returned. FALSE, forecasts returned plot NULL (default) logical. NULL, value set options$plot (see options) determines whether plot produced . TRUE, --sample forecasts plotted. plot.options list options related plotting forecasts, see 'Details' col colours fitted (default=red) actual (default=blue) lines lty types fitted (default=solid) actual (default=solid) lines lwd widths fitted (default=1) actual (default=1) lines coef.path logical. applicable retained indicators application isat signif.stars logical. TRUE, p-values additionally encoded visually,   see printCoefmat ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction functions for 'isat' objects — coef.isat","text":"plot.options argument list controls prediction plot, see 'Details' predict.arx","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction functions for 'isat' objects — coef.isat","text":"coef: numeric vector containing parameter estimates fitted: zoo object fitted values logLik: numeric, log-likelihood (normal density) plot: plot fitted values residuals predict: vector class zoo containing --sample forecasts, matrix class zoo containing --sample forecasts together prediction-quantiles, - return=FALSE - NULL print: print estimation results residuals: zoo object residuals sigma: regression standard error ('SE regression') summary: print items isat object vcov: variance-covariance matrix","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extraction functions for 'isat' objects — coef.isat","text":"Felix Pretis, http://www.felixpretis.org/ James Reade, https://sites.google.com/site/jjamesreade/ Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/coef.isat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction functions for 'isat' objects — coef.isat","text":"","code":"##step indicator saturation: set.seed(123) y <- rnorm(30) isatmod <- isat(y) #>  #> SIS block 1 of 2: #> 15 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #>  #> SIS block 2 of 2: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> GETS of union of retained SIS variables...  #>  #> GETS of union of ALL retained variables...  ##print results: print(isatmod) #>  #> Date: Sat Jul 27 15:29:50 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS) #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 30  #> Sample: 1 to 30  #>  #> SPECIFIC mean equation: #>  #>             coef std.error t-stat p-value #> mconst -0.047104  0.179111 -0.263  0.7944 #>  #> Diagnostics and fit: #>  #>                     Chi-sq df p-value   #> Ljung-Box AR(1)   0.046575  1 0.82913   #> Ljung-Box ARCH(1) 3.367118  1 0.06651 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                            #> SE of regression   0.98103 #> R-squared          0.00000 #> Log-lik.(n=30)   -41.49361  ##plot the fitted vs. actual values, and the residuals: plot(isatmod)   ##print the entries of object 'isatmod': summary(isatmod) #>                     Length Class      Mode      #> ISfinalmodels        1     -none-     list      #> ISnames              0     -none-     NULL      #> time.started         1     -none-     character #> time.finished        1     -none-     character #> call                 2     -none-     call      #> no.of.estimations    1     -none-     numeric   #> terminals            1     -none-     list      #> terminals.results    4     -none-     numeric   #> best.terminal        1     -none-     numeric   #> specific.spec        1     -none-     numeric   #> no.of.getsFun.calls  1     -none-     numeric   #> gets.type            1     -none-     character #> date                 1     -none-     character #> version              1     -none-     character #> aux                 15     -none-     list      #> n                    1     -none-     numeric   #> k                    1     -none-     numeric   #> df                   1     -none-     numeric   #> coefficients         1     -none-     numeric   #> mean.fit            30     zoo        numeric   #> residuals           30     zoo        numeric   #> rss                  1     -none-     numeric   #> sigma2               1     -none-     numeric   #> vcov.mean            1     -none-     numeric   #> logl                 1     -none-     numeric   #> var.fit             30     zoo        numeric   #> std.residuals       30     zoo        numeric   #> mean.results         4     data.frame list      #> diagnostics          6     -none-     numeric    ##extract coefficients of the simplified (specific) model: coef(isatmod) #>      mconst  #> -0.04710376   ##extract log-likelihood: logLik(isatmod) #> 'log Lik.' -41.49361 (df=1)  ##extract the coefficient-covariance matrix of simplified ##(specific) model: vcov(isatmod) #>            mconst #> mconst 0.03208071  ##extract and plot the fitted values: mfit <- fitted(isatmod) plot(mfit)   ##extract and plot (mean) residuals: epshat <- residuals(isatmod) plot(epshat)   ##extract and plot standardised residuals: zhat <- residuals(isatmod, std=TRUE) plot(zhat)   ##generate forecasts of the simplified (specific) model: predict(isatmod, newmxreg=matrix(1,12,1), plot=TRUE)  #>          31          32          33          34          35          36  #> -0.04710376 -0.04710376 -0.04710376 -0.04710376 -0.04710376 -0.04710376  #>          37          38          39          40          41          42  #> -0.04710376 -0.04710376 -0.04710376 -0.04710376 -0.04710376 -0.04710376"},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction functions for 'logitx' objects — coef.logitx","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"Extraction functions (type S3 methods) objects class 'logitx'","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"","code":"# S3 method for class 'logitx' coef(object, ...)   # S3 method for class 'logitx' fitted(object, zero.prob=FALSE, ...)   # S3 method for class 'logitx' logLik(object, ...)   # S3 method for class 'logitx' plot(x, ...)   # S3 method for class 'logitx' print(x, signif.stars=TRUE, ...)   # S3 method for class 'logitx' summary(object, ...)   # S3 method for class 'logitx' toLatex(object, digits = 4, gof = TRUE, nonumber = FALSE, nobs = \"T\", ...)   # S3 method for class 'logitx' vcov(object, ...)"},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"object object class 'logitx' x object class 'logitx' zero.prob logical. FALSE (default), probabilities one returned fitted values. TRUE, zero probabilities returned fitted values signif.stars logical. TRUE, p-values additionally encoded visually, see printCoefmat digits integer, number digits LaTeX print gof logical determines whether goodness--fit information included LaTeX print nonumber logical determines whether \"nonumber\" tag added equation LaTeX print nobs character determines label number observations LaTeX print ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"Various, depending method","code":""},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/coef.logitx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction functions for 'logitx' objects — coef.logitx","text":"","code":"##simulate from ar(1): set.seed(123) #for reproducibility y <- logitxSim(100, ar=0.3)  ##estimate and store result: mymod <- logitx(y, ar=1)  ##extract stuff: coef(mymod) #>  intercept        ar1  #> -0.2876818  0.6931466  fitted(mymod) #>         2         3         4         5         6         7         8         9  #> 0.4285715 0.5999999 0.4285715 0.5999999 0.5999999 0.4285715 0.5999999 0.5999999  #>        10        11        12        13        14        15        16        17  #> 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999 0.4285715 0.5999999  #>        18        19        20        21        22        23        24        25  #> 0.4285715 0.4285715 0.4285715 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999  #>        26        27        28        29        30        31        32        33  #> 0.5999999 0.5999999 0.5999999 0.5999999 0.4285715 0.4285715 0.5999999 0.5999999  #>        34        35        36        37        38        39        40        41  #> 0.5999999 0.5999999 0.4285715 0.4285715 0.5999999 0.4285715 0.4285715 0.4285715  #>        42        43        44        45        46        47        48        49  #> 0.4285715 0.4285715 0.4285715 0.4285715 0.4285715 0.4285715 0.4285715 0.4285715  #>        50        51        52        53        54        55        56        57  #> 0.4285715 0.5999999 0.4285715 0.4285715 0.5999999 0.4285715 0.5999999 0.4285715  #>        58        59        60        61        62        63        64        65  #> 0.4285715 0.5999999 0.5999999 0.4285715 0.5999999 0.4285715 0.4285715 0.4285715  #>        66        67        68        69        70        71        72        73  #> 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999 0.5999999  #>        74        75        76        77        78        79        80        81  #> 0.5999999 0.4285715 0.4285715 0.4285715 0.4285715 0.5999999 0.4285715 0.4285715  #>        82        83        84        85        86        87        88        89  #> 0.4285715 0.5999999 0.4285715 0.5999999 0.4285715 0.4285715 0.5999999 0.5999999  #>        90        91        92        93        94        95        96        97  #> 0.5999999 0.4285715 0.4285715 0.5999999 0.4285715 0.5999999 0.4285715 0.4285715  #>        98        99       100  #> 0.5999999 0.4285715 0.4285715  logLik(mymod) #> 'log Lik.' -67.11308 (df=2) plot(mymod)  print(mymod) #>  #> Date: Sat Jul 27 15:29:51 2024  #> Dependent var.: y  #> Method: Maximum Likelihood (logit)  #> Variance-Covariance: Ordinary  #> No. of observations: 99  #> Sample: 2 to 100  #>  #> Estimation results: #>  #>               coef std.error  t-stat p-value   #> intercept -0.28768   0.28868 -0.9966 0.16073   #> ar1        0.69315   0.40825  1.6979 0.04637 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                         #> Log-lik.(n=99) -67.1131 summary(mymod) #>                Length Class  Mode      #> call             3    -none- call      #> date             1    -none- character #> version          1    -none- character #> control          0    -none- list      #> y               99    -none- numeric   #> y.name           1    -none- character #> y.index         99    -none- numeric   #> mX             198    -none- numeric   #> mXnames          2    -none- character #> logit.method     1    -none- numeric   #> n                1    -none- numeric   #> k                1    -none- numeric   #> df               1    -none- numeric   #> initial.values   2    -none- numeric   #> lower            1    -none- numeric   #> upper            1    -none- numeric   #> eps.tol          1    -none- numeric   #> coefficients     2    -none- numeric   #> logl             1    -none- numeric   #> convergence      1    -none- numeric   #> iterations       1    -none- numeric   #> evaluations      2    -none- numeric   #> message          1    -none- character #> fit             99    zoo    numeric   #> vcov             4    -none- numeric   toLatex(mymod) #> \\begin{eqnarray} #>   Pr(y_t = 1| ...) &=& \\frac{1}{1 + \\exp(-\\widehat{h}_t)} \\\\[2mm]  #>   \\widehat{h}_t &=&  - \\underset{(0.2887)}{0.2877} + \\underset{(0.4082)}{0.6931}ar1 \\\\[2mm]  #>    && LogL=-67.1131 \\qquad T = 99 \\nonumber  #> \\end{eqnarray}"},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostics tests — diagnostics","title":"Diagnostics tests — diagnostics","text":"Auxiliary function (.e. intended average user) called arx, getsm, getsv, isat, getsFun blocksFun functions. diagnostics function undertakes tests autocorrelation, ARCH non-normality residual series, user-defined diagnostics provided via user.fun argument (see details). autocorrelation ARCH tests conducted Ljung Box (1979) tests autocorrelation residuals squared residuals, respectively, whereas test non-normality Jarque Bera (1980).","code":""},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostics tests — diagnostics","text":"","code":"diagnostics(x, ar.LjungB=c(1, 0.025), arch.LjungB=c(1, 0.025),   normality.JarqueB=NULL, verbose=TRUE, user.fun=NULL, ...)"},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostics tests — diagnostics","text":"x list, example estimation result ols. tests serial correlation, ARCH normality look entry list named std.residuals residuals ar.LjungB two element vector NULL. former case, first element contains AR-order, second element significance level. NULL, test autocorrelation conducted arch.LjungB two element vector NULL. former case, first element contains ARCH-order, second element significance level. NULL, test ARCH conducted normality.JarqueB NULL (default) value 0 1. latter case, test non-normality conducted using significance level equal normality.JarqueB. NULL, test non-normality conducted verbose logical. TRUE, data.frame results diagnostics returned. FALSE, return-value logical indicates whether model passes diagnostics (TRUE , otherwise FALSE) user.fun NULL list least one entry, name (must class character), contain name user-defined function. See details ... arguments (ignored) accommodate deleted arguments past versions functions","code":""},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diagnostics tests — diagnostics","text":"argument user.fun enables user specify additional diagnostics. , argument list least one entry, name (class character), contains name user-defined function. call function executed .call, whose default value envir parent.frame(). Usually, global environment (.GlobalEnv), can changed adding entry named envir list indicates user-defined function resides. verbose argument set FALSE, entry named pval must provided. entry contain chosen significance level levels, .e. either scalar vector length equal number p-values returned user-defined diagnostics function (see examples). user can also specify whether rejection tests cause diagnostics fail (default behaviour) whether rejection desirable. purpose, named entry .reject.bad can added stores logical vector length equal number tests conducted user diagnostics function. first entry vector governs diagnostic decision first row user diagnostics function returns, second entry decision second row etc. Additional entries list passed arguments user-defined function. user-defined function refer named items estimation result x (see examples), value returned user-defined function matrix dimension m x 3. , m number diagnostic tests performed user-defined function. example, single test performed, m = 1 returned value 1 x 3 matrix (vector length 3). three columns m x 3 matrix contain, following order, 1) value(s) test-statistic(s) (NA), 2) degree(s) freedom(s) (NA) tests, 3) p-value(s) test(s). checking whether model passes diagnostics , p-value(s) () checked value(s) entry named pval list provided user.fun. default, calculated p-value corresponding element pval causes diagnostics fail. named entry .reject.bad exists, decision rule applied tests whose corresponding entry TRUE decision rule reversed entry FALSE. tests, diagnostics fail hypothesis rejected.","code":""},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostics tests — diagnostics","text":"verbose=TRUE data.frame contains diagnostics results verbose=FALSE logical (length one) indicating whether residuals /model passes diagnostics (TRUE , FALSE otherwise)","code":""},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostics tests — diagnostics","text":"C. Jarque . Bera (1980): 'Efficient Tests Normality,   Homoscedasticity Serial Independence'. Economics Letters 6,   pp. 255-259 G. Ljung G. Box (1979): 'Measure Lack Fit Time   Series Models'. Biometrika 66, pp. 265-270","code":""},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagnostics tests — diagnostics","text":"Genaro Sucarrat, http://www.sucarrat.net/ Jonas Kurle, https://www.jonaskurle.com/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostics tests — diagnostics","text":"","code":"##generate some data: set.seed(123) vY <- rnorm(20) #the regressand mX <- matrix(rnorm(3*20), 20, 3) #the regressors est <- ols(vY,mX)  ##return a data-frame with autocorrelation and ARCH diagnostics (default), ##and check whether they pass (the default p-value is 0.025): diagnostics(est) #>                        Chi-sq df    p-value #> Ljung-Box AR(1)   0.003510917  1 0.95275060 #> Ljung-Box ARCH(1) 3.412392622  1 0.06470856 diagnostics(est, verbose=FALSE) #> [1] TRUE  ##add the Jarque-Bera normality test to the diagnostics (w/p-value=0.05): diagnostics(est, normality.JarqueB=0.05) #>                        Chi-sq df    p-value #> Ljung-Box AR(1)   0.003510917  1 0.95275060 #> Ljung-Box ARCH(1) 3.412392622  1 0.06470856 #> Jarque-Bera       0.353445573  2 0.83801206 diagnostics(est, normality.JarqueB=0.05, verbose=FALSE) #> [1] TRUE  ##user-defined Shapiro-Wilks test for non-normality of the residuals: SWtest <- function(x, ...){   tmp <- shapiro.test(x$residuals)   return( c(tmp$statistic, NA, tmp$p.value) ) } diagnostics(est, user.fun=list(name=\"SWtest\", pval=0.05)) #> Error in SWtest(x = list(n = 20L, k = 3L, df = 17L, qr = structure(c(3.62487403917307, 0.0601331004340281, 0.283045545091906, 0.201080429668508, 0.172430617200659, 0.465310874947587, -0.231121698420629, -0.0423112958351247, 0.313979720319216, -0.345891997217083, -0.11764939053554, 0.0814018583276303, -0.246939797458238, -0.242252138431096, -0.226650932627968, -0.189976326531111, -0.152810179761157, 0.0170796860546485, 0.0844064263843262, 0.104961164691719, 0.377135609304277, 4.18306927046561, 0.246481761888288, -0.558307619735788, -0.322902857194065, 0.176391268783772, 0.142058567357394, 0.11993269430476, -0.248602857415755, 0.0883916806405081, -0.0372719911907566, -0.00928731556492584, 0.0591247587530225, -0.279228199896485, 0.0988330348762853, -0.324924264454731, 0.400488511923555, -0.143137669256186, -0.0463148198853255, -0.0723974652165301, 1.00869972564444, -0.779701632797945, 4.08092759871367, 0.185233890940201, 0.218726987192663, -0.117012636548216, -0.0720265999983978, 0.000732010244829912, -0.281377313521943, -0.454773113442127, 0.131633750893663, 0.555479233370269, -0.212765088722502, 0.18241513524346, 0.202733446261662, -0.252210034688066, 0.116969103898599, 0.286731683955082, -0.0578301919878286, 0.0162954407447317), dim = c(20L, 3L)), rank = 3L, qraux = c(1.29458229291478, 1.03780248045971, 1.06579109048657), pivot = 1:3, coefficients = c(-0.142573185558897, -0.0782492112997779, 0.117145620304408), xtxinv = structure(c(0.0820440800165264, -0.00927737771326456, -0.0178734769745561, -0.00927737771326456, 0.059235331340333, 0.0111922037450993, -0.0178734769745561, 0.0111922037450993, 0.0600457426091443), dim = c(3L, 3L)), fit = c(0.251076403262785, -0.0114982515325492, 0.206263203434632, -0.185120394226588, -0.130963882193103, 0.363916650190558, -0.0354147346027191, 0.0208577323998841, 0.209275747972232, 0.0679216184743613, -0.138146487047055, -0.226205977935575, -0.0064484741874254, -0.31537010122381, -0.180066226592616, -0.0967030692174864, 0.00885497047022835, -0.17992034864234, 0.0551694833330762, 0.0210771903782191), residuals = c(-0.811552049814997, -0.218679237950731, 1.35244511071449, 0.255628785651164, 0.26025161735405, 1.35114833669272, 0.496330940591921, -1.28591896700642, -0.896128599865758, -0.513583588574319, 1.36222828448652, 0.586019804992939, 0.407219924781478, 0.426052817168929, -0.375774908161459, 1.88361620602056, 0.488995507759011, -1.7866968079873, 0.646186418230609, -0.493868598106153), residuals2 = c(0.658616729558924, 0.0478206091107123, 1.82910777749553, 0.0653460760534889, 0.0677309043353987, 1.82560182774751, 0.246344402588861, 1.65358758970685, 0.803046467497365, 0.263768102452876, 1.85566589905508, 0.343419211843963, 0.165828067139032, 0.181521003017581, 0.141206781603753, 3.54801001158331, 0.239116606608493, 3.192285483672, 0.417556887105704, 0.243906192195337), rss = 17.7894866303718,     sigma2 = 1.04644039002187, vcov = structure(c(0.0858542390914793,     -0.00970822275264876, -0.0187035282163014, -0.00970822275264876,     0.0619862432308527, 0.0117119740522259, -0.0187035282163014,     0.0117119740522259, 0.0628342903150657), dim = c(3L, 3L)),     logl = -27.3327136641223)): could not find function \"SWtest\" diagnostics(est, user.fun=list(name=\"SWtest\", pval=0.05), verbose=FALSE) #> Error in SWtest(x = list(n = 20L, k = 3L, df = 17L, qr = structure(c(3.62487403917307, 0.0601331004340281, 0.283045545091906, 0.201080429668508, 0.172430617200659, 0.465310874947587, -0.231121698420629, -0.0423112958351247, 0.313979720319216, -0.345891997217083, -0.11764939053554, 0.0814018583276303, -0.246939797458238, -0.242252138431096, -0.226650932627968, -0.189976326531111, -0.152810179761157, 0.0170796860546485, 0.0844064263843262, 0.104961164691719, 0.377135609304277, 4.18306927046561, 0.246481761888288, -0.558307619735788, -0.322902857194065, 0.176391268783772, 0.142058567357394, 0.11993269430476, -0.248602857415755, 0.0883916806405081, -0.0372719911907566, -0.00928731556492584, 0.0591247587530225, -0.279228199896485, 0.0988330348762853, -0.324924264454731, 0.400488511923555, -0.143137669256186, -0.0463148198853255, -0.0723974652165301, 1.00869972564444, -0.779701632797945, 4.08092759871367, 0.185233890940201, 0.218726987192663, -0.117012636548216, -0.0720265999983978, 0.000732010244829912, -0.281377313521943, -0.454773113442127, 0.131633750893663, 0.555479233370269, -0.212765088722502, 0.18241513524346, 0.202733446261662, -0.252210034688066, 0.116969103898599, 0.286731683955082, -0.0578301919878286, 0.0162954407447317), dim = c(20L, 3L)), rank = 3L, qraux = c(1.29458229291478, 1.03780248045971, 1.06579109048657), pivot = 1:3, coefficients = c(-0.142573185558897, -0.0782492112997779, 0.117145620304408), xtxinv = structure(c(0.0820440800165264, -0.00927737771326456, -0.0178734769745561, -0.00927737771326456, 0.059235331340333, 0.0111922037450993, -0.0178734769745561, 0.0111922037450993, 0.0600457426091443), dim = c(3L, 3L)), fit = c(0.251076403262785, -0.0114982515325492, 0.206263203434632, -0.185120394226588, -0.130963882193103, 0.363916650190558, -0.0354147346027191, 0.0208577323998841, 0.209275747972232, 0.0679216184743613, -0.138146487047055, -0.226205977935575, -0.0064484741874254, -0.31537010122381, -0.180066226592616, -0.0967030692174864, 0.00885497047022835, -0.17992034864234, 0.0551694833330762, 0.0210771903782191), residuals = c(-0.811552049814997, -0.218679237950731, 1.35244511071449, 0.255628785651164, 0.26025161735405, 1.35114833669272, 0.496330940591921, -1.28591896700642, -0.896128599865758, -0.513583588574319, 1.36222828448652, 0.586019804992939, 0.407219924781478, 0.426052817168929, -0.375774908161459, 1.88361620602056, 0.488995507759011, -1.7866968079873, 0.646186418230609, -0.493868598106153), residuals2 = c(0.658616729558924, 0.0478206091107123, 1.82910777749553, 0.0653460760534889, 0.0677309043353987, 1.82560182774751, 0.246344402588861, 1.65358758970685, 0.803046467497365, 0.263768102452876, 1.85566589905508, 0.343419211843963, 0.165828067139032, 0.181521003017581, 0.141206781603753, 3.54801001158331, 0.239116606608493, 3.192285483672, 0.417556887105704, 0.243906192195337), rss = 17.7894866303718,     sigma2 = 1.04644039002187, vcov = structure(c(0.0858542390914793,     -0.00970822275264876, -0.0187035282163014, -0.00970822275264876,     0.0619862432308527, 0.0117119740522259, -0.0187035282163014,     0.0117119740522259, 0.0628342903150657), dim = c(3L, 3L)),     logl = -27.3327136641223)): could not find function \"SWtest\"  ##user-defined test but diagnostics fail if do not reject (illustration only) diagnostics(est, user.fun=list(name=\"SWtest\", pval=0.05, is.reject.bad = FALSE)) #> Error in SWtest(x = list(n = 20L, k = 3L, df = 17L, qr = structure(c(3.62487403917307, 0.0601331004340281, 0.283045545091906, 0.201080429668508, 0.172430617200659, 0.465310874947587, -0.231121698420629, -0.0423112958351247, 0.313979720319216, -0.345891997217083, -0.11764939053554, 0.0814018583276303, -0.246939797458238, -0.242252138431096, -0.226650932627968, -0.189976326531111, -0.152810179761157, 0.0170796860546485, 0.0844064263843262, 0.104961164691719, 0.377135609304277, 4.18306927046561, 0.246481761888288, -0.558307619735788, -0.322902857194065, 0.176391268783772, 0.142058567357394, 0.11993269430476, -0.248602857415755, 0.0883916806405081, -0.0372719911907566, -0.00928731556492584, 0.0591247587530225, -0.279228199896485, 0.0988330348762853, -0.324924264454731, 0.400488511923555, -0.143137669256186, -0.0463148198853255, -0.0723974652165301, 1.00869972564444, -0.779701632797945, 4.08092759871367, 0.185233890940201, 0.218726987192663, -0.117012636548216, -0.0720265999983978, 0.000732010244829912, -0.281377313521943, -0.454773113442127, 0.131633750893663, 0.555479233370269, -0.212765088722502, 0.18241513524346, 0.202733446261662, -0.252210034688066, 0.116969103898599, 0.286731683955082, -0.0578301919878286, 0.0162954407447317), dim = c(20L, 3L)), rank = 3L, qraux = c(1.29458229291478, 1.03780248045971, 1.06579109048657), pivot = 1:3, coefficients = c(-0.142573185558897, -0.0782492112997779, 0.117145620304408), xtxinv = structure(c(0.0820440800165264, -0.00927737771326456, -0.0178734769745561, -0.00927737771326456, 0.059235331340333, 0.0111922037450993, -0.0178734769745561, 0.0111922037450993, 0.0600457426091443), dim = c(3L, 3L)), fit = c(0.251076403262785, -0.0114982515325492, 0.206263203434632, -0.185120394226588, -0.130963882193103, 0.363916650190558, -0.0354147346027191, 0.0208577323998841, 0.209275747972232, 0.0679216184743613, -0.138146487047055, -0.226205977935575, -0.0064484741874254, -0.31537010122381, -0.180066226592616, -0.0967030692174864, 0.00885497047022835, -0.17992034864234, 0.0551694833330762, 0.0210771903782191), residuals = c(-0.811552049814997, -0.218679237950731, 1.35244511071449, 0.255628785651164, 0.26025161735405, 1.35114833669272, 0.496330940591921, -1.28591896700642, -0.896128599865758, -0.513583588574319, 1.36222828448652, 0.586019804992939, 0.407219924781478, 0.426052817168929, -0.375774908161459, 1.88361620602056, 0.488995507759011, -1.7866968079873, 0.646186418230609, -0.493868598106153), residuals2 = c(0.658616729558924, 0.0478206091107123, 1.82910777749553, 0.0653460760534889, 0.0677309043353987, 1.82560182774751, 0.246344402588861, 1.65358758970685, 0.803046467497365, 0.263768102452876, 1.85566589905508, 0.343419211843963, 0.165828067139032, 0.181521003017581, 0.141206781603753, 3.54801001158331, 0.239116606608493, 3.192285483672, 0.417556887105704, 0.243906192195337), rss = 17.7894866303718,     sigma2 = 1.04644039002187, vcov = structure(c(0.0858542390914793,     -0.00970822275264876, -0.0187035282163014, -0.00970822275264876,     0.0619862432308527, 0.0117119740522259, -0.0187035282163014,     0.0117119740522259, 0.0628342903150657), dim = c(3L, 3L)),     logl = -27.3327136641223)): could not find function \"SWtest\" diagnostics(est, user.fun=list(name=\"SWtest\", pval=0.05, is.reject.bad = FALSE),   verbose=FALSE) #> Error in SWtest(x = list(n = 20L, k = 3L, df = 17L, qr = structure(c(3.62487403917307, 0.0601331004340281, 0.283045545091906, 0.201080429668508, 0.172430617200659, 0.465310874947587, -0.231121698420629, -0.0423112958351247, 0.313979720319216, -0.345891997217083, -0.11764939053554, 0.0814018583276303, -0.246939797458238, -0.242252138431096, -0.226650932627968, -0.189976326531111, -0.152810179761157, 0.0170796860546485, 0.0844064263843262, 0.104961164691719, 0.377135609304277, 4.18306927046561, 0.246481761888288, -0.558307619735788, -0.322902857194065, 0.176391268783772, 0.142058567357394, 0.11993269430476, -0.248602857415755, 0.0883916806405081, -0.0372719911907566, -0.00928731556492584, 0.0591247587530225, -0.279228199896485, 0.0988330348762853, -0.324924264454731, 0.400488511923555, -0.143137669256186, -0.0463148198853255, -0.0723974652165301, 1.00869972564444, -0.779701632797945, 4.08092759871367, 0.185233890940201, 0.218726987192663, -0.117012636548216, -0.0720265999983978, 0.000732010244829912, -0.281377313521943, -0.454773113442127, 0.131633750893663, 0.555479233370269, -0.212765088722502, 0.18241513524346, 0.202733446261662, -0.252210034688066, 0.116969103898599, 0.286731683955082, -0.0578301919878286, 0.0162954407447317), dim = c(20L, 3L)), rank = 3L, qraux = c(1.29458229291478, 1.03780248045971, 1.06579109048657), pivot = 1:3, coefficients = c(-0.142573185558897, -0.0782492112997779, 0.117145620304408), xtxinv = structure(c(0.0820440800165264, -0.00927737771326456, -0.0178734769745561, -0.00927737771326456, 0.059235331340333, 0.0111922037450993, -0.0178734769745561, 0.0111922037450993, 0.0600457426091443), dim = c(3L, 3L)), fit = c(0.251076403262785, -0.0114982515325492, 0.206263203434632, -0.185120394226588, -0.130963882193103, 0.363916650190558, -0.0354147346027191, 0.0208577323998841, 0.209275747972232, 0.0679216184743613, -0.138146487047055, -0.226205977935575, -0.0064484741874254, -0.31537010122381, -0.180066226592616, -0.0967030692174864, 0.00885497047022835, -0.17992034864234, 0.0551694833330762, 0.0210771903782191), residuals = c(-0.811552049814997, -0.218679237950731, 1.35244511071449, 0.255628785651164, 0.26025161735405, 1.35114833669272, 0.496330940591921, -1.28591896700642, -0.896128599865758, -0.513583588574319, 1.36222828448652, 0.586019804992939, 0.407219924781478, 0.426052817168929, -0.375774908161459, 1.88361620602056, 0.488995507759011, -1.7866968079873, 0.646186418230609, -0.493868598106153), residuals2 = c(0.658616729558924, 0.0478206091107123, 1.82910777749553, 0.0653460760534889, 0.0677309043353987, 1.82560182774751, 0.246344402588861, 1.65358758970685, 0.803046467497365, 0.263768102452876, 1.85566589905508, 0.343419211843963, 0.165828067139032, 0.181521003017581, 0.141206781603753, 3.54801001158331, 0.239116606608493, 3.192285483672, 0.417556887105704, 0.243906192195337), rss = 17.7894866303718,     sigma2 = 1.04644039002187, vcov = structure(c(0.0858542390914793,     -0.00970822275264876, -0.0187035282163014, -0.00970822275264876,     0.0619862432308527, 0.0117119740522259, -0.0187035282163014,     0.0117119740522259, 0.0628342903150657), dim = c(3L, 3L)),     logl = -27.3327136641223)): could not find function \"SWtest\""},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"Implements Jiao-Pretis-Schwarz test coefficient distortion due outliers comparing coefficient estimates obtained using OLS estimates obtained using robust IIS estimator implemented using isat. See referenced Jiao-Pretis-Schwarz Paper information.","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"","code":"distorttest(x, coef = \"all\")"},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"x object class isat coef Either \"\" (Default) test distortion coefficients character vector explanatory variable names.","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"Object class isat","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"Xiyu Jiao, Felix Pretis,Moritz Schwarz. Testing Coefficient Distortion due Outliers Application Economic Impacts Climate Change. Available SSRN: https://www.ssrn.com/abstract=3915040 doi:10.2139/ssrn.3915040","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"Xiyu Jiao https://sites.google.com/view/xiyujiao   Felix Pretis http://www.felixpretis.org    Moritz Schwarz https://moritzschwarz.org","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/distorttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jiao-Pretis-Schwarz Outlier Distortion Test — distorttest","text":"","code":"if (FALSE) { # \\dontrun{   data(Nile) nile <- isat(Nile, sis=FALSE, iis=TRUE, plot=TRUE, t.pval=0.01) distorttest(nile)  data(\"hpdata\") # Another example with co-variates dat <- hpdata[,c(\"GD\", \"GNPQ\", \"FSDJ\")] Y <- ts(dat$GD,start = 1959, frequency = 4) mxreg <- ts(dat[,c(\"GNPQ\",\"FSDJ\")],start = 1959, frequency = 4) m1 <- isat(y = Y, mc = TRUE, sis = FALSE, iis = TRUE) m2 <- isat(y = Y, mc = TRUE, sis = FALSE, iis = TRUE, ar = 1) m3 <- isat(y = Y, mxreg = mxreg, mc = TRUE, sis = FALSE, iis = TRUE) m4 <- isat(y = Y, mxreg = mxreg, mc = TRUE, sis = FALSE, iis = TRUE, ar = 1, t.pval = 0.01) distorttest(m1, coef = \"all\") distorttest(m2, coef = \"all\") distorttest(m3, coef = \"GNPQ\") distorttest(m4, coef = c(\"ar1\", \"FSDJ\"))  } # }"},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"Implements Jiao-Pretis-Schwarz bootstrap test coefficient distortion due outliers comparing coefficient estimates obtained using OLS estimates obtained using robust IIS estimator implemented using isat. Three bootstrap schemes available - using original sample (recommended), clean (outlier-removed) data, using clean (outlier-removed) sample scaled cut-offs used detect outliers IIS implemented using isat. See referenced Jiao-Pretis-Schwarz Paper information.","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"","code":"distorttestboot(x, nboot, clean.sample = TRUE, parametric = FALSE, scale.t.pval = 1,  parallel.options = NULL, quantiles = c(0.90, 0.95, 0.99), ...)  ##S3 printing method for objects of class 'distorttestboot': # S3 method for class 'distorttestboot' print(x, print.proportion = FALSE, ...)"},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"x object class isat output distorttest function. nboot numeric. Number bootstrap replications. high number replications recommended final estimation (200 least). clean.sample logical. Whether outlier-removed sample used resampling. parametric logical. Whether use parametric bootstrap. Default non-parametric (FALSE). Parametric currently implemented autoregressive models. scale.t.pval numeric. Scaled target p-value (selection) relative initial p-value used isat. Default 1. E.g. value 0.5 scale initial target p-value 0.05 0.025. parallel.options NULL (Default) integer, .e. number cores/threads used parallel computing (implemented w/makeCluster parLapply). print.proportion logical. bootstraped Jiao-Pretis Outlier Proportion Test printed. Default FALSE. quantiles numeric vector. Quantiles shown based bootstrapped results. Default c(0.90, 0.95, 0.99). ... arguments passed isat.","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"list including object class h-test.","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"Xiyu Jiao, Felix Pretis,Moritz Schwarz. Testing Coefficient Distortion due Outliers Application Economic Impacts Climate Change. Available SSRN: https://www.ssrn.com/abstract=3915040 doi:10.2139/ssrn.3915040","code":""},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"Xiyu Jiao https://sites.google.com/view/xiyujiao   Felix Pretis http://www.felixpretis.org    Moritz Schwarz https://moritzschwarz.org","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/distorttestboot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped Jiao-Pretis-Schwarz Outlier Distortion Test — distorttestboot","text":"","code":"if (FALSE) { # \\dontrun{   data(Nile)   nile <- isat(Nile, sis=FALSE, iis=TRUE, plot=TRUE, t.pval=0.01)      distorttest(nile)   # bootstrap (with nboot = 5 to save time. Higher replications are recommended)   distorttestboot(nile, nboot = 5)      data(\"hpdata\")   # Another example with co-variates   dat <- hpdata[,c(\"GD\", \"GNPQ\", \"FSDJ\")]   Y <- ts(dat$GD,start = 1959, frequency = 4)   mxreg <- ts(dat[,c(\"GNPQ\",\"FSDJ\")],start = 1959, frequency = 4)   m1 <- isat(y = Y, mc = TRUE, sis = FALSE, iis = TRUE)   m2 <- isat(y = Y, mc = TRUE, sis = FALSE, iis = TRUE, ar = 1)   m3 <- isat(y = Y, mxreg = mxreg, mc = TRUE, sis = FALSE, iis = TRUE)   m4 <- isat(y = Y, mxreg = mxreg, mc = TRUE, sis = FALSE, iis = TRUE, ar = 1, t.pval = 0.01)   distorttest(m1, coef = \"all\")   distorttest(m2, coef = \"all\")   distorttest(m3, coef = \"GNPQ\")   distorttest(m4, coef = c(\"ar1\", \"FSDJ\"))      # bootstrap (with nboot = 5 to save time. Higher replications are recommended)   distorttestboot(m1, nboot = 5)   distorttestboot(m2, nboot = 5)   distorttestboot(m3, nboot = 5)   distorttestboot(m4, nboot = 5)   distorttestboot(m4, nboot = 5, parametric = TRUE, scale.t.pval = 0.5)    } # }"},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop variable — dropvar","title":"Drop variable — dropvar","text":"Drops columns matrix avoid perfect multicollinearity.","code":""},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop variable — dropvar","text":"","code":"dropvar(x, tol=1e-07, LAPACK=FALSE, silent=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop variable — dropvar","text":"x matrix, possibly less full column rank. tol numeric value. tolerance detecting linear dependencies among regressors, see qr function. used LAPACK FALSE LAPACK logical, TRUE FALSE (default). true use LAPACK otherwise use LINPACK, see qr function silent logical, TRUE (default) FALSE. Whether print notification whenever regressor removed","code":""},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop variable — dropvar","text":"matrix whose regressors linearly independent","code":""},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop variable — dropvar","text":"Original function drop.coef developed Rune Haubo B. Christensen package ordinal, https://cran.r-project.org/package=ordinal.","code":""},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Drop variable — dropvar","text":"Rune H.B. Christensen (2014): 'ordinal: Regression Models Ordinal Data'. https://cran.r-project.org/package=ordinal","code":""},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop variable — dropvar","text":"Rune Haubo B. Christensen, modifications Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/dropvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop variable — dropvar","text":"","code":"set.seed(1) x <- matrix(rnorm(20), 5) dropvar(x) #full rank, none are dropped #>            [,1]       [,2]       [,3]        [,4] #> [1,] -0.6264538 -0.8204684  1.5117812 -0.04493361 #> [2,]  0.1836433  0.4874291  0.3898432 -0.01619026 #> [3,] -0.8356286  0.7383247 -0.6212406  0.94383621 #> [4,]  1.5952808  0.5757814 -2.2146999  0.82122120 #> [5,]  0.3295078 -0.3053884  1.1249309  0.59390132  x[,4] <- x[,1]*2 dropvar(x) #less than full rank, last column dropped #> regressor-matrix is column rank deficient, so dropping 1 regressors #>  #>            [,1]       [,2]       [,3] #> [1,] -0.6264538 -0.8204684  1.5117812 #> [2,]  0.1836433  0.4874291  0.3898432 #> [3,] -0.8356286  0.7383247 -0.6212406 #> [4,]  1.5952808  0.5757814 -2.2146999 #> [5,]  0.3295078 -0.3053884  1.1249309"},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":null,"dir":"Reference","previous_headings":"","what":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"function eqwma returns Equally Weighted Moving Average (EqWMA) pth. exponentiated values lagged k times (default k 1). Optionally, absolute values computed averaging abs=TRUE, natural log values returned log=TRUE. function leqwma wrapper eqwma abs=TRUE log=TRUE. x financial return (possibly mean-corrected) p=2, gives socalled 'historical' model, also known integrated ARCH model ARCH coefficients value sum equal one. log-variance specification lag log(EqWMA) thus financial volatility proxy. may imperfect proxy compared high-frequency data (can also included regressors), - contrast high-frequency data - always available easy compute.","code":""},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"","code":"eqwma(x, length=5, k=1, p=1, abs=FALSE, log=FALSE,  as.vector=FALSE,   lag=NULL, start=NULL) leqwma(x, length=5, k=1, p=2, as.vector=FALSE, lag=NULL, start=NULL)"},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"x numeric vector, time-series zoo object length integer vector integers equal greater 1. length lengths moving window windows averages k integer determines many periods term(s) lagged. 0 (smaller), moving averages lagged p numeric value. exponent p x^p abs=FALSE, abs(x)^p abs=TRUE log logical default FALSE. TRUE, logarithm moving average returned abs logical default FALSE. TRUE, x transformed absolute values x exponentiated .vector logical default FALSE. TRUE, length(length)==1, result returned vector. Otherwise returned value always matrix lag deprecated start deprecated","code":""},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"intended primary use eqwma construct mixed frequency regressors mean specification arx model. intended primary use leqwma construct volatility proxies log-variance specification arx model. latter case, default lagged log equally weighted moving average squared residuals, average made m observations. equivalent integrated ARCH(p) model p coefficients equal. details use log(EqWMA) volatility proxy, see Sucarrat Escribano (2012).","code":""},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"numeric matrix, vector zoo object","code":""},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"Genaro Sucarrat Alvaro Escribano (2012): 'Automated Financial   Model Selection: General--Specific Modelling Mean   Volatility Specifications', Oxford Bulletin Economics   Statistics 74, Issue . 5 (October), pp. 716-735 Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/eqwma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equally Weighted Moving Average (EqWMA) of the pth. exponentiated values — eqwma","text":"","code":"##generate an iid normal series: set.seed(123) x <- rnorm(100)  ##compute lag of EqWMA(20) for x^2: eqwma(x, p=2) #>          EqWMA(5) #>   [1,]         NA #>   [2,]         NA #>   [3,]         NA #>   [4,]         NA #>   [5,]         NA #>   [6,] 0.56367460 #>   [7,] 1.08913759 #>   [8,] 1.12103000 #>   [9,] 0.95519167 #>  [10,] 1.04855075 #>  [11,] 1.08493060 #>  [12,] 0.79631627 #>  [13,] 0.77972072 #>  [14,] 0.49176828 #>  [15,] 0.39986505 #>  [16,] 0.42193400 #>  [17,] 0.76087047 #>  [18,] 0.78454829 #>  [19,] 1.52594135 #>  [20,] 1.62187123 #>  [21,] 1.60478570 #>  [22,] 1.19422348 #>  [23,] 1.15415508 #>  [24,] 0.59117549 #>  [25,] 0.59905196 #>  [26,] 0.63248043 #>  [27,] 0.97341781 #>  [28,] 1.10429262 #>  [29,] 0.89846026 #>  [30,] 1.05127491 #>  [31,] 1.28755046 #>  [32,] 0.75493794 #>  [33,] 0.63197395 #>  [34,] 0.78751928 #>  [35,] 0.68267183 #>  [36,] 0.50326055 #>  [37,] 0.56173128 #>  [38,] 0.60568280 #>  [39,] 0.44619942 #>  [40,] 0.31069837 #>  [41,] 0.20465091 #>  [42,] 0.20632939 #>  [43,] 0.15361036 #>  [44,] 0.47308933 #>  [45,] 1.39524069 #>  [46,] 1.65812350 #>  [47,] 1.81387452 #>  [48,] 1.83769184 #>  [49,] 1.56099969 #>  [50,] 0.74179481 #>  [51,] 0.45135046 #>  [52,] 0.21190993 #>  [53,] 0.17960968 #>  [54,] 0.13642381 #>  [55,] 0.38936914 #>  [56,] 0.39817356 #>  [57,] 0.84527613 #>  [58,] 1.32484019 #>  [59,] 1.39282727 #>  [60,] 1.02128080 #>  [61,] 1.02041244 #>  [62,] 0.58930105 #>  [63,] 0.16003977 #>  [64,] 0.11389056 #>  [65,] 0.31832174 #>  [66,] 0.53874288 #>  [67,] 0.52834358 #>  [68,] 0.51805621 #>  [69,] 0.49641267 #>  [70,] 0.45902896 #>  [71,] 1.06985112 #>  [72,] 1.09964751 #>  [73,] 2.12592129 #>  [74,] 2.32766140 #>  [75,] 2.25813908 #>  [76,] 1.51224081 #>  [77,] 1.67437782 #>  [78,] 0.62414477 #>  [79,] 0.71987312 #>  [80,] 0.62585417 #>  [81,] 0.53504116 #>  [82,] 0.32468848 #>  [83,] 0.33815754 #>  [84,] 0.06760497 #>  [85,] 0.14407500 #>  [86,] 0.14993971 #>  [87,] 0.17194892 #>  [88,] 0.38287188 #>  [89,] 0.39327070 #>  [90,] 0.33147275 #>  [91,] 0.58570167 #>  [92,] 0.76109580 #>  [93,] 0.58063248 #>  [94,] 0.55415446 #>  [95,] 0.61176139 #>  [96,] 0.71808462 #>  [97,] 0.59273695 #>  [98,] 1.48947423 #>  [99,] 1.94785473 #> [100,] 1.88011245  ##compute lag of EqWMA(5) and lag of EqWMA(10) for x: eqwma(x, length=c(5,10)) #>             EqWMA(5)    EqWMA(10) #>   [1,]            NA           NA #>   [2,]            NA           NA #>   [3,]            NA           NA #>   [4,]            NA           NA #>   [5,]            NA           NA #>   [6,]  0.1935702609           NA #>   [7,]  0.6486783876           NA #>   [8,]  0.7868971267           NA #>   [9,]  0.2221432170           NA #>  [10,]  0.0706709683           NA #>  [11,] -0.0443189727  0.074625644 #>  [12,] -0.1425156106  0.253081388 #>  [13,] -0.1627360864  0.312080520 #>  [14,]  0.1704304506  0.196286834 #>  [15,]  0.3299375642  0.200304266 #>  [16,]  0.3079017313  0.131791379 #>  [17,]  0.4204679991  0.138976194 #>  [18,]  0.4480753294  0.142669621 #>  [19,] -0.0254023921  0.072514029 #>  [20,]  0.0927322450  0.211334905 #>  [21,]  0.1093421904  0.208621961 #>  [22,] -0.4616051781 -0.020568589 #>  [23,] -0.6047702567 -0.078347464 #>  [24,] -0.4166477150 -0.221025054 #>  [25,] -0.7026971412 -0.304982448 #>  [26,] -0.7331467132 -0.311902261 #>  [27,] -0.8569206342 -0.659262906 #>  [28,] -0.6457682423 -0.625269250 #>  [29,] -0.4098927291 -0.413270222 #>  [30,] -0.4917418707 -0.597219506 #>  [31,] -0.1159710329 -0.424558873 #>  [32,]  0.3066604736 -0.275130080 #>  [33,]  0.0800887681 -0.282839737 #>  [34,]  0.2284392767 -0.090726726 #>  [35,]  0.6316933616  0.069975745 #>  [36,]  0.5452465937  0.214637780 #>  [37,]  0.5976818003  0.452171137 #>  [38,]  0.7674796276  0.423784198 #>  [39,]  0.5760721532  0.402255715 #>  [40,]  0.3392529230  0.485473142 #>  [41,]  0.0988425065  0.322044550 #>  [42,] -0.1778269401  0.209927430 #>  [43,] -0.3301939265  0.218642851 #>  [44,] -0.5708908547  0.002590649 #>  [45,] -0.0759071288  0.131672897 #>  [46,]  0.2417794710  0.170310989 #>  [47,]  0.1560991502 -0.010863895 #>  [48,]  0.1171056387 -0.106544144 #>  [49,]  0.2768538383 -0.147018508 #>  [50,] -0.0009443311 -0.038425730 #>  [51,] -0.2592105441 -0.008715537 #>  [52,]  0.0160748754  0.086087013 #>  [53,]  0.0909424914  0.104024065 #>  [54,]  0.1756994706  0.226276654 #>  [55,]  0.2934269038  0.146241286 #>  [56,]  0.2649465199  0.002867988 #>  [57,]  0.5175769380  0.266825907 #>  [58,]  0.2135357283  0.152239110 #>  [59,]  0.3390325696  0.257366020 #>  [60,]  0.0900829616  0.191754933 #>  [61,]  0.1784254725  0.221685996 #>  [62,] -0.0489407518  0.234318093 #>  [63,]  0.1603451184  0.186940423 #>  [64,] -0.0232191083  0.157906731 #>  [65,] -0.2517050337 -0.080811036 #>  [66,] -0.5092515927 -0.165413060 #>  [67,] -0.5244737610 -0.286707256 #>  [68,] -0.3343671146 -0.087010998 #>  [69,] -0.2571247926 -0.140171950 #>  [70,]  0.1310437776 -0.060330628 #>  [71,]  0.7554189601  0.123083684 #>  [72,]  0.5965069986  0.036016619 #>  [73,]  0.0450312677 -0.144667923 #>  [74,]  0.2355781273 -0.010773333 #>  [75,] -0.0907155188  0.020164129 #>  [76,] -0.6383341793  0.058542390 #>  [77,] -0.3350136721  0.130746663 #>  [78,]  0.0698655016  0.057448385 #>  [79,] -0.3754257457 -0.069923809 #>  [80,] -0.1973248973 -0.144020208 #>  [81,] -0.0875014465 -0.362917813 #>  [82,] -0.2914628832 -0.313238278 #>  [83,] -0.1574522016 -0.043793350 #>  [84,]  0.0125593345 -0.181433206 #>  [85,]  0.1051739483 -0.046075475 #>  [86,]  0.0888549084  0.000676731 #>  [87,]  0.1540584640 -0.068702210 #>  [88,]  0.2963701864  0.069458992 #>  [89,]  0.4575384909  0.235048913 #>  [90,]  0.2634768641  0.184325406 #>  [91,]  0.5373357002  0.313095304 #>  [92,]  0.6696800786  0.411869271 #>  [93,]  0.5599916678  0.428180927 #>  [94,]  0.5207017167  0.489120104 #>  [95,]  0.4603068186  0.361891841 #>  [96,]  0.5026757846  0.520005742 #>  [97,]  0.1839230960  0.426801587 #>  [98,]  0.5117103027  0.535850985 #>  [99,]  0.7704860809  0.645593899 #> [100,]  0.8489272243  0.654617021  ##compute lag of log(EqWMA(20)) for x^2: leqwma(x) #>        logEqWMA(5) #>   [1,]          NA #>   [2,]          NA #>   [3,]          NA #>   [4,]          NA #>   [5,]          NA #>   [6,] -0.57327815 #>   [7,]  0.08538618 #>   [8,]  0.11424791 #>   [9,] -0.04584326 #>  [10,]  0.04740897 #>  [11,]  0.08151602 #>  [12,] -0.22775885 #>  [13,] -0.24881948 #>  [14,] -0.70974764 #>  [15,] -0.91662816 #>  [16,] -0.86290636 #>  [17,] -0.27329215 #>  [18,] -0.24264716 #>  [19,]  0.42261150 #>  [20,]  0.48358056 #>  [21,]  0.47299023 #>  [22,]  0.17749617 #>  [23,]  0.14336854 #>  [24,] -0.52564236 #>  [25,] -0.51240694 #>  [26,] -0.45810599 #>  [27,] -0.02694189 #>  [28,]  0.09920497 #>  [29,] -0.10707281 #>  [30,]  0.05000363 #>  [31,]  0.25274155 #>  [32,] -0.28111973 #>  [33,] -0.45890710 #>  [34,] -0.23886742 #>  [35,] -0.38174102 #>  [36,] -0.68664725 #>  [37,] -0.57673168 #>  [38,] -0.50139886 #>  [39,] -0.80698929 #>  [40,] -1.16893271 #>  [41,] -1.58644962 #>  [42,] -1.57828141 #>  [43,] -1.87333604 #>  [44,] -0.74847105 #>  [45,]  0.33306694 #>  [46,]  0.50568654 #>  [47,]  0.59546517 #>  [48,]  0.60851035 #>  [49,]  0.44532645 #>  [50,] -0.29868260 #>  [51,] -0.79551117 #>  [52,] -1.55159394 #>  [53,] -1.71696923 #>  [54,] -1.99198899 #>  [55,] -0.94322745 #>  [56,] -0.92086728 #>  [57,] -0.16809193 #>  [58,]  0.28129184 #>  [59,]  0.33133569 #>  [60,]  0.02105752 #>  [61,]  0.02020690 #>  [62,] -0.52881810 #>  [63,] -1.83233292 #>  [64,] -2.17251732 #>  [65,] -1.14469263 #>  [66,] -0.61851686 #>  [67,] -0.63800849 #>  [68,] -0.65767153 #>  [69,] -0.70034771 #>  [70,] -0.77864197 #>  [71,]  0.06751950 #>  [72,]  0.09498968 #>  [73,]  0.75420526 #>  [74,]  0.84486407 #>  [75,]  0.81454106 #>  [76,]  0.41359253 #>  [77,]  0.51544164 #>  [78,] -0.47137293 #>  [79,] -0.32868030 #>  [80,] -0.46863789 #>  [81,] -0.62541160 #>  [82,] -1.12488909 #>  [83,] -1.08424339 #>  [84,] -2.69407382 #>  [85,] -1.93742125 #>  [86,] -1.89752202 #>  [87,] -1.76055785 #>  [88,] -0.96005486 #>  [89,] -0.93325711 #>  [90,] -1.10420968 #>  [91,] -0.53494471 #>  [92,] -0.27299604 #>  [93,] -0.54363728 #>  [94,] -0.59031181 #>  [95,] -0.49141295 #>  [96,] -0.33116786 #>  [97,] -0.52300457 #>  [98,]  0.39842319 #>  [99,]  0.66672863 #> [100,]  0.63133159  #compute lag of log(EqWMA(5)) and lag of log(EqWMA(8)) #for abs(x)^2: leqwma(x, length=c(4,8)) #>         logEqWMA(4) logEqWMA(8) #>   [1,]           NA          NA #>   [2,]           NA          NA #>   [3,]           NA          NA #>   [4,]           NA          NA #>   [5,] -0.356083095          NA #>   [6,] -0.468309051          NA #>   [7,]  0.298752989          NA #>   [8,] -0.230804569          NA #>   [9,]  0.176258820 -0.05489919 #>  [10,]  0.267359159 -0.03429666 #>  [11,] -0.476744253 -0.01563263 #>  [12,] -0.059448138 -0.14146046 #>  [13,] -0.554157855 -0.12369273 #>  [14,] -0.699630862 -0.10354092 #>  [15,] -0.798112965 -0.62457405 #>  [16,] -1.878471984 -0.60229433 #>  [17,] -0.084772156 -0.29217381 #>  [18,] -0.061310753 -0.33038113 #>  [19,]  0.644148103  0.16319891 #>  [20,]  0.667880243  0.05018093 #>  [21,]  0.188732205  0.06130160 #>  [22,]  0.358244618  0.17031076 #>  [23,] -0.742761703  0.17402142 #>  [24,] -0.484517498  0.24923754 #>  [25,] -0.366823379 -0.05095151 #>  [26,] -0.682130734 -0.03234022 #>  [27,]  0.186391589 -0.17394152 #>  [28,]  0.110820625 -0.14318421 #>  [29,] -0.009793082 -0.17245832 #>  [30,]  0.195916323 -0.14968180 #>  [31,] -0.107357511  0.05026455 #>  [32,] -0.263704320 -0.05900976 #>  [33,] -0.243235788 -0.11971791 #>  [34,] -0.414667047 -0.06348026 #>  [35,] -0.775818562 -0.38674298 #>  [36,] -0.538526172 -0.39170393 #>  [37,] -0.385078370 -0.31164427 #>  [38,] -0.585565306 -0.49646983 #>  [39,] -1.007941011 -0.88515975 #>  [40,] -1.515837855 -0.91225906 #>  [41,] -1.985898083 -0.89446246 #>  [42,] -1.708123283 -0.99696330 #>  [43,] -1.655195615 -1.28009036 #>  [44,] -0.565707151 -0.93193437 #>  [45,]  0.535241899 -0.08060362 #>  [46,]  0.668854448  0.06447858 #>  [47,]  0.813830782  0.20195686 #>  [48,]  0.640172374  0.20894977 #>  [49,] -0.254689532  0.21632775 #>  [50,] -0.575452200  0.22890707 #>  [51,] -1.390925672  0.22529348 #>  [52,] -1.494733527  0.05879527 #>  [53,] -1.771543436 -0.74947691 #>  [54,] -3.993050538 -1.23633444 #>  [55,] -0.723660372 -1.00264051 #>  [56,] -0.730486941 -1.04131165 #>  [57,]  0.054858789 -0.48901380 #>  [58,]  0.504157908 -0.17791081 #>  [59,]  0.241192508 -0.12911837 #>  [60,]  0.234168839 -0.13608766 #>  [61,] -0.355825619 -0.12954722 #>  [62,] -1.988011593 -0.10950338 #>  [63,] -2.166251579 -0.36573556 #>  [64,] -1.976681165 -0.35497204 #>  [65,] -0.951284716 -0.60987345 #>  [66,] -0.450362483 -0.94885968 #>  [67,] -0.515256659 -1.03288963 #>  [68,] -0.478336699 -0.96976839 #>  [69,] -1.018484376 -0.98432018 #>  [70,] -1.249660461 -0.77219130 #>  [71,]  0.273290120 -0.04519155 #>  [72,]  0.280911495 -0.02832239 #>  [73,]  0.977084469  0.41139454 #>  [74,]  0.992114988  0.39996150 #>  [75,]  0.572087436  0.43380749 #>  [76,]  0.604328597  0.45563828 #>  [77,] -0.274559158  0.53550057 #>  [78,] -0.639979053  0.47754881 #>  [79,] -0.256054251  0.24140068 #>  [80,] -0.409505139  0.22074141 #>  [81,] -0.901766003 -0.53977451 #>  [82,] -0.952989260 -0.78428690 #>  [83,] -2.992557440 -0.88641770 #>  [84,] -2.573233456 -0.99389123 #>  [85,] -1.741421634 -1.23593943 #>  [86,] -1.674422791 -1.25001149 #>  [87,] -1.726950310 -2.17162310 #>  [88,] -0.811384384 -1.34605281 #>  [89,] -0.947309151 -1.26752667 #>  [90,] -0.910837241 -1.22145187 #>  [91,] -0.350114690 -0.81821940 #>  [92,] -0.429851356 -0.60253124 #>  [93,] -0.387952056 -0.62902003 #>  [94,] -0.406262580 -0.62705744 #>  [95,] -0.832956513 -0.56267234 #>  [96,] -0.429486375 -0.42966885 #>  [97,] -0.406861505 -0.39736209 #>  [98,]  0.613884566  0.22862045 #>  [99,]  0.848547894  0.32606610 #> [100,]  0.635145539  0.23828439"},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":null,"dir":"Reference","previous_headings":"","what":"Exporting results to EViews and STATA — eviews","title":"Exporting results to EViews and STATA — eviews","text":"Functions facilitate export results commercial econometric softwares EViews STATA, respectively.","code":""},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exporting results to EViews and STATA — eviews","text":"","code":"eviews(object, file=NULL, print=TRUE, return=FALSE) stata(object, file=NULL, print=TRUE, return=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exporting results to EViews and STATA — eviews","text":"object arx, gets isat object file filename, .e. destination exported data print logical. TRUE, estimation code EViews (STATA) printed return logical. TRUE, list returned","code":""},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exporting results to EViews and STATA — eviews","text":"Either printed text list (return=TRUE)","code":""},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Exporting results to EViews and STATA — eviews","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/eviews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exporting results to EViews and STATA — eviews","text":"","code":"##simulate random variates, estimate model: y <- rnorm(30) mX <- matrix(rnorm(30*2), 30, 2) mymod <- arx(y, mc=TRUE, mxreg=mX)  ##print EViews code: eviews(mymod) #> EViews code to estimate the model: #>   equation mymod.ls y c mxreg1 mxreg2 #> R code (example) to export the data of the model: #>   eviews(mymod, file='C:/Users/myname/Documents/getsdata.csv')  ##print Stata code: stata(mymod) #> STATA code to estimate the model: #>  regress y mxreg1 mxreg2 #> R code (example) to export the data of the model: #>   stata(mymod, file='C:/Users/myname/Documents/getsdata.csv')"},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"gets package provides functions methods General--Specific (GETS) Indicator Saturation (ISAT) modelling. GETS modelling powerful flexible variable selection algorithm returns parsimonious interpretable model. ideally suited development models can used counterfactual predictive scenario analysis (e.g. conditional forecasting). ISAT modelling provides comprehensive, flexible powerful approach identification structural breaks outliers. code package originated relation research project G. Sucarrat . Escribano (2012). 2014, Felix Pretis James Reade joined development isat code related functions. Moritz Schwarz Jonas Kurle joined development team 2020.","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"gets-modelling","dir":"Reference","previous_headings":"","what":"GETS modelling","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"GETS methods available following model classes:  Linear regression, static dynamic, see arx, gets.arx gets.lm Variance models, static dynamic, see arx Logit models, static dynamic, see logitx gets.logitx function arx estimates static linear regression, dynamic AR-X model (optionally) log-variance specification. log-variance specification can either static dynamic log-variance model covariates ('log-ARCH-X' model). statistical details model, see Section 4 Pretis, Reade Sucarrat (2018). function logitx estimates static logit model, dynamic logit model covariates (optionally). complete user-specified GETS modelling, see getsFun.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"isat-modelling","dir":"Reference","previous_headings":"","what":"ISAT modelling","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"ISAT methods available :  Linear regression, static dynamic, see isat isat function undertakes GETS model selection indicator saturated mean specification. Extraction functions (mainly S3 methods) also available, together additional auxiliary functions. complete user-specified ISAT modelling, see blocksFun.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"vignettes","dir":"Reference","previous_headings":"","what":"Vignettes","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"Two vignettes available package (type browseVignettes(\"gets\") access ):  introduction gets package User-Specified General--Specific (GETS) Indicator Saturation (ISAT) Methods former mildly modified version Pretis, Reade Sucarrat (2018), whereas latter updated version Sucarrat (2020).","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"Maintainer: Genaro Sucarrat","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"Jurgen . Doornik, David F. Hendry, Felix Pretis (2013): 'Step Indicator Saturation', Oxford Economics Discussion Paper, 658. https://ideas.repec.org/p/oxf/wpaper/658.html Felix Pretis, James Reade Genaro Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44. doi:10.18637/jss.v086.i03 Carlos Santos, David F. Hendry Soren Johansen (2007):  'Automatic selection indicators fully saturated regression'. Computational Statistics, vol 23:1, pp.317-335. doi:10.1007/s00180-007-0054-z Genaro Sucarrat (2020): 'User-Specified General--Specific Indicator Saturation Methods'. R Journal 12:2, pages 388-401. https://journal.r-project.org/archive/2021/RJ-2021-024/ Genaro Sucarrat Alvaro Escribano (2012): 'Automated Financial Model Selection: General--Specific Modelling Mean Volatility Specifications', Oxford Bulletin Economics Statistics 74, Issue 5 (October), pp. 716-735.","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) and Indicator Saturation (ISAT) Modelling — gets-package","text":"","code":"##Simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 60)  ##Estimate an AR(2) with intercept as mean specification ##and a log-ARCH(4) as log-volatility specification: myModel <- arx(y, mc=TRUE, ar=1:2, arch=1:4)  ##GETS modelling of the mean of myModel: simpleMean <- getsm(myModel) #>  #> GUM mean equation: #>  #>        reg.no. keep     coef std.error t-stat p-value   #> mconst       1    0 0.026155  0.117029 0.2235 0.82398   #> ar1          2    0 0.333996  0.134355 2.4859 0.01599 * #> ar2          3    0 0.034490  0.133176 0.2590 0.79661   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst -0.278502  0.391091  0.5071 0.47639   #> arch1   0.215508  0.139456  1.5453 0.12870   #> arch2   0.105365  0.142566  0.7391 0.46340   #> arch3   0.081331  0.144165  0.5642 0.57522   #> arch4  -0.306401  0.140825 -2.1758 0.03443 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.4462  3 0.48509 #> Ljung-Box ARCH(5) 1.3238  5 0.93246 #>  #> 2 path(s) to search #> Searching:  #> 1  #> 2  #>  #>   Path 1: 1 3  #>   Path 2: 3 1  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.372013 -66.75816 58 1 #>  #> Retained regressors (final model): #>  #>   ar1   ##GETS modelling of the log-variance of myModel: simpleVar <- getsv(myModel) #> GUM log-variance equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value   #> vconst       1    1 -0.278502  0.391091  0.5071 0.47639   #> arch1        2    0  0.215508  0.139456  1.5453 0.12870   #> arch2        3    0  0.105365  0.142566  0.7391 0.46340   #> arch3        4    0  0.081331  0.144165  0.5642 0.57522   #> arch4        5    0 -0.306401  0.140825 -2.1758 0.03443 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.4462  3 0.48509 #> Ljung-Box ARCH(5) 1.3238  5 0.93246 #>  #> 3 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #>  #>   Path 1: 2 4 3 5  #>   Path 2: 3 4 2 5  #>   Path 3: 4 3 2 5  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.614267 -66.59622 54 2 #> spec 2:         2.659078 -69.80062 54 1 #>  #> Retained regressors (final model): #>  #>   vconst   arch4   ##results: print(simpleMean) #>  #> Date: Sat Jul 27 15:29:52 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS)  #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 58  #> Sample: 3 to 60  #>  #> SPECIFIC mean equation: #>  #>        coef std.error t-stat  p-value    #> ar1 0.34686   0.12327 2.8138 0.006708 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> SPECIFIC log-variance equation: #>  #>             coef std.error  t-stat p-value #> vconst -0.212822  0.473616  0.2019  0.6532 #> arch1   0.194178  0.142006  1.3674  0.1777 #> arch2   0.070728  0.144627  0.4890  0.6270 #> arch3   0.041949  0.145447  0.2884  0.7742 #> arch4  -0.207758  0.142741 -1.4555  0.1519 #>  #> Diagnostics and fit: #>  #>                    Chi-sq df p-value #> Ljung-Box AR(3)   2.66621  3  0.4460 #> Ljung-Box ARCH(5) 0.50528  5  0.9919 #>                            #> SE of regression   0.87620 #> R-squared          0.12105 #> Log-lik.(n=54)   -66.75816 print(simpleVar) #>  #> Date: Sat Jul 27 15:29:52 2024  #> Method: Ordinary Least Squares (OLS)  #> No. of observations (variance eq.): 54  #> Sample: 7 to 60  #>  #> SPECIFIC log-variance equation: #>  #>            coef std.error  t-stat p-value   #> vconst -0.71684   0.31600  5.1459 0.02330 * #> arch4  -0.26115   0.13804 -1.8918 0.06409 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   2.7674  3  0.4289 #> Ljung-Box ARCH(5) 4.5973  5  0.4670 #>                            #> SE of regression   0.88132 #> Log-lik.(n=54)   -66.59622  ##step indicator saturation of an iid normal series: set.seed(123) y <- rnorm(30) isat(y) #>  #> SIS block 1 of 2: #> 15 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #>  #> SIS block 2 of 2: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> GETS of union of retained SIS variables...  #>  #> GETS of union of ALL retained variables... #>  #> Date: Sat Jul 27 15:29:52 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS) #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 30  #> Sample: 1 to 30  #>  #> SPECIFIC mean equation: #>  #>             coef std.error t-stat p-value #> mconst -0.047104  0.179111 -0.263  0.7944 #>  #> Diagnostics and fit: #>  #>                     Chi-sq df p-value   #> Ljung-Box AR(1)   0.046575  1 0.82913   #> Ljung-Box ARCH(1) 3.367118  1 0.06651 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>                            #> SE of regression   0.98103 #> R-squared          0.00000 #> Log-lik.(n=30)   -41.49361"},{"path":"http://moritzschwarz.org/gets/reference/gets.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) Modelling — gets","title":"General-to-Specific (GETS) Modelling — gets","text":"overview gets package, see gets-package. , documentation generic functions GETS modelling provided. Note gets.arx convenience wrapper getsm getsv. specific GETS methods lm, logitx isat models, see gets.lm, gets.logitx gets.isat, respectively.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) Modelling — gets","text":"","code":"gets(x, ...)  # S3 method for class 'arx' gets(x, spec=NULL, ...)"},{"path":"http://moritzschwarz.org/gets/reference/gets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) Modelling — gets","text":"x object subjected GETS modelling spec NULL (default), \"mean\" \"variance\". \"mean\", getsm called. \"variance\", getsv called. NULL, automatically determined whether GETS-modelling mean log-variance specification undertaken. ... arguments passed methods","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) Modelling — gets","text":"gets.arx convenience wrapper getsm getsv.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) Modelling — gets","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"General--Specific (GETS) Modelling objects class isat.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"","code":"# S3 method for class 'isat' gets(x, t.pval=0.05, wald.pval=t.pval, vcov.type=NULL,   do.pet=TRUE, ar.LjungB=list(lag=NULL, pval=0.025),   arch.LjungB=list(lag=NULL, pval=0.025), normality.JarqueB=NULL,   user.diagnostics=NULL, info.method=c(\"sc\",\"aic\",\"aicc\",\"hq\"),   gof.function=NULL, gof.method=NULL, keep=NULL, include.gum=FALSE,   include.1cut=TRUE, include.empty=FALSE, max.paths=NULL, tol=1e-07,   turbo=FALSE, print.searchinfo=TRUE, plot=NULL, alarm=FALSE,...)"},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"x object class 'isat' t.pval numeric value 0 1. significance level used two-sided regressor significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs). default, t.pval vcov.type type variance-covariance matrix used. NULL (default), type used estimation 'arx' object used. can overridden either \"ordinary\" (.e. ordinary variance-covariance matrix) \"white\" (.e. White (1980) heteroscedasticity robust variance-covariance matrix) .pet logical. TRUE (default), Parsimonious Encompassing Test (PET) GUM undertaken regressor removal joint significance deleted regressors along current path. FALSE, PET undertaken regressor removal ar.LjungB two-item list names lag pval, NULL. former case lag contains order Ljung Box (1979) test serial correlation standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. ar.Ljungb=NULL, standardised residuals checked serial correlation arch.LjungB two-item list names lag pval, NULL. former case, lag contains order Ljung Box (1979) test serial correlation squared standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. arch.Ljungb=NULL, standardised residuals checked ARCH normality.JarqueB value 0 1, NULL. former case, Jarque Bera (1980) test non-normality conducted using significance level equal numeric value. NULL, test non-normality undertaken user.diagnostics NULL list two entries, name pval, see user.fun argument diagnostics info.method character string, \"sc\" (default), \"aic\" \"hq\", determines information criterion used selecting among terminal models. abbreviations short Schwarz Bayesian information criterion (sc), Akaike information criterion (aic) Hannan-Quinn (hq) information criterion gof.function NULL (default) list, see getsFun. NULL, infocrit used gof.method NULL (default) character, see getsFun. NULL gof.function also NULL, best goodness--fit characterised minimum value keep regressors excluded removal specification search. Note keep=c(1) obligatory using getsv. excludes log-variance intercept removal. regressor numbering contained reg.column GUM include.gum logical. TRUE, GUM (.e. starting model) included among terminal models. FALSE (default), GUM included include.1cut logical. TRUE, 1-cut model added list terminal models. FALSE (default), 1-cut added, unless terminal model one paths include.empty logical. TRUE, empty model included among terminal models, passes diagnostic tests, even equal one terminals. FALSE (default), empty model included (unless one terminals) max.paths NULL (default) integer greater 0. NULL, limit number paths. integer (e.g. 1), integer constitutes maximum number paths searched (e.g. single path) tol numeric value. tolerance detecting linear dependencies columns variance-covariance matrix computing Wald-statistic used Parsimonious Encompassing Tests (PETs), see qr.solve function turbo logical. TRUE, (parts ) paths searched twice () unnecessarily, thus yielding significant potential speed-gain. However, checking whether search arrived point already comes slight computational overhead. Accordingly, turbo=TRUE, total search time might fact higher turbo=FALSE. happens estimation fast, say, less quarter second. Hence default FALSE print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started plot NULL logical. TRUE, fitted values residuals final model plotted model selection. FALSE, . NULL (default), value set options determines whether plot produced alarm logical. TRUE, sound beep emitted (order alert user) model selection ends ... arguments passed methods","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"Internally, gets.isat invokes getsm GETS-modelling.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"list class gets.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets.isat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) Modelling 'isat' objects — gets.isat","text":"","code":"##generate some data: #set.seed(123) #for reproducibility #y <- rnorm(30) #generate Y #isatmod <- isat(y) #gets(isatmot)"},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"General--Specific (GETS) Modelling objects class lm.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"","code":"# S3 method for class 'lm' gets(x, keep = NULL, include.1cut = TRUE, print.searchinfo = TRUE, ...)"},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"x object class 'lm', see lm keep NULL vector integers determines regressors excluded removal specification search include.1cut logical. TRUE (default), 1-cut model added list terminal models. FALSE, 1-cut added, unless terminal model one paths print.searchinfo logical. TRUE (default), selected info printed search ... arguments passed getsFun","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"Internally, gets.lm invokes getsFun GETS-modelling, also invoked getsm. See help pages information.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"list class lm. Note 'top' list contains information (paths terminal models) GETS modelling, see paths terminals","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets.lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) Modelling 'lm' objects — gets.lm","text":"","code":"##generate some data: set.seed(123) #for reproducibility y <- rnorm(30) #generate Y x <- matrix(rnorm(30*10), 30, 10) #matrix of Xs colnames(x) <- paste0(\"var\", 1:NCOL(x))  ##estimate model: mymod <- lm(y ~ x)  ##do gets modelling: gets(mymod) #>  #> Start model (GUM): #>  #>             reg.no keep        coef   std.error  t-stat p-value   #> (Intercept)      1    0  0.27005590  0.21026283  1.2844 0.21445   #> xvar1            2    0 -0.61303927  0.28160750 -2.1769 0.04230 * #> xvar2            3    0  0.13398941  0.22947573  0.5839 0.56616   #> xvar3            4    0  0.30619954  0.21734292  1.4088 0.17504   #> xvar4            5    0 -0.00018761  0.19034597 -0.0010 0.99922   #> xvar5            6    0  0.16595175  0.20992401  0.7905 0.43897   #> xvar6            7    0 -0.16893171  0.21399989 -0.7894 0.43962   #> xvar7            8    0  0.51949160  0.22562893  2.3024 0.03279 * #> xvar8            9    0  0.32756857  0.20626559  1.5881 0.12877   #> xvar9           10    0 -0.51817835  0.24477483 -2.1170 0.04768 * #> xvar10          11    0 -0.01454824  0.19954250 -0.0729 0.94264   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> 8 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #>  #>   Path 1: 1 6 7 8 9 10 11 4 5 2 3  #>   Path 2: 3 6 7 8 9 10 11 4 5 1 2  #>   Path 3: 4 6 7 8 9 10 11 3 5 1 2  #>   Path 4: 5 6 7 8 9 10 11 3 4 1 2  #>   Path 5: 6 5 7 8 9 10 11 3 4 1 2  #>   Path 6: 7 5 6 8 9 10 11 3 4 1 2  #>   Path 7: 9 5 6 7 8 10 11 3 4 1 2  #>   Path 8: 11 5 6 7 8 9 10 3 4 1 2  #>  #> Terminal models: #>  #>         info(sc)      logl  n k #> spec 1: 2.768546 -41.52819 30 0 #>  #> Retained regressors (final model): #>  #>   none #>  #> Call: #> lm(formula = y ~ NULL - 1) #>  #> No coefficients #>   ##ensure intercept is not removed: gets(mymod, keep=1) #>  #> Start model (GUM): #>  #>             reg.no keep        coef   std.error  t-stat p-value   #> (Intercept)      1    1  0.27005590  0.21026283  1.2844 0.21445   #> xvar1            2    0 -0.61303927  0.28160750 -2.1769 0.04230 * #> xvar2            3    0  0.13398941  0.22947573  0.5839 0.56616   #> xvar3            4    0  0.30619954  0.21734292  1.4088 0.17504   #> xvar4            5    0 -0.00018761  0.19034597 -0.0010 0.99922   #> xvar5            6    0  0.16595175  0.20992401  0.7905 0.43897   #> xvar6            7    0 -0.16893171  0.21399989 -0.7894 0.43962   #> xvar7            8    0  0.51949160  0.22562893  2.3024 0.03279 * #> xvar8            9    0  0.32756857  0.20626559  1.5881 0.12877   #> xvar9           10    0 -0.51817835  0.24477483 -2.1170 0.04768 * #> xvar10          11    0 -0.01454824  0.19954250 -0.0729 0.94264   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> 7 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #>  #>   Path 1: 3 7 8 9 10 11 5 6 2 4  #>   Path 2: 4 7 8 9 10 11 5 6 2 3  #>   Path 3: 5 7 8 9 10 11 4 6 2 3  #>   Path 4: 6 7 8 9 10 11 4 5 2 3  #>   Path 5: 7 6 8 9 10 11 4 5 2 3  #>   Path 6: 9 6 7 8 10 11 4 5 2 3  #>   Path 7: 11 6 7 8 9 10 4 5 2 3  #>  #> Terminal models: #>  #>         info(sc)      logl  n k #> spec 1: 2.365507 -33.78201 30 1 #>  #> Retained regressors (final model): #>  #>   (Intercept)  #>  #> Call: #> lm(formula = y ~ NULL) #>  #> Coefficients: #> (Intercept)   #>     -0.0471   #>"},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"General--Specific (GETS) Modelling dynamic Autoregressive (AR) logit model covariates ('X') class 'dlogitx'.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"","code":"# S3 method for class 'logitx' gets(x, t.pval = 0.05, wald.pval = t.pval, do.pet = TRUE,      user.diagnostics = NULL, keep = NULL, include.gum = FALSE,     include.1cut = TRUE, include.empty = FALSE, max.paths = NULL,     turbo = TRUE, print.searchinfo = TRUE, plot = NULL, alarm = FALSE,     ...)"},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"x object class 'logitx', see logitx t.pval numeric value 0 1. significance level used two-sided regressor significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs). default, t.pval .pet logical determines whether Parsimonious Encompassing Test (PET) GUM undertaken regressor removal joint significance deleted regressors along current path. FALSE, PET undertaken regressor removal user.diagnostics NULL (default) list two entries, name pval, see getsFun keep NULL vector integers determines regressors excluded removal specification search include.gum logical determines whether GUM (.e. starting model) included among terminal models. FALSE (default), GUM included include.1cut logical determines whether 1-cut model added list terminal models. FALSE (default), 1-cut added, unless terminal model one paths include.empty logical determines whether empty model added list terminal models, passes diagnostic tests. FALSE (default), empty model added, unless terminal model one paths max.paths NULL (default) integer greater 0. NULL, limit number paths. integer (e.g. 1), integer constitutes maximum number paths searched (e.g. single path) turbo logical. TRUE (default), (parts ) paths searched twice () unnecessarily, thus yielding significant potential speed-gain. checking whether search arrived point already comes slight computational overhead. faster search guaranteed turbo=TRUE print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started plot NULL logical. TRUE, plot produced. NULL (default), value set options determines whether plot produced alarm logical. TRUE, sound beep emitted (order alert user) model selection ends ... arguments passed methods","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"model class 'logitx' dynamic Autoregressive (AR) logit model (optional) covariates ('X') proposed Kauppi Saikkonen (2008). Internally, gets.logitx undertakes General--Specific (GETS) modelling getsFun function, see Sucarrat (2020).","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"Heikki Kauppi Penti Saikkonen (2008): 'Predicting U.S. Recessions Dynamic Binary Response Models'. Review Economic Statistics 90, pp. 777-791","code":""},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gets.logitx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) Modelling of objects of class 'logitx' — gets.logitx","text":"","code":"##simulate from ar(1), create covariates: set.seed(123) #for reproducibility y <- logitxSim(100, ar=0.3) x <- matrix(rnorm(5*100), 100, 5)  ##estimate model: mymod <- logitx(y, ar=1:4, xreg=x)  ##do gets modelling: gets(mymod) #> 10 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #>  #> Date: Sat Jul 27 15:29:53 2024  #> Dependent var.: y  #> Method: Maximum Likelihood (logit)  #> Variance-Covariance: Ordinary  #> No. of observations: 96  #> Sample: 5 to 100  #>  #> Start model (GUM): #>  #>           reg.no. keep       coef std.error    t-stat p-value   #> intercept       1    0 -0.8500962   0.42943 -1.979613 0.02547 * #> ar1             2    0  0.6026207   0.47106  1.279290 0.10212   #> ar2             3    0  0.3959259   0.46187  0.857232 0.19685   #> ar3             4    0  0.7065778   0.45945  1.537867 0.06388 . #> ar4             5    0 -0.0086638   0.47389 -0.018282 0.49273   #> xreg1           6    0 -0.3449343   0.24557 -1.404649 0.08186 . #> xreg2           7    0 -0.1020382   0.24258 -0.420630 0.33754   #> xreg3           8    0  0.0946418   0.22873  0.413766 0.34004   #> xreg4           9    0 -0.0828681   0.22377 -0.370320 0.35603   #> xreg5          10    0 -0.1679998   0.24140 -0.695929 0.24417   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Paths searched:  #>  #> path 1 : 1 9 3 8 7 5 2 10 4 6  #> path 2 : 2 5 7 9 8 10 3 1 4 6  #> path 3 : 3 5 8 7 9 10 6 2 1 4  #> path 4 : 4 9 5 8 7 10 3 1 2 6  #> path 5 : 5 9 7 8 10 3 6 2 1 4  #> path 6 : 6 9 7 5 8 10 3 2 1 4  #> path 7 : 7 5 9 8 10 3 6 2 1 4  #> path 8 : 8 5 7 9 10 3 6 2 1 4  #> path 9 : 9 5 7 8 10 3 6 2 1 4  #> path 10 : 10 5 9 7 8 3 6 2 1 4  #>  #> Terminal models:  #>  #> spec 1 :   #>  #>                 info(sc)     logl  n  k #> spec 1 (1-cut):   1.3863 -66.5421 96  0 #>  #>    The empty model #>                         #> Log-lik.(n=96) -66.5421"},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) modelling function — getsFun","title":"General-to-Specific (GETS) modelling function — getsFun","text":"Auxiliary function (.e. intended average user) enables fast efficient GETS-modelling user-specified estimators models, user-specified diagnostics goodness--fit criteria. function called relied upon getsm, getsv, isat blocksFun.","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) modelling function — getsFun","text":"","code":"getsFun(y, x, untransformed.residuals=NULL,   user.estimator=list(name=\"ols\"), gum.result=NULL, t.pval=0.05,   wald.pval=t.pval, do.pet=TRUE, ar.LjungB=NULL, arch.LjungB=NULL,   normality.JarqueB=NULL, user.diagnostics=NULL,   gof.function=list(name=\"infocrit\"), gof.method=c(\"min\", \"max\"),   keep=NULL, include.gum=FALSE, include.1cut=FALSE,   include.empty=FALSE, max.paths=NULL, turbo=FALSE, tol=1e-07,   LAPACK=FALSE, max.regs=NULL, print.searchinfo=TRUE, alarm=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) modelling function — getsFun","text":"y numeric vector (missing values, .e. non-numeric 'holes') x matrix NULL untransformed.residuals NULL (default) , ols used method=6 user.estimator, numeric vector containing untransformed residuals user.estimator list. first item named name contain name (character) estimation function (default \"ols\"). Additional items, , list user.estimator passed arguments estimator question. Optionally, list can also contain item named envir, character, indicates environment user-specified estimator resides. value returned user-specified estimator list, see details gum.result list estimation results General Unrestricted Model (GUM), NULL (default). estimation results GUM already available, re-estimation GUM skipped estimation results provided via argument t.pval numeric value 0 1. significance level used two-sided regressor significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs) .pet logical. TRUE (default), Parsimonious Encompassing Test (PET) GUM undertaken regressor removal joint significance deleted regressors along current path. FALSE, PET undertaken regressor removal ar.LjungB two element vector NULL (default). former case, first element contains AR-order, second element significance level. NULL, test autocorrelation conducted arch.LjungB two element vector NULL (default). former case, first element contains ARCH-order, second element significance level. NULL, test ARCH conducted normality.JarqueB NULL numeric value 0 1. latter case, test non-normality conducted using significance level equal normality.JarqueB. NULL, test non-normality conducted user.diagnostics NULL (default) list two entries, name pval. first item (name) contain name user-defined function, must class character. second item contain chosen significance level levels, .e. either scalar vector length equal number p-values returned user-defined diagnostics function, see details. Optionally, list user.diagnostics can also contain third item named envir, character, indicates environment user-defined function resides gof.function list. first item named name contain name (character) Goodness--Fit (GOF) function used. Additional items list gof.function passed arguments GOF-function. value returned GOF-function numeric value (length 1). Optionally, list gof.function can also contain item named envir, character, indicates environment user-defined function resides gof.method character. Determines whether best Goodness--Fit minimum maximum keep NULL integer vector indicates regressors excluded removal search include.gum logical. TRUE, GUM (.e. starting model) included among terminal models. FALSE (default), GUM included include.1cut logical. TRUE, 1-cut model added list terminal models. FALSE (default), 1-cut added, unless terminal model one paths include.empty logical. TRUE, empty model added list terminal models. FALSE (default), empty model added, unless terminal model one paths max.paths NULL (default) integer greater 0. NULL, limit number paths. integer (e.g. 1), integer constitutes maximum number paths searched (e.g. single path) turbo logical. TRUE, (parts ) paths searched twice () unnecessarily, thus yielding significant potential speed-gain. However, checking whether search arrived point already comes slight computational overhead. Accordingly, turbo=TRUE, total search time might fact higher turbo=FALSE. happens estimation fast, say, less quarter second. Hence default FALSE tol numeric value (default = 1e-07). tolerance detecting linear dependencies columns variance-covariance matrix computing Wald-statistic used Parsimonious Encompassing Tests (PETs), see qr.solve function LAPACK currently used max.regs integer. maximum number regressions along deletion path. alter unless know ! print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started alarm logical. TRUE, sound beep emitted (order alert user) model selection ends","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) modelling function — getsFun","text":"value returned estimator specified user.estimator list containing least six items: \"coefficients\", \"df\", \"vcov\", \"logl\", \"n\" \"k\". item \"coefficients\" vector length NCOL(x) containing estimated coefficients. item named \"df\" used compute p-values associated t-statistics, .e. coef/std.err. item named \"vcov\" contains (symmetric) coefficient-covariance matrix estimated coefficients. items \"logl\" (log-likelihood), \"n\" (number observations) \"k\" (number estimated parameters; necessarily equal number coefficients) used compute information criterion. Finally, estimator MUST able handle empty regressor-matrices (.e. .null(x)=TRUE NCOL(x)=0). case, first three items (.e. \"coefficients\", \"df\" \"vcov\") can - - NULL. argument user.estimator enables user specify estimator differs default (ols). , argument list least one entry, name (class character), contains name user-defined function. call function executed .call, whose default value envir parent.frame(). Usually, global environment (.GlobalEnv), can changed adding entry named envir list indicates user-defined function resides. argument user.diagnostics enables user specify additional - alternative - diagnostics, see diagnostics. argument gof.function enables user specify goodness--fit function differs default (infocrit). principles follow user.estimator: argument list least one entry, name, contains name user-defined function, additional entries list passed user-specified goodness--fit function, optionally entry named envir may indicate user-defined function resides.","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-to-Specific (GETS) modelling function — getsFun","text":"list results specification search.","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"General-to-Specific (GETS) modelling function — getsFun","text":"C. Jarque . Bera (1980): 'Efficient Tests Normality, Homoscedasticity Serial Independence'. Economics Letters 6, pp. 255-259 G. Ljung G. Box (1979): 'Measure Lack Fit Time Series Models'. Biometrika 66, pp. 265-270 F. Pretis, J. Reade G. Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44 G. sucarrat (2019): 'User-Specified General--Specific Indicator Saturation Methods', Munich Personal RePEc Archive: https://mpra.ub.uni-muenchen.de/96653/","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) modelling function — getsFun","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/getsFun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) modelling function — getsFun","text":"","code":"##aim: do gets on the x-part (i.e. the covariates) of an arma-x model. ##create the user-defined estimator (essentially adding, renaming ##and re-organising the items returned by the estimator): myEstimator <- function(y, x) {   tmp <- arima(y, order=c(1,0,1), xreg=x)    #rename and re-organise:   result <- list()   result$coefficients <- tmp$coef[-c(1:3)]   result$vcov <- tmp$var.coef   result$vcov <- result$vcov[-c(1:3),-c(1:3)]   result$logl <- tmp$loglik   result$n <- tmp$nobs   result$k <- NCOL(x)   result$df <- result$n - result$k      return(result) }  ##generate some data: ##a series w/structural break and eleven step-dummies near the break set.seed(123) eps <- arima.sim(list(ar=0.4, ma=0.1), 60) x <- coredata(sim(eps, which.ones=25:35)) #eleven step-dummies y <- 4*x[,\"sis30\"] + eps #create shift upwards at observation 30 plot(y)   ##estimate the gum and then do gets in a single step: ##getsFun(y, x, user.estimator=list(name=\"myEstimator\"))  ##estimate the gum and then do gets in two steps: #mygum <- myEstimator(y, x) ##getsFun(y, x, user.estimator=list(name=\"myEstimator\"), gum.result=mygum)"},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":null,"dir":"Reference","previous_headings":"","what":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"starting model, object 'arx' class, referred General Unrestricted Model (GUM). getsm function undertakes multi-path GETS modelling mean specification, whereas getsv log-variance specification. diagnostic tests undertaken standardised residuals, keep option enables regressors excluded possible removal.","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"","code":"##GETS-modelling of mean specification: getsm(object, t.pval=0.05, wald.pval=t.pval, vcov.type=NULL,      do.pet=TRUE, ar.LjungB=list(lag=NULL, pval=0.025),      arch.LjungB=list(lag=NULL, pval=0.025), normality.JarqueB=NULL,      user.diagnostics=NULL, info.method=c(\"sc\",\"aic\",\"aicc\", \"hq\"),     gof.function=NULL, gof.method=NULL, keep=NULL, include.gum=FALSE,     include.1cut=TRUE, include.empty=FALSE, max.paths=NULL, tol=1e-07,     turbo=FALSE, print.searchinfo=TRUE, plot=NULL, alarm=FALSE)  ##GETS modelling of log-variance specification: getsv(object, t.pval=0.05, wald.pval=t.pval,     do.pet=TRUE, ar.LjungB=list(lag=NULL, pval=0.025),     arch.LjungB=list(lag=NULL, pval=0.025), normality.JarqueB=NULL,     user.diagnostics=NULL, info.method=c(\"sc\",\"aic\",\"aicc\",\"hq\"),     gof.function=NULL, gof.method=NULL, keep=c(1), include.gum=FALSE,     include.1cut=TRUE, include.empty=FALSE, max.paths=NULL, tol=1e-07,     turbo=FALSE, print.searchinfo=TRUE, plot=NULL, alarm=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"object object class 'arx' t.pval numeric value 0 1. significance level used two-sided regressor significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs). default, t.pval vcov.type type variance-covariance matrix used. NULL (default), type used estimation 'arx' object used. can overridden either \"ordinary\" (.e. ordinary variance-covariance matrix) \"white\" (.e. White (1980) heteroscedasticity robust variance-covariance matrix) .pet logical. TRUE (default), Parsimonious Encompassing Test (PET) GUM undertaken regressor removal joint significance deleted regressors along current path. FALSE, PET undertaken regressor removal ar.LjungB list named items lag pval, two-element numeric vector first element contains lag second p-value, NULL. first case, lag contains order Ljung Box (1979) test serial correlation standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. ar.Ljungb=NULL, standardised residuals checked serial correlation arch.LjungB list named items lag pval, two-element numeric vector first element contains lag second p-value, NULL. first case, lag contains order Ljung Box (1979) test serial correlation squared standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. arch.Ljungb=NULL, standardised residuals checked ARCH normality.JarqueB value 0 1, NULL. former case, Jarque Bera (1980) test non-normality conducted using significance level equal numeric value. NULL, test non-normality undertaken user.diagnostics NULL list two entries, name pval, see user.fun argument diagnostics info.method character string, \"sc\" (default), \"aic\" \"hq\", determines information criterion used selecting among terminal models. abbreviations short Schwarz Bayesian information criterion (sc), Akaike information criterion (aic) Hannan-Quinn (hq) information criterion gof.function NULL (default) list, see getsFun. NULL, infocrit used gof.method NULL (default) character, see getsFun. NULL gof.function also NULL, best goodness--fit characterised minimum value keep regressors excluded removal specification search. Note keep=c(1) obligatory using getsv. excludes log-variance intercept removal. regressor numbering contained reg.column GUM include.gum logical. TRUE, GUM (.e. starting model) included among terminal models. FALSE (default), GUM included include.1cut logical. TRUE, 1-cut model added list terminal models. FALSE (default), 1-cut added, unless terminal model one paths include.empty logical. TRUE, empty model included among terminal models, passes diagnostic tests, even equal one terminals. FALSE (default), empty model included (unless one terminals) max.paths NULL (default) integer greater 0. NULL, limit number paths. integer (e.g. 1), integer constitutes maximum number paths searched (e.g. single path) tol numeric value. tolerance detecting linear dependencies columns variance-covariance matrix computing Wald-statistic used Parsimonious Encompassing Tests (PETs), see qr.solve function turbo logical. TRUE, (parts ) paths searched twice () unnecessarily, thus yielding significant potential speed-gain. However, checking whether search arrived point already comes slight computational overhead. Accordingly, turbo=TRUE, total search time might fact higher turbo=FALSE. happens estimation fast, say, less quarter second. Hence default FALSE print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started plot NULL logical. TRUE, fitted values residuals final model plotted model selection. FALSE, . NULL (default), value set options determines whether plot produced alarm logical. TRUE, sound beep emitted (order alert user) model selection ends","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"overview, see Pretis, Reade Sucarrat (2018): doi:10.18637/jss.v086.i03 . arguments user.diagnostics gof.function enable specification user-defined diagnostics user-defined goodness--fit function. former, see documentation diagnostics. latter, principles arguments getsFun followed, see documentation \"Details\", Sucarrat (2020): https://journal.r-project.org/archive/2021/RJ-2021-024/.","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"list class 'gets'","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"C. Jarque . Bera (1980): 'Efficient Tests Normality, Homoscedasticity Serial Independence'. Economics Letters 6, pp. 255-259. doi:10.1016/0165-1765(80)90024-5 G. Ljung G. Box (1979): 'Measure Lack Fit Time Series Models'. Biometrika 66, pp. 265-270 Felix Pretis, James Reade Genaro Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44. doi:10.18637/jss.v086.i03 Genaro Sucarrat (2020): 'User-Specified General--Specific Indicator Saturation Methods'. R Journal 12:2, pages 388-401. https://journal.r-project.org/archive/2021/RJ-2021-024/","code":""},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/getsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-to-Specific (GETS) Modelling of an AR-X model (the mean specification) with log-ARCH-X errors (the log-variance specification). — getsm","text":"","code":"##Simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 80)  ##Simulate four independent Gaussian regressors: xregs <- matrix(rnorm(2*80), 80, 2)  ##estimate an AR(2) with intercept and four conditioning ##regressors in the mean, and a log-ARCH(3) with log(xregs^2) as ##regressors in the log-variance: gum01 <- arx(y, mc=TRUE, ar=1:2, mxreg=xregs, arch=1:3,   vxreg=log(xregs^2))  ##GETS model selection of the mean: meanmod01 <- getsm(gum01) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat  p-value    #> mconst       1    0  0.052513  0.101817  0.5158 0.607583    #> ar1          2    0  0.312720  0.115433  2.7091 0.008401 ** #> ar2          3    0 -0.062448  0.118204 -0.5283 0.598886    #> mxreg1       4    0  0.166409  0.101452  1.6403 0.105250    #> mxreg2       5    0 -0.013699  0.111233 -0.1232 0.902323    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst  0.406367  0.414376  0.9617 0.32675   #> arch1   0.192973  0.117722  1.6392 0.10572   #> arch2   0.245569  0.125909  1.9504 0.05519 . #> arch3  -0.076098  0.118621 -0.6415 0.52331   #> vxreg1 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 4 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #>  #>   Path 1: 1 5 3 4  #>   Path 2: 3 5 1 4  #>   Path 3: 4 5 3 1  #>   Path 4: 5 1 3 4  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.776498 -106.1051 78 1 #>  #> Retained regressors (final model): #>  #>   ar1   ##GETS model selection of the log-variance: varmod01 <- getsv(gum01) #> GUM log-variance equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value   #> vconst       1    1  0.406367  0.414376  0.9617 0.32675   #> arch1        2    0  0.192973  0.117722  1.6392 0.10572   #> arch2        3    0  0.245569  0.125909  1.9504 0.05519 . #> arch3        4    0 -0.076098  0.118621 -0.6415 0.52331   #> vxreg1       5    0 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2       6    0  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 5 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #>  #>   Path 1: 2 4 6 5 3  #>   Path 2: 3 4 6 5  #>   Path 3: 4 6 5 3  #>   Path 4: 5 4 6 3  #>   Path 5: 6 4 5 3  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.632361 -96.55478 75 1 #> spec 2:         2.748094 -98.73603 75 2 #>  #> Retained regressors (final model): #>  #>   vconst   ##GETS model selection of the mean with the mean intercept ##excluded from removal: meanmod02 <- getsm(gum01, keep=1) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat  p-value    #> mconst       1    1  0.052513  0.101817  0.5158 0.607583    #> ar1          2    0  0.312720  0.115433  2.7091 0.008401 ** #> ar2          3    0 -0.062448  0.118204 -0.5283 0.598886    #> mxreg1       4    0  0.166409  0.101452  1.6403 0.105250    #> mxreg2       5    0 -0.013699  0.111233 -0.1232 0.902323    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst  0.406367  0.414376  0.9617 0.32675   #> arch1   0.192973  0.117722  1.6392 0.10572   #> arch2   0.245569  0.125909  1.9504 0.05519 . #> arch3  -0.076098  0.118621 -0.6415 0.52331   #> vxreg1 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 3 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #>  #>   Path 1: 3 5 4  #>   Path 2: 4 5 3  #>   Path 3: 5 3 4  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.656706 -99.25482 78 2 #>  #> Retained regressors (final model): #>  #>   mconst   ar1   ##GETS model selection of the mean with non-default #serial-correlation diagnostics settings: meanmod03 <- getsm(gum01, ar.LjungB=list(pval=0.05)) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat  p-value    #> mconst       1    0  0.052513  0.101817  0.5158 0.607583    #> ar1          2    0  0.312720  0.115433  2.7091 0.008401 ** #> ar2          3    0 -0.062448  0.118204 -0.5283 0.598886    #> mxreg1       4    0  0.166409  0.101452  1.6403 0.105250    #> mxreg2       5    0 -0.013699  0.111233 -0.1232 0.902323    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst  0.406367  0.414376  0.9617 0.32675   #> arch1   0.192973  0.117722  1.6392 0.10572   #> arch2   0.245569  0.125909  1.9504 0.05519 . #> arch3  -0.076098  0.118621 -0.6415 0.52331   #> vxreg1 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 4 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #>  #>   Path 1: 1 5 3 4  #>   Path 2: 3 5 1 4  #>   Path 3: 4 5 3 1  #>   Path 4: 5 1 3 4  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.776498 -106.1051 78 1 #>  #> Retained regressors (final model): #>  #>   ar1   ##GETS model selection of the mean with very liberal ##(20 percent) significance levels: meanmod04 <- getsm(gum01, t.pval=0.2) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat  p-value    #> mconst       1    0  0.052513  0.101817  0.5158 0.607583    #> ar1          2    0  0.312720  0.115433  2.7091 0.008401 ** #> ar2          3    0 -0.062448  0.118204 -0.5283 0.598886    #> mxreg1       4    0  0.166409  0.101452  1.6403 0.105250    #> mxreg2       5    0 -0.013699  0.111233 -0.1232 0.902323    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> GUM log-variance equation: #>  #>             coef std.error  t-stat p-value   #> vconst  0.406367  0.414376  0.9617 0.32675   #> arch1   0.192973  0.117722  1.6392 0.10572   #> arch2   0.245569  0.125909  1.9504 0.05519 . #> arch3  -0.076098  0.118621 -0.6415 0.52331   #> vxreg1 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 3 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #>  #>   Path 1: 1 5 3  #>   Path 2: 3 5 1  #>   Path 3: 5 1 3  #>  #> Terminal models: #>  #>                 info(sc)     logl  n k #> spec 1 (1-cut): 2.767504 -103.576 78 2 #>  #> Retained regressors (final model): #>  #>   ar1   mxreg1   ##GETS model selection of log-variance with all the ##log-ARCH terms excluded from removal: varmod03 <- getsv(gum01, keep=2:4) #> Warning: Regressor 1 included into 'keep' #> GUM log-variance equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value   #> vconst       1    1  0.406367  0.414376  0.9617 0.32675   #> arch1        2    1  0.192973  0.117722  1.6392 0.10572   #> arch2        3    1  0.245569  0.125909  1.9504 0.05519 . #> arch3        4    1 -0.076098  0.118621 -0.6415 0.52331   #> vxreg1       5    0 -0.196355  0.127679 -1.5379 0.12865   #> vxreg2       6    0  0.158193  0.131686  1.2013 0.23374   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics: #>  #>                   Chi-sq df p-value #> Ljung-Box AR(3)   3.9061  3 0.27179 #> Ljung-Box ARCH(4) 4.8830  4 0.29952 #>  #> 2 path(s) to search #> Searching:  #> 1  #> 2  #>  #>   Path 1: 5 6  #>   Path 2: 6 5  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.811774 -96.80654 75 4 #>  #> Retained regressors (final model): #>  #>   vconst   arch1   arch2   arch3"},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Method of Moment (GMM) estimation of linear models — gmm","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"Generalised Method Moment (GMM) estimation linear models either ordinary (homoscedastic error) robust (heteroscedastic error) coefficient-covariance, see Hayashi (2000) chapter 3.","code":""},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"","code":"gmm(y, x, z, tol = .Machine$double.eps,   weighting.matrix = c(\"efficient\", \"2sls\", \"identity\"),   vcov.type = c(\"ordinary\", \"robust\"))"},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"y numeric vector, regressand x numeric matrix, regressors z numeric matrix, instruments tol numeric value. tolerance detecting linear dependencies columns matrices inverted, see solve function weighting.matrix character determines weighting matrix bee used, see \"details\" vcov.type character determines expression coefficient-covariance, see \"details\"","code":""},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"weighting.matrix = \"identity\" corresponds Instrumental Variables (IV) estimator, weighting.matrix = \"2sls\" corresponds 2 Stage Least Squares (2SLS) estimator, whereas weighting.matrix = \"efficient\" corresponds efficient GMM estimator, see chapter 3 Hayashi(2000). vcov.type = \"ordinary\" returns ordinary expression coefficient-covariance, valid conditionally homoscedastic errors. vcov.type = \"robust\" returns expression also valid conditional heteroscedasticity, see chapter 3 Hayashi (2000).","code":""},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"list , amongst , following items: n number observations k number regressors df degrees freedom, .e. n-k coefficients vector coefficient estimates fit vector fitted values residuals vector residuals residuals2 vector squared residuals rss residual sum squares sigma2 regression variance vcov coefficient-covariance matrix logl normal log-likelihood","code":""},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"F. Hayashi (2000): 'Econometrics'. Princeton: Princeton University Press","code":""},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/gmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised Method of Moment (GMM) estimation of linear models — gmm","text":"","code":"##generate data where regressor is correlated with error: set.seed(123) #for reproducibility n <- 100 z1 <- rnorm(n) #instrument eps <- rnorm(n) #ensures cor(z,eps)=0 x1 <- 0.5*z1 + 0.5*eps #ensures cor(x,eps) is strong y <- 0.4 + 0.8*x1 + eps #the dgp cor(x1, eps) #check correlatedness of regressor #> [1] 0.7109826 cor(z1, eps) #check uncorrelatedness of instrument #> [1] -0.04953215  x <- cbind(1,x1) #regressor matrix z <- cbind(1,z1) #matrix with instruments  ##efficient gmm estimation: mymod <- gmm(y, x, z) mymod$coefficients #> [1] 0.2915040 0.6892453  ##ols (for comparison): mymod <- ols(y,x) mymod$coefficients #>                  x1  #> 0.3015429 1.8605825"},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Hoover and Perez (1999) data — hpdata","title":"Hoover and Perez (1999) data — hpdata","text":"Data used Hoover Perez (1999) evaluation General--Specific (GETS) modelling. detailed description data found Table 1 (page 172). data quarterly, comprise 20 variables (first variable quarterly index) runs 1959:1 1995:1. corresponds 145 observations. original source data Citibank.","code":""},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hoover and Perez (1999) data — hpdata","text":"","code":"data(hpdata)"},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hoover and Perez (1999) data — hpdata","text":"Date factor contains (quarterly) dates observations DCOINC index four coincident indicators GD GNP price deflator GGEQ government purchases goods services GGFEQ federal purchases goods services GGFR federal government receipts GNPQ GNP GYDQ disposable personal income GPIQ gross private domestic investment FMRRA total member bank reserves FMBASE monetary base (feredal reserve bank St. Louis) FM1DQ M1 FM2DQ M2 FSDJ Dow Jones stock price FYAAAC Moody's AAA corporate bond yield LHC labour force (16 years+, civilian) LHUR unemployment rate MU unfilled orders (manufacturing, industries) MO new orders (manufacturing, industries) GCQ personal consumption expenditure","code":""},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hoover and Perez (1999) data — hpdata","text":"data used comparison illustration GETS model selection several studies GETS methodology, including Hendry Krolzig (1999, 2005), Doornik (2009) Sucarrat Escribano (2012).","code":""},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hoover and Perez (1999) data — hpdata","text":"Retrieved 14 October 2014 : https://www.csus.edu/indiv/p/perezs/data/data.htm","code":""},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hoover and Perez (1999) data — hpdata","text":"David F. Hendry Hans-Martin Krolzig (1999): 'Improving 'Data   mining reconsidered' K.D. Hoover S.J Perez', Econometrics   Journal, Vol. 2, pp. 202-219. David F. Hendry Hans-Martin Krolzig (2005): 'properties   automatic Gets modelling', Economic Journal 115, C32-C61. Jurgen Doornik (2009): 'Autometrics', Jennifer L. Castle Neil   Shephard (eds), 'Methodology Practice Econometrics:   Festschrift Honour David F. Hendry', Oxford University Press,   Oxford, pp. 88-121. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44.","code":""},{"path":"http://moritzschwarz.org/gets/reference/hpdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hoover and Perez (1999) data — hpdata","text":"","code":"##load Hoover and Perez (1999) data: data(hpdata)  ##make quarterly data-matrix of zoo type: newhpdata <- zooreg(hpdata[,-1], start=c(1959,1), frequency=4)  ##plot data: plot(newhpdata)   ##transform data to log-differences in percent: dloghpdata <- diff(log(newhpdata))*100  ##plot log-differenced data: plot(dloghpdata)"},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"Auxiliary functions make, respectively, matrices impulse indicators (iim), step indicators (sim) trend indicators (tim)","code":""},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"","code":"##make matrix of impulse indicators: iim(x, which.ones = NULL)  ##make matrix of step indicators: sim(x, which.ones = NULL)  ##make matrix of trend indicators: tim(x, which.ones = NULL, log.trend = FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"x either integer (length series question) series (vector matrix) use time-series index make indicators .ones locations impulses. NULL (default), impulses returned log.trend logical. TRUE, natural log applied trends","code":""},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"x series vector observations, index x used labelling impulses, returned zoo object. Note: sim tim first indicator removed, since exactly colinear others.","code":""},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"zoo matrix containing impulses","code":""},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/iim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Indicator Matrices (Impulses, Steps, Trends) — iim","text":"","code":"##generate series: y <- rnorm(40)  ##make matrix of impulse indicators: mIIM <- iim(40)  ##make matrix of step-indicators, but only every third: mSIM <- sim(y, which.ones=seq(1,40,3))  ##give quarterly time-series attributes to y-series: y <- zooreg(y, frequency=4, end=c(2015,4))  ##make matrix of trend-indicators with quarterly labels: mTIM <- tim(y)"},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly Norwegian year-on-year CPI inflation — infldata","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"Quarterly Norwegian year--year CPI inflation 1989(1) 2015(4).","code":""},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"","code":"data(\"infldata\")"},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"data frame 108 observations following 5 variables: date factor containing dates infl year--year inflation q2dum dummy variable equal 1 quarter 2 0 otherwise q3dum dummy variable equal 1 quarter 3 0 otherwise q4dum dummy variable equal 1 quarter 4 0 otherwise","code":""},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"Statistics Norway (SSB): https://www.ssb./. raw data comprise monthly CPI data obtained via https://www.ssb./statbank/table/08183.","code":""},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/infldata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quarterly Norwegian year-on-year CPI inflation — infldata","text":"","code":"data(infldata) infldata <- zooreg(infldata[,-1], frequency=4, start=c(1989,1)) plot(infldata[,\"infl\"])"},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the Average Value of an Information Criterion — infocrit","title":"Computes the Average Value of an Information Criterion — infocrit","text":"Given log-likelihood, number observations number estimated parameters, average value chosen information criterion computed. facilitates comparison models estimated different number observations, e.g. due different lags.","code":""},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the Average Value of an Information Criterion — infocrit","text":"","code":"infocrit(x, method=c(\"sc\",\"aic\",\"aicc\",\"hq\"))  info.criterion(logl, n=NULL, k=NULL, method=c(\"sc\",\"aic\",\"aicc\",\"hq\"))"},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the Average Value of an Information Criterion — infocrit","text":"x list contains, least, three items: logl (numeric, log-likelihood), k (numeric, usually number estimated parameters) n (numeric, number observations) method character, either \"sc\" (default), \"aic\", \"aicc\" \"hq\" logl numeric, value log-likelihood n integer, number observations k integer, number parameters","code":""},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes the Average Value of an Information Criterion — infocrit","text":"Contrary AIC BIC, info.criterion computes average criterion value (.e. division number observations). facilitates comparison models estimated different number observations, e.g. due different lags.","code":""},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the Average Value of an Information Criterion — infocrit","text":"infocrit: numeric (.e. value chosen information criterion) info.criterion: list elements method type information criterion n number observations k number parameters value value information criterion","code":""},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computes the Average Value of an Information Criterion — infocrit","text":"H. Akaike (1974): 'new look statistical model identification'.   IEEE Transactions Automatic Control 19, pp. 716-723 E. Hannan B. Quinn (1979): 'determination order   autoregression'. Journal Royal Statistical Society B 41, pp. 190-195 C.M. Hurvich C.-L. Tsai (1989): 'Regression Time Series Model   Selection Small Samples'. Biometrika 76, pp. 297-307 Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44 G. Schwarz (1978): 'Estimating dimension model'. Annals   Statistics 6, pp. 461-464","code":""},{"path":"http://moritzschwarz.org/gets/reference/infocrit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the Average Value of an Information Criterion — infocrit","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicator Saturation — isat","title":"Indicator Saturation — isat","text":"isat function undertakes multi-path indicator saturation detect outliers mean-shifts using impulses (IIS), step-shifts (SIS), trend-indicators (TIS). Indicators partitioned blocks selected chosen level significance (t.pval) using getsm function.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicator Saturation — isat","text":"","code":"isat(y, ...)  ##default S3 method: # Default S3 method isat(y, mc=TRUE, ar=NULL, ewma=NULL, mxreg=NULL, iis=FALSE, sis=TRUE,   tis=FALSE, uis=FALSE, blocks=NULL, ratio.threshold=0.8, max.block.size=30,   t.pval=0.001, wald.pval=t.pval,   vcov.type= c(\"ordinary\",\"white\",\"newey-west\"), do.pet=FALSE, ar.LjungB=NULL,   arch.LjungB=NULL, normality.JarqueB=NULL, info.method=c(\"sc\",\"aic\",\"hq\"),   user.diagnostics=NULL, user.estimator=NULL, gof.function=NULL,   gof.method = c(\"min\", \"max\"), include.gum=NULL, include.1cut=FALSE,   include.empty=FALSE, max.paths=NULL, parallel.options=NULL, turbo=FALSE,   tol=1e-07, LAPACK=FALSE, max.regs=NULL, print.searchinfo=TRUE, plot=NULL,   alarm=FALSE, ...)    ##S3 method for objects of class 'lm': # S3 method for class 'lm' isat(y, ar=NULL, ewma=NULL, iis=FALSE, sis=TRUE,   tis=FALSE, uis=FALSE, blocks=NULL, ratio.threshold=0.8, max.block.size=30,   t.pval=0.001, wald.pval=t.pval,   vcov.type= c(\"ordinary\",\"white\",\"newey-west\"), do.pet=FALSE, ar.LjungB=NULL,   arch.LjungB=NULL, normality.JarqueB=NULL, info.method=c(\"sc\",\"aic\",\"hq\"),   user.diagnostics=NULL, user.estimator=NULL, gof.function=NULL,   gof.method = c(\"min\", \"max\"), include.gum=NULL, include.1cut=FALSE,   include.empty=FALSE, max.paths=NULL, parallel.options=NULL, turbo=FALSE,   tol=1e-07, LAPACK=FALSE, max.regs=NULL, print.searchinfo=TRUE, plot=NULL,   alarm=FALSE, ...)  ##S3 method for objects of class 'arx': # S3 method for class 'arx' isat(y, mc=TRUE, ar=NULL, ewma=NULL, iis=FALSE, sis=TRUE,   tis=FALSE, uis=FALSE, blocks=NULL, ratio.threshold=0.8, max.block.size=30,   t.pval=0.001, wald.pval=t.pval,   vcov.type= c(\"ordinary\",\"white\",\"newey-west\"), do.pet=FALSE, ar.LjungB=NULL,   arch.LjungB=NULL, normality.JarqueB=NULL, info.method=c(\"sc\",\"aic\",\"hq\"),   user.diagnostics=NULL, user.estimator=NULL, gof.function=NULL,   gof.method = c(\"min\", \"max\"), include.gum=NULL, include.1cut=FALSE,   include.empty=FALSE, max.paths=NULL, parallel.options=NULL, turbo=FALSE,   tol=1e-07, LAPACK=FALSE, max.regs=NULL, print.searchinfo=TRUE, plot=NULL,   alarm=FALSE, ...)"},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicator Saturation — isat","text":"y numeric vector, time-series, zoo, object class lm arx. Missing values beginning end series allowed, removed na.trim command mc logical. TRUE (default) includes intercept mean specification, whereas FALSE ar integer vector, say, c(2,4) 1:4. AR-lags include mean specification ewma either NULL (default) list arguments sent eqwma function. latter case lagged moving average y included regressor mxreg numeric vector matrix, say, zoo object, conditioning variables. Note missing values beginning end series allowed, removed na.trim command. Note also , y mxreg zoo objects, samples chosen match iis logical. TRUE, impulse indicator saturation performed. sis logical. TRUE, step indicator saturation performed. tis logical. TRUE, trend indicator saturation performed. uis matrix regressors, list matrices. blocks NULL (default), integer (number blocks) user-specified list indicates blocks put together. NULL, number blocks determined automatically ratio.threshold Minimum ratio variables block total observations determine block size, default=0.8. relevant blocks = NULL max.block.size Maximum size block variables selected , default=30. Block size used maximum given either ratio.threshold max.block.size t.pval numeric value 0 1. significance level used two-sided regressor significance t-tests wald.pval numeric value 0 1. significance level used Parsimonious Encompassing Tests (PETs) vcov.type type variance-covariance matrix used. NULL (default), type used 'arx' object. can overridden either \"ordinary\" (.e. ordinary variance-covariance matrix) \"white\" (.e. White (1980) heteroscedasticity robust variance-covariance matrix) .pet logical. TRUE, Parsimonious Encompassing Test (PET) GUM undertaken regressor removal joint significance deleted regressors along current path. FALSE (default), PET undertaken regressor removal. default, numeric value t.pval ar.LjungB two-item list names lag pval, NULL (default). former case lag contains order Ljung Box (1979) test serial correlation standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. ar.Ljungb=NULL, standardised residuals checked serial correlation arch.LjungB two-item list names lag pval, NULL (default). former case, lag contains order Ljung Box (1979) test serial correlation squared standardised residuals, pval contains significance level. lag=NULL (default), order used estimated 'arx' object. arch.Ljungb=NULL, standardised residuals checked ARCH normality.JarqueB NULL (default) value 0 1. latter case, test non-normality conducted using significance level equal normality.JarqueB. NULL, test non-normality conducted info.method character string, \"sc\" (default), \"aic\" \"hq\", determines information criterion used selecting among terminal models. abbreviations short Schwarz Bayesian information criterion (sc), Akaike information criterion (aic) Hannan-Quinn (hq) information criterion user.diagnostics NULL list two entries, name pval, see user.fun argument diagnostics user.estimator NULL list least one entry, name, see user.estimator argument getsFun gof.function NULL list least one entry, name, see user.estimator argument getsFun gof.method NULL character determines whether best Goodness--Fit minimum maximum include.gum ignored (temporarily deprecated) include.1cut logical. TRUE, 1-cut model included among terminal models, passes diagnostic tests, even equal one terminals. FALSE (default), 1-cut model included (unless one terminals) include.empty logical. TRUE, empty model included among terminal models, passes diagnostic tests, even equal one terminals. FALSE (default), empty model included (unless one terminals) max.paths NULL (default) integer indicating maximum number paths search parallel.options NULL integer, .e. number cores/threads used parallel computing (implemented w/makeCluster parLapply) turbo logical. TRUE, (parts ) paths searched twice () unnecessarily, thus yielding significant potential speed-gain. However, checking whether search arrived point already comes slight computational overhead. Accordingly, turbo=TRUE, total search time might fact higher turbo=FALSE. happens estimation fast, say, less quarter second. Hence default FALSE tol numeric value (default = 1e-07). tolerance detecting linear dependencies columns regressors (see qr function). used LAPACK FALSE (default) LAPACK logical. TRUE, use LAPACK. FALSE (default), use LINPACK (see qr function) max.regs integer. maximum number regressions along deletion path. recommended altered print.searchinfo logical. TRUE (default), print returned whenever simiplification along new path started, whenever regressors dropped due exact multicolinearity plot NULL logical. TRUE, fitted values residuals final model plotted model selection. NULL (default), value set options determines whether plot produced . alarm logical. TRUE, sound emitted (order alert user) model selection ends ... arguments passed methods","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indicator Saturation — isat","text":"Multi-path indicator saturation using impulses (IIS), step-shifts (SIS), trend-indicators (TIS). Indicators partitioned sequential blocks (beta version 0.7) block intervals defined ratio variables observations block specified maximum block size. Indicators selected using getsm function. Retained indicators block combined re-selected . Fixed covariates selected can included regression model either mxreg matrix, auto-regressive terms ar specification. See Hendry, Johansen Santos (2007) Castle, Doornik, Hendry, Pretis (2015)","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicator Saturation — isat","text":"list class 'isat'","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indicator Saturation — isat","text":"Castle, Jennifer, L., Doornik, Jurgen, ., Hendry, David F., Pretis, Felix (2015): 'Detecting Location Shifts Model Selection Step-Indicator Saturation', Econometrics, vol 3:2, 240-264. Hendry, David, F., Johansen, Soren, Santos, Carlos (2007):  'Automatic selection indicators fully saturated regression'. Computational Statistics, vol 23:1, pp.317-335. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indicator Saturation — isat","text":"Jonas Kurle, https://www.jonaskurle.com/ Felix Pretis, http://www.felixpretis.org/ James Reade,  https://sites.google.com/site/jjamesreade/ Moritz Schwarz, https://www.inet.ox.ac.uk/people/moritz-schwarz/ Genaro Sucarrat http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicator Saturation — isat","text":"","code":"##SIS using the Nile data data(Nile) isat(Nile, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005) #>  #> SIS block 1 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> SIS block 2 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> SIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> SIS block 4 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> GETS of union of retained SIS variables...  #> 2 path(s) to search #> Searching:  #> 1  #> 2  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM  #>  #> Date: Sat Jul 27 15:29:56 2024  #> Dependent var.: y  #> Method: Ordinary Least Squares (OLS) #> Variance-Covariance: Ordinary  #> No. of observations (mean eq.): 100  #> Sample: 1871 to 1970  #>  #> SPECIFIC mean equation: #>  #>             coef std.error  t-stat   p-value     #> mconst  1097.750    23.136 47.4475 < 2.2e-16 *** #> sis1899 -250.607    40.073 -6.2538 1.108e-08 *** #> sis1913 -391.143   126.722 -3.0866  0.002646 **  #> sis1914  401.579   123.494  3.2518  0.001583 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Diagnostics and fit: #>  #>                    Chi-sq df p-value #> Ljung-Box AR(1)   1.84134  1  0.1748 #> Ljung-Box ARCH(1) 0.02176  1  0.8827 #>                            #> SE of regression  122.4248 #> R-squared           0.4925 #> Log-lik.(n=100)  -620.6436  ##SIS using the Nile data in an autoregressive model #isat(Nile, ar=1:2, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005)  ##HP Data ##load Hoover and Perez (1999) data: #data(hpdata)  ##make quarterly data-matrix of zoo type ##(GCQ = personal consumption expenditure): #y <- zooreg(hpdata$GCQ, 1959, frequency=4)  ##transform data to log-differences: #dlogy <- diff(log(y))  ##run isat with step impulse saturation on four ##lags and a constant 1 percent significance level: #isat(dlogy, ar=1:4, sis=TRUE, t.pval =0.01)  ##Example with additional covariates entering through mxreg:  ##(GYDQ = disposable personal income): #x <- zooreg(hpdata$GYDQ, 1959, frequency=4)  ##transform data to log-differences: #dlogx <- diff(log(x))  ##run isat with step impulse saturation on four ##lags and a constant 1 percent significance level: #isat(dlogy, mxreg=dlogx, ar=1:4, sis=TRUE, t.pval =0.01)"},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Indicator Saturation Breakdates — isatdates","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"Takes isat object extracts break dates together estimated coefficients.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"","code":"isatdates(x)"},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"x isat object","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"function extracts breakdates determined isat iis, sis, tis, together estimated coefficients standard errors.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"Returns list three elements (one iis, sis, tis). element lists name break variable, time index break (labelled 'date'), index break date, estimated coefficient, standard error estimated coefficient, well corresponding t-statistic p-value.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isatdates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting Indicator Saturation Breakdates — isatdates","text":"","code":"###Break date extraction of the Nile data nile <- as.zoo(Nile) isat.nile <- isat(nile, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005) #>  #> SIS block 1 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> SIS block 2 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> SIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> SIS block 4 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> GETS of union of retained SIS variables...  #> 2 path(s) to search #> Searching:  #> 1  #> 2  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM  isatdates(isat.nile) #> $iis #> NULL #>  #> $sis #>    breaks date index      coef   coef.se    coef.t       coef.p #> 1 sis1899 1899    29 -250.6071  40.07294 -6.253775 1.108303e-08 #> 2 sis1913 1913    43 -391.1429 126.72175 -3.086628 2.645951e-03 #> 3 sis1914 1914    44  401.5789 123.49408  3.251807 1.582717e-03 #>  #> $tis #> NULL #>"},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeated Impulse Indicator Saturation — isatloop","title":"Repeated Impulse Indicator Saturation — isatloop","text":"Runs isat repeatedly pre-specified significance levels yield multiple iterations used inoutlierscaletest.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeated Impulse Indicator Saturation — isatloop","text":"","code":"isatloop(num=c(seq(from=20, to=1, by=-1)), t.pval.spec = FALSE,     print=FALSE, y, ar=NULL, iis=TRUE, sis=FALSE, ...)"},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeated Impulse Indicator Saturation — isatloop","text":"num numeric, target expected number outliers null hypothesis, target proportion outliers t.pval.spec==TRUE t.pval.spec logical, TRUE, num specifies proportion rather number targeted outliers print logical, TRUE, iterations printed y numeric vector, time-series zoo object. Missing values beginning end series allowed, removed na.trim command ar integer vector, say, c(2,4) 1:4. AR-lags include mean specification iis logical, whether use iis sis logical, whether use sis, default FALSE ... argument isat can also used isatloop","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeated Impulse Indicator Saturation — isatloop","text":"function repeatedly runs isat detecting outliers model y different chosen target levels significance speciefied num.  output function used input outlierscaletest function. additional arguments isat can passed isatloop.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeated Impulse Indicator Saturation — isatloop","text":"Returns list two items. first item number observations. second item dataframe containing expected observed proportion (number outliers) specified significance level selection.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Repeated Impulse Indicator Saturation — isatloop","text":"Jiao, X. & Pretis, F. (2019). Testing Presence Outliers Regression Models. Discussion Paper. Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeated Impulse Indicator Saturation — isatloop","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isatloop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeated Impulse Indicator Saturation — isatloop","text":"","code":"###Repeated isat models using the Nile dataset   ### where p-values are chosen such that the expected number of outliers under the null   ### corresponds to 1, 2, 3, 4 and 5.   nile <- as.zoo(Nile)   isat.nile.loop <- isatloop(y=nile, iis=TRUE, num=c(1,2, 3, 4, 5)) #>  #> IIS block 1 of 4: #> 12 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #>  #> IIS block 2 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM #>  #> IIS block 1 of 4: #> 14 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #>  #> IIS block 2 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM #>  #> IIS block 1 of 4: #> 15 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #>  #> IIS block 2 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM #>  #> IIS block 1 of 4: #> 19 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #>  #> IIS block 2 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM #>  #> IIS block 1 of 4: #> 21 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #>  #> IIS block 2 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 3 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM"},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicator Saturation Test — isattest","title":"Indicator Saturation Test — isattest","text":"Takes 'isat' object returned isat function input returns results hypothesis test time-varying intercept long-run equilibrium specified null-hypothesis chosen level significance - see Pretis (2015).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicator Saturation Test — isattest","text":"","code":"isattest(x, hnull=0, lr=FALSE, ci.pval=0.99, plot=NULL, plot.turn=FALSE,     conscorr=FALSE, effcorr=FALSE, mcor = 1, biascorr=FALSE, mxfull = NULL,     mxbreak=NULL)"},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicator Saturation Test — isattest","text":"x 'gets' object obtained isat function hnull numeric. null-hypothesis value tested . lr logical. TRUE 'x' contains autoregressive elements, isattest tests long-run equilibrium path. See Pretis (2015). ci.pval numeric 0 1. Default 0.99, level significance confidence interval test 'hnull'. plot logical. TRUE, plot showing coefficient path bias relative 'hnull' shown. plot.turn logical. TRUE, plot output adds time breaks plot showing bias relative 'hnull'. biascorr logical. TRUE, coefficient path bias-corrected using biascorr. valid non-dynamic test without additional covariates. conscorr logical. TRUE Johansen Nielsen (2016) impulse-indicator consistency correction applied estimated residual variance. effcorr logical. TRUE Johansen Nielsen (2016) m-step efficiency correction applied estimated standard errors `fixed' regressors. mcor integer. m-step efficiency correction factor, m=mcor. mxfull string. name full-sample variable constructing coefficient path user-specified break variables. mxbreak string. name break variables used construct coefficient path user-specified break variables.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indicator Saturation Test — isattest","text":"function tests coefficient path (long-run equilibrium path) specified null hypothesis chosen level significance. conducted isat model forecast error relative forecast differential, corresponds test time-varying predictive accuracy Pretis (2015). resulting output plot shows coefficient path top panel ('hnull' plotted dotted lines), bias (significant difference relative 'hnull') lower panel. mxfull mxbreak specified, function tests coefficient path user-specified variable, mxfull denotes ful-sample variable name, mxbreak variables added. correct -estimation residual variance, argument conscorr implements Johansen Nielsen (2016) consistency correction, effcorr adds efficiency correction standard errors fixed regressors selected .","code":""},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicator Saturation Test — isattest","text":"Tx4 matrix (T = number observations) first two columns denote confidence interval coefficient path (long-run equilibrium path 'lr=TRUE'). third fourth column denote bias coefficient path relative chosen null-hypothesis, 'bias.high' denotes bias series tested hypothesized value, 'bias.low' denotes bias series tested significantly hypothesized value.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indicator Saturation Test — isattest","text":"Johansen, S., & Nielsen, B. (2016): 'Asymptotic theory outlier detection algorithms linear time series regression models.' Scandinavian Journal Statistics, 43(2), 321-348. Pretis, F. (2015): 'Testing time-varying predictive accuracy using bias-corrected indicator saturation'. Oxford Department Economics Discussion Paper. Hendry, David, F., Johansen, Soren, Santos, Carlos (2007):  'Automatic selection indicators fully saturated regression'. Computational Statistics, vol 23:1, pp.317-335.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indicator Saturation Test — isattest","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isattest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicator Saturation Test — isattest","text":"","code":"##Using artificial data: #set.seed(123) #d <- matrix(0,100,1) #d[35:55] <- 1 #e <- rnorm(100, 0, 1) #y <- d*2  +e  #plot(y, type=\"l\")  ##Static Test against hnull=0 using bias-correction:  #ys <- isat(y, sis=TRUE, iis=FALSE, tis=FALSE, t.pval=0.01) #isattest(ys, hnull=0, lr=FALSE, ci.pval = 0.99, plot.turn = FALSE, biascorr=TRUE)  ##Dynamic Test of the long-run equilibrium against hnull=2 with breakpoints ##labelled in the plot:  #ys <- isat(y, sis=TRUE, iis=FALSE, tis=FALSE, t.pval=0.01, ar=1:2) #isattest(ys, hnull=2, lr=TRUE, ci.pval = 0.99, plot.turn = TRUE, biascorr=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the coefficient path — isatvar","title":"Variance of the coefficient path — isatvar","text":"Takes 'isat' object returned isat function input returns coefficient path constant (long-run equilibrium 'lr' specified) together approximate variance standard errors. mxfull mxbreak specified, function returns coefficient path user-specified variable.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of the coefficient path — isatvar","text":"","code":"isatvar(x, lr=FALSE, conscorr=FALSE, effcorr=FALSE, mcor = 1,      mxfull = NULL, mxbreak=NULL)"},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of the coefficient path — isatvar","text":"x 'gets' object obtained isat function lr logical. TRUE 'x' contains autoregressive elements, isatvar also returns long-run equilibrium coefficient path variance standard deviation. See Pretis (2015). conscorr logical. TRUE Johansen Nielsen (2016) impulse-indicator consistency correction applied estimated residual variance. effcorr logical. TRUE Johansen Nielsen (2016) m-step efficiency correction applied estimated standard errors `fixed' regressors. mcor integer. m-step efficiency correction factor, m=mcor. mxfull string. name full-sample variable constructing coefficient path user-specified break variables. mxbreak string. name break variables used construct coefficient path user-specified break variables.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance of the coefficient path — isatvar","text":"function computes approximate variance standard errors intercept term structural breaks determined isat. permits hypothesis testing plotting approximate confidence intervals intercept presence structural breaks. dynamic autoregressive models isat lr argument returns time-varying long-run equilibrium together approximate variance standard errors. mxfull mxbreak specified, function returns coefficient path user-specified variable, mxfull denotes ful-sample variable name, mxbreak variables added. correct -estimation residual variance, argument conscorr implements Johansen Nielsen (2016) consistency correction, effcorr adds efficiency correction standard errors fixed regressors selected .","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the coefficient path — isatvar","text":"lr=FALSE: Tx4 matrix (T = number observations) first column denotes coefficient path relative full sample coefficient, second column coefficient path intercept, third approximate variance coefficient path, fourth column approximate standard errors coefficient path. lr=TRUE: Tx7 matrix first four columns identical lr=FALSE case, additional columns denote long-run equilibrium coefficient path, together approximate variance standard errors long-run equilibrium coefficient path.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variance of the coefficient path — isatvar","text":"Pretis, F. (2015): 'Testing time-varying predictive accuracy using bias-corrected indicator saturation'. Oxford Department Economics ???orking Paper. Johansen, S., & Nielsen, B. (2016): 'Asymptotic theory outlier detection algorithms linear time series regression models.' Scandinavian Journal Statistics, 43(2), 321-348. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance of the coefficient path — isatvar","text":"Felix Pretis, http://www.felixpretis.org/ James Reade, https://sites.google.com/site/jjamesreade/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isatvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the coefficient path — isatvar","text":"","code":"##Variance in presence of a break #nile <- as.zoo(Nile) #isat.nile <- isat(nile, sis=TRUE, iis=FALSE, plot=FALSE, t.pval=0.005) #var <- isatvar(isat.nile)  #plot(nile) #lines(isat.nile$mean.fit, col=\"red\") #lines(isat.nile$mean.fit + 2*var$const.se, col=\"blue\", lty=3) #lines(isat.nile$mean.fit - 2*var$const.se, col=\"blue\", lty=3)  ##Variance when there is no break #set.seed(1) #x <- as.zoo(rnorm(100, 0, 1)) #isat.x <- isat(x, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005) #var.x <- isatvar(isat.x)  #plot(x) #lines(isat.x$mean.fit, col=\"red\") #lines(isat.x$mean.fit + 2*var.x[,2], col=\"blue\", lty=3) #lines(isat.x$mean.fit - 2*var.x[,2], col=\"blue\", lty=3)  ##Variance of the long-run equilibrium coefficient path  #nile <- as.zoo(Nile) #isat.nile <- isat(nile, sis=TRUE, iis=FALSE, plot=TRUE, t.pval=0.005, ar=1:2) #var <- isatvar(isat.nile, lr=TRUE)"},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":null,"dir":"Reference","previous_headings":"","what":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"Takes isat object corrects estimates error variance estimated standard errors 'forced' regressors.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"","code":"isatvarcorrect(x, mcor=1)"},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"x isat object mcor integer, number iterations correction. Default = 1.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"Impulse indicator saturation results -estimation error variance well variance regressors selected . magnitude inconsistency increases p-value selection (t.pval). function takes isat object applies impulse indicator consistency (isvarcor) efficiency correction (isvareffcor) estimated error variance estimated variance regressors selected . See Johansen Nielsen (2016a) (2016b).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"Returns isat object estimated standard errors, t-statistics, p-values, standard error regression, log-likelihood consistency efficiency corrected using impulse indicator saturation (iis=TRUE).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"Johansen, S., & Nielsen, B. (2016a). Asymptotic theory outlier detection algorithms linear time series regression models. Scandinavian Journal Statistics, 43(2), 321-348. Johansen, S., & Nielsen, B. (2016b). Rejoinder: Asymptotic Theory Outlier Detection Algorithms Linear. Scandinavian Journal Statistics, 43(2), 374-381. Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isatvarcorrect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consistency and Efficiency Correction for Impulse Indicator Saturation — isatvarcorrect","text":"","code":"###Consistency and Efficiency Correction of Impulse Indicator Estimates nile <- as.zoo(Nile) isat.nile <- isat(nile, sis=FALSE, iis=TRUE, plot=TRUE, t.pval=0.1) #>  #> IIS block 1 of 4: #> 9 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #>  #> IIS block 2 of 4: #> 23 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #>  #> IIS block 3 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM  isat.nile.corrected <- isatvarcorrect(isat.nile)  isat.nile$sigma2 #> [1] 13973.97 isat.nile.corrected$sigma2 #> [1] 22429.57"},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":null,"dir":"Reference","previous_headings":"","what":"IIS Consistency Correction — isvarcor","title":"IIS Consistency Correction — isvarcor","text":"Consistency correction estimate residual variance using impulse indicator saturation.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IIS Consistency Correction — isvarcor","text":"","code":"isvarcor(t.pval, sigma)"},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIS Consistency Correction — isvarcor","text":"t.pval numeric value. p-value selection impulse indicator saturation model. sigma numeric value. estimated standard deviation residuals impulse indicator saturation model.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IIS Consistency Correction — isvarcor","text":"data frame containing corrected standard deviation $sigma.cor correction factor used $corxi","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IIS Consistency Correction — isvarcor","text":"Johansen Nielsen (2016) impulse-indicator consistency correction estimated residual standard deviation.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IIS Consistency Correction — isvarcor","text":"Johansen, S., & Nielsen, B. (2016): 'Asymptotic theory outlier detection algorithms linear time series regression models.' Scandinavian Journal Statistics, 43(2), 321-348. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IIS Consistency Correction — isvarcor","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isvarcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IIS Consistency Correction — isvarcor","text":"","code":"isvarcor(t.pval=0.05, sigma=2) #>   sigma.cor    corxi #> 1  2.295908 1.147954"},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":null,"dir":"Reference","previous_headings":"","what":"IIS Efficiency Correction — isvareffcor","title":"IIS Efficiency Correction — isvareffcor","text":"Efficiency correction estimates coefficient standard errors fixed regressors.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IIS Efficiency Correction — isvareffcor","text":"","code":"isvareffcor(t.pval, se, m=1)"},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IIS Efficiency Correction — isvareffcor","text":"t.pval numeric value. p-value selection impulse indicator saturation model. se numeric value vector. estimated standard errors coefficients fixed regressors impulse indicator saturation model. m integer. m-step correction factor.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IIS Efficiency Correction — isvareffcor","text":"data frame containing corrected standard deviation $se.cor correction factor used $eta.m","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IIS Efficiency Correction — isvareffcor","text":"Johansen Nielsen (2016) impulse-indicator efficiency correction estimated standard errors fixed regressors impulse indicator models.","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IIS Efficiency Correction — isvareffcor","text":"Johansen, S., & Nielsen, B. (2016): 'Asymptotic theory outlier detection algorithms linear time series regression models.' Scandinavian Journal Statistics, 43(2), 321-348. Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IIS Efficiency Correction — isvareffcor","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/isvareffcor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IIS Efficiency Correction — isvareffcor","text":"","code":"isvareffcor(t.pval=0.05, se=2, m=1) #>     se.cor    eta.m #> 1 2.211732 1.105866"},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of a logit model — logit","title":"Estimation of a logit model — logit","text":"Maximum Likelihood (ML) estimation logit model.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of a logit model — logit","text":"","code":"logit(y, x, initial.values = NULL, lower = -Inf, upper = Inf,      method = 2, lag.length = NULL, control = list(), eps.tol = .Machine$double.eps,      solve.tol = .Machine$double.eps )"},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of a logit model — logit","text":"y numeric vector, binary process x numeric matrix, regressors initial.values NULL numeric vector initial parameter values passed optimisation routine, nlminb. NULL, default, values chosen automatically lower numeric vector, either length 1 number parameters estimated, see nlminb upper numeric vector, either length 1 number parameters estimated, see nlminb method integer determines expression coefficient-covariance, see \"details\" lag.length NULL integer determines lag-length used robust coefficient covariance. lag.length integer, ignored unless method = 3 control list passed control argument nlminb eps.tol numeric, small value ensures fitted zero-probabilities small log-transformation applied computing log-likelihood solve.tol numeric value passed tol argument solve, called whenever coefficient-coariance matrix computed. value controls toleranse detecting linear dependence columns inverting matrix","code":""},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of a logit model — logit","text":"details moment.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of a logit model — logit","text":"list.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of a logit model — logit","text":"references moment.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of a logit model — logit","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of a logit model — logit","text":"","code":"##no examples for the moment"},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate an autoregressive logit model with covariates — logitx","title":"Estimate an autoregressive logit model with covariates — logitx","text":"Estimate dynamic Autoregressive (AR) logit model covariates ('X') maximising logit likelihood.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate an autoregressive logit model with covariates — logitx","text":"","code":"logitx(y, intercept = TRUE, ar = NULL, ewma = NULL, xreg = NULL,      vcov.type = c(\"ordinary\", \"robust\"), lag.length = NULL,      initial.values = NULL, lower = -Inf, upper = Inf, control = list(),      eps.tol = .Machine$double.eps, solve.tol = .Machine$double.eps,     singular.ok = TRUE, plot = NULL)  dlogitx(y, ...)"},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate an autoregressive logit model with covariates — logitx","text":"y binary numeric vector, time-series zoo object. Missing values beginning end series allowed, removed na.trim command intercept logical. TRUE, default, includes intercept logit specification, whereas FALSE ar either NULL (default) integer vector, say, c(2,4) 1:4. AR-lags include logit specification. NULL, lags included ewma either NULL (default) list arguments sent eqwma function. latter case lagged moving average y included regressor xreg either NULL (default) numeric vector matrix, say, zoo object, covariates. Note , y xreg zoo objects, samples chosen match vcov.type character vector length 1, either \"ordinary\" (default) \"robust\". Partial matching allowed. \"ordinary\", ordinary variance-covariance matrix used inference. \"robust\", robust coefficient-covariance Newey West (1987) type used lag.length NULL integer determines lag-length used robust coefficient covariance. lag.length integer, ignored unless method = 3 initial.values NULL numeric vector initial parameter values passed optimisation routine, nlminb. NULL, default, values chosen automatically lower numeric vector, either length 1 number parameters estimated, see nlminb upper numeric vector, either length 1 number parameters estimated, see nlminb control list passed control argument nlminb eps.tol numeric, small value ensures fitted zero-probabilities small log-transformation applied computing log-likelihood solve.tol numeric value passed tol argument solve, called whenever coefficient-coariance matrix computed. value controls toleranse detecting linear dependence columns inverting matrix singular.ok logical. TRUE (default), regressors causing singularity dropped (using dropvar) estimation. FALSE, singularity returns error plot NULL logical. TRUE, plot produced. NULL (default), value set options determines whether plot produced . ... arguments passed logitx","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate an autoregressive logit model with covariates — logitx","text":"function estimates dynamic Autoregressive (AR) logit model (optionally) covariates ('X') maximising logit likelihood. estimated model augmented version model considered Kauppi Saikkonen (2008). Also, considered estimation maximisation probit likelihood. , contrast, estimation maximisation logit likelihood.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate an autoregressive logit model with covariates — logitx","text":"list class 'logitx'.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate an autoregressive logit model with covariates — logitx","text":"Heikki Kauppi Pentti Saikkonen (2008): 'Predicting U.S. Recessions Dynamic Binary Response Models'. Review Economics Statistics 90, pp. 777-791 Whitney K. Newey Kenned D. West (1987): 'Simple, Positive Semi-Definite, Heteroskedasticity Autocorrelation Consistent Covariance Matrix', Econometrica 55, pp. 703-708","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate an autoregressive logit model with covariates — logitx","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/logitx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate an autoregressive logit model with covariates — logitx","text":"","code":"##simulate from ar(1): set.seed(123) #for reproducibility y <- logitxSim(100, ar=0.3)  ##estimate ar(1) and store result: mymod <- logitx(y, ar=1)  ##estimate ar(4) and store result: mymod <- logitx(y, ar=1:4)  ##create some more data, estimate new model: x <- matrix(rnorm(5*100), 100, 5) mymod <- logitx(y, ar=1:4, xreg=x)"},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from a dynamic logit-x model — logitxSim","title":"Simulate from a dynamic logit-x model — logitxSim","text":"Simulate dynamic Autoregressive (AR) logit model covariates ('X'). model essentially logit-version model Kauppi Saikkonen (2008).","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from a dynamic logit-x model — logitxSim","text":"","code":"logitxSim(n, intercept = 0, ar = NULL, xreg = NULL, verbose = FALSE,      as.zoo = TRUE)  dlogitxSim(n, ...)"},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from a dynamic logit-x model — logitxSim","text":"n integer, number observations generate intercept numeric, value intercept logit specification ar NULL numeric vector autoregressive parameters xreg NULL numeric vector values X-term verbose logical. FALSE, binary process (vector) returned. TRUE, matrix simulated information returned (binary process, probabilities, etc.) .zoo logical. TRUE, returned object - vector matrix - class zoo ... arguments passed logitxSim","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from a dynamic logit-x model — logitxSim","text":"details, moment.","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from a dynamic logit-x model — logitxSim","text":"vector matrix, depending whether verbose FALSE TRUE, class zoo, depending whether .zoo TRUE FALSE","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from a dynamic logit-x model — logitxSim","text":"Heikki Kauppi Penti Saikkonen (2008): 'Predicting U.S. Recessions Dynamic Binary Response Models'. Review Economic Statistics 90, pp. 777-791","code":""},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate from a dynamic logit-x model — logitxSim","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/logitxSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from a dynamic logit-x model — logitxSim","text":"","code":"##simulate from ar(1): set.seed(123) #for reproducibility y <- logitxSim(100, ar=0.3)  ##more output (value, probability, logit): set.seed(123) #for reproducibility y <- logitxSim(100, ar=0.3, verbose=TRUE)"},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from a Multivariate Normal Distribution — mvrnormsim","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"Produces one samples specified multivariate normal distribution. Used   inoutlierscaletest.","code":""},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"","code":"mvrnormsim(n = 1, mu, Sigma, tol = 1e-6, empirical = FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"n number samples required. mu vector giving means variables. Sigma positive-definite symmetric matrix specifying covariance matrix variables. tol tolerance (relative largest variance) numerical lack positive-definiteness Sigma. empirical logical. true, mu Sigma specify empirical population mean covariance matrix.","code":""},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"n = 1 vector length mu, otherwise n length(mu) matrix one sample row.","code":""},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"Original function mvrnorm developed Venables, W. N. & Ripley. package MASS, https://CRAN.R-project.org/package=MASS.","code":""},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"Venables, W. N. & Ripley, B. D. (2019): 'MASS: Support Functions Datasets Venables Ripley's MASS'. https://CRAN.R-project.org/package=MASS Venables, W. N. & Ripley, B. D. (2002) Modern Applied Statistics S. Fourth Edition. Springer, New York. ISBN 0-387-95457-0","code":""},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"Venables, W. N. & Ripley, modifications Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/mvrnormsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from a Multivariate Normal Distribution — mvrnormsim","text":"","code":"Sigma <- matrix(c(3,2,1,7),2,2) mvrnormsim(n=2, mu=c(1,2), Sigma) #>            [,1]     [,2] #> [1,]  1.3295999 2.630640 #> [2,] -0.8938529 2.698007"},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS estimation — ols","title":"OLS estimation — ols","text":"OLS estimation QR decomposition , options, computation variance- covariance matrices","code":""},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS estimation — ols","text":"","code":"ols(y, x, untransformed.residuals=NULL, tol=1e-07, LAPACK=FALSE, method=3,    variance.spec=NULL, ...)"},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS estimation — ols","text":"y numeric vector, regressand x numeric matrix, regressors untransformed.residuals NULL (default) , ols used method=6, numeric vector containing untransformed residuals tol numeric value. tolerance detecting linear dependencies columns regressors, see qr function. used LAPACK FALSE LAPACK logical, TRUE FALSE (default). true use LAPACK otherwise use LINPACK, see qr function method integer, 1 6, determines estimation method variance.spec NULL list items specifies log-variance model estimated, see arx ... arguments (currently ignored)","code":""},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OLS estimation — ols","text":"method = 1 method = 2 returns OLS coefficient estimates together QR- information, former slightly faster. method=3 returns, addition, ordinary variance-covariance matrix OLS estimator. method=4 returns White (1980) heteroscedasticity robust variance-covariance matrix addition information returned method=3, whereas method=5 except variance-covariance matrix now Newey West (1987). method=6 undertakes OLS estimation log-variance model, see Pretis, Reade Sucarrat (2018, Section 4). Alternatively, method 1 5, log-variance model also estimated variance.spec NULL.","code":""},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS estimation — ols","text":"list items depending method","code":""},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"OLS estimation — ols","text":"W. Newey K. West (1987): 'Simple Positive Semi-Definite, Heteroskedasticity Autocorrelation Consistent Covariance Matrix', Econometrica 55, pp. 703-708. F. Pretis, J. Reade G. Sucarrat (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks', Journal Statistical Software 86, Issue 3, pp. 1-44, DOI: https://doi.org/10.18637/jss.v086.i03 H. White (1980): 'Heteroskedasticity-Consistent Covariance Matrix Direct Test Heteroskedasticity', Econometrica 48, pp. 817-838.","code":""},{"path":"http://moritzschwarz.org/gets/reference/ols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"OLS estimation — ols","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum and Sup Scaling Outlier Tests — outlierscaletest","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"Computes Sum Supremum Scaling Tests overall presence outliers based Jiao Pretis (2019).","code":""},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"","code":"outlierscaletest(x, nsim = 10000)"},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"x list, output isatloop function nsim integer, number replications simulate critical values Sup test","code":""},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"function takes output isatloop function computes Scaling Sum Supremum Tests presence outliers Jiao Pretis (2019). test compares expected observed proportion outliers range different significance levels selection specified isatloop. Sum test compares sum deviations standard normal distribution, Sup test compares supremum deviations critical values simulated nsim replications. null hypothesis observed proportion outliers scales proportion outliers null outliers.","code":""},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"Returns list two htest objects. first providing results Sum test sum deviation outliers standard normal distribution. second providing results supremum deviation outliers simulated critical values.","code":""},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"Jiao, X. & Pretis, F. (2019). Testing Presence Outliers Regression Models. Discussion Paper. Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"Xiyu Jiao, & Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/outlierscaletest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum and Sup Scaling Outlier Tests — outlierscaletest","text":"","code":"###Repeated isat models using the Nile dataset   ### where p-values are chosen such that the expected number of outliers under the null   ### corresponds to 1, 2, ..., 20. Then computing the Outlier Scaling Tests:      #nile <- as.zoo(Nile)   #isat.nile.loop <- isatloop(y=nile)   #outlierscaletest(isat.nile.loop)"},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":null,"dir":"Reference","previous_headings":"","what":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"Tests whether proportion (number) outliers detected using impulse indicator saturation different proportion (number) outliers expected null hypothesis outliers using Jiao Pretis (2019) proportion count outlier tests.","code":""},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"","code":"outliertest(x, noutl=NULL, t.pval=NULL, T=NULL,    m=1, infty=FALSE, alternative=\"two.sided\")"},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"x isat object noutl integer, number detected outliers isat object provided .e. x=NULL t.pval numeric, 0 1. Selection p-value used indicator saturation isat object provided .e. x=NULL T integer, sample sized used indicator saturation isat object provided .e. x=NULL m integer, number iterations variance computation, default=1 infty logical, argument used variance computation alternative \"two-sided\", \"less\", \"greater\", alternative hypothesis outlier test.","code":""},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"function computes estimated proportion outliers (gauge) based impulse indicator saturation constructs proportion count outlier test statistics Jiao Pretis (2019). null hypothesis proportion (count) outliers different proportion (count) outliers detected null hypothesis outliers. first test compares estimated proportion outliers scaled estimated variance standard normal distribution. second test compares number outliers Poisson distribution.   isat object provided x, function automatically extracts detected impulses computes estimated outlier proportion. isat object provided x=NULL, tests can conducted manually providing number detected outliers (noutl), sample size (T), chosen level signficance used detect outliers (t.pval).","code":""},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"Returns list two htest objects. first providing results test proportion outliers standard normal distribution. second providing results number outliers Poisson distribution.","code":""},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"Jiao, X. & Pretis, F. (2019). Testing Presence Outliers Regression Models. Discussion Paper. Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"Xiyu Jiao, & Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/outliertest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jiao and Pretis Outlier Proportion and Count Tests — outliertest","text":"","code":"###Testing the Presence of Outliers in the Nile Data   nile <- as.zoo(Nile)   isat.nile <- isat(nile, sis=FALSE, iis=TRUE, plot=TRUE, t.pval=0.1) #>  #> IIS block 1 of 4: #> 9 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #>  #> IIS block 2 of 4: #> 23 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #>  #> IIS block 3 of 4: #> 24 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #>  #> IIS block 4 of 4: #> 25 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #> 7  #> 8  #> 9  #> 10  #> 11  #> 12  #> 13  #> 14  #> 15  #> 16  #> 17  #> 18  #> 19  #> 20  #> 21  #> 22  #> 23  #> 24  #> 25  #>  #> GETS of union of retained IIS variables...  #>  #> GETS of union of ALL retained variables... #> - All non-keep regressors significant in GUM    outliertest(isat.nile) #> $proportion #>  #> \tJiao-Pretis Outlier Proportion Test #>  #> data:  Proportion of detected outliers #> = 4.4415, p-value = 8.932e-06 #> alternative hypothesis: true  is not equal to 0.1 #> sample estimates: #> [1] 0.18 #>  #>  #> $count #>  #> \tJiao-Pretis Outlier Count Test #>  #> data:  Number of detected outliers #> = 18, p-value = 0.01705 #> alternative hypothesis: true  is not equal to 10 #> sample estimates: #> [1] 18 #>  #>       ###Testing the number of outliers when the sample is T=200,    ### with 7 detected outliers at t.pval=0.05 if no isat object is provided:   outliertest(x=NULL, noutl=7, t.pval=0.05, T=200) #> $proportion #>  #> \tJiao-Pretis Outlier Proportion Test #>  #> data:  Proportion of detected outliers #> = -1.455, p-value = 0.1457 #> alternative hypothesis: true  is not equal to 0.05 #> sample estimates: #> [1] 0.035 #>  #>  #> $count #>  #> \tJiao-Pretis Outlier Count Test #>  #> data:  Number of detected outliers #> = 7, p-value = 0.4287 #> alternative hypothesis: true  is not equal to 10 #> sample estimates: #> [1] 7 #>  #>"},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"Extraction functions objects class 'arx', 'gets' 'isat'","code":""},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"","code":"paths(object, ...) terminals(object, ...) rsquared(object, adjusted=FALSE, ...)"},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"object object class 'arx', 'gets' 'isat' adjusted logical. TRUE adjusted R-squared returned ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"paths terminals can applied objects class 'gets' 'isat'","code":""},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"paths: list paths searched (number refers regressor GUM) terminals: list terminal models (number refers regressor GUM) rsquared: numeric, R-squared regression, adjusted R-squared adjusted set TRUE","code":""},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction functions for 'arx', 'gets' and 'isat' objects — paths","text":"","code":"##Simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 50)  ##Simulate four independent Gaussian regressors: xregs <- matrix(rnorm(4*50), 50, 4)  ##estimate an AR(2) with intercept and four conditioning ##regressors in the mean: mymod <- arx(y, mc=TRUE, ar=1:2, mxreg=xregs) rsquared(mymod) #> [1] 0.1520805 rsquared(mymod, adjusted=TRUE) #> [1] 0.02799468  ##General-to-Specific (GETS) modelling of the mean: meanmod <- getsm(mymod) #>  #> GUM mean equation: #>  #>        reg.no. keep      coef std.error  t-stat p-value   #> mconst       1    0  0.042884  0.141657  0.3027 0.76362   #> ar1          2    0  0.345223  0.156817  2.2014 0.03339 * #> ar2          3    0  0.052468  0.156733  0.3348 0.73951   #> mxreg1       4    0 -0.140760  0.165009 -0.8530 0.39859   #> mxreg2       5    0 -0.089124  0.145349 -0.6132 0.54315   #> mxreg3       6    0 -0.077072  0.145620 -0.5293 0.59947   #> mxreg4       7    0 -0.225367  0.169838 -1.3270 0.19187   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  #> Diagnostics: #>  #>                    Chi-sq df p-value #> Ljung-Box AR(3)   2.97870  3 0.39492 #> Ljung-Box ARCH(1) 0.14075  1 0.70754 #>  #> 6 path(s) to search #> Searching:  #> 1  #> 2  #> 3  #> 4  #> 5  #> 6  #>  #>   Path 1: 1 3 6 5 4 7  #>   Path 2: 3 1 6 5 4 7  #>   Path 3: 4 1 3 6 5 7  #>   Path 4: 5 3 1 6 4 7  #>   Path 5: 6 3 1 5 4 7  #>   Path 6: 7 1 3 6 4 5  #>  #> Terminal models: #>  #>                 info(sc)      logl  n k #> spec 1 (1-cut): 2.749419 -64.05045 48 1 #>  #> Retained regressors (final model): #>  #>   ar1  rsquared(meanmod) #> [1] 0.09401861 rsquared(meanmod, adjusted=TRUE) #> [1] 0.09401861  ##extract the paths searched: paths(meanmod) #> [[1]] #> [1] 1 3 6 5 4 7 #>  #> [[2]] #> [1] 3 1 6 5 4 7 #>  #> [[3]] #> [1] 4 1 3 6 5 7 #>  #> [[4]] #> [1] 5 3 1 6 4 7 #>  #> [[5]] #> [1] 6 3 1 5 4 7 #>  #> [[6]] #> [1] 7 1 3 6 4 5 #>   ##extract the terminal models: terminals(meanmod) #> [[1]] #> [1] 2 #>"},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":null,"dir":"Reference","previous_headings":"","what":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"Auxiliary function generates periodicity dummies (e.g. seasonal dummies) regular time series. function similar , general , seasonaldummy function forecast package.","code":""},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"","code":"periodicdummies(x, values=1)"},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"x regular time series (vector matrix) values numeric length 1 (default) numeric vector length equal frequency(x)","code":""},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"matrix class zoo periodicity dummies","code":""},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/periodicdummies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make matrix of periodicity (e.g. seasonal) dummies — periodicdummies","text":"","code":"##quarterly dummies: x <- zooreg(rnorm(30), start=2000, frequency=4) periodicdummies(x) #>         dum1 dum2 dum3 dum4 #> 2000 Q1    1    0    0    0 #> 2000 Q2    0    1    0    0 #> 2000 Q3    0    0    1    0 #> 2000 Q4    0    0    0    1 #> 2001 Q1    1    0    0    0 #> 2001 Q2    0    1    0    0 #> 2001 Q3    0    0    1    0 #> 2001 Q4    0    0    0    1 #> 2002 Q1    1    0    0    0 #> 2002 Q2    0    1    0    0 #> 2002 Q3    0    0    1    0 #> 2002 Q4    0    0    0    1 #> 2003 Q1    1    0    0    0 #> 2003 Q2    0    1    0    0 #> 2003 Q3    0    0    1    0 #> 2003 Q4    0    0    0    1 #> 2004 Q1    1    0    0    0 #> 2004 Q2    0    1    0    0 #> 2004 Q3    0    0    1    0 #> 2004 Q4    0    0    0    1 #> 2005 Q1    1    0    0    0 #> 2005 Q2    0    1    0    0 #> 2005 Q3    0    0    1    0 #> 2005 Q4    0    0    0    1 #> 2006 Q1    1    0    0    0 #> 2006 Q2    0    1    0    0 #> 2006 Q3    0    0    1    0 #> 2006 Q4    0    0    0    1 #> 2007 Q1    1    0    0    0 #> 2007 Q2    0    1    0    0  ##monthly dummies: y <- zooreg(rnorm(30), start=c(2000,1), frequency=12) periodicdummies(y) #>          dum1 dum2 dum3 dum4 dum5 dum6 dum7 dum8 dum9 dum10 dum11 dum12 #> Jan 2000    1    0    0    0    0    0    0    0    0     0     0     0 #> Feb 2000    0    1    0    0    0    0    0    0    0     0     0     0 #> Mar 2000    0    0    1    0    0    0    0    0    0     0     0     0 #> Apr 2000    0    0    0    1    0    0    0    0    0     0     0     0 #> May 2000    0    0    0    0    1    0    0    0    0     0     0     0 #> Jun 2000    0    0    0    0    0    1    0    0    0     0     0     0 #> Jul 2000    0    0    0    0    0    0    1    0    0     0     0     0 #> Aug 2000    0    0    0    0    0    0    0    1    0     0     0     0 #> Sep 2000    0    0    0    0    0    0    0    0    1     0     0     0 #> Oct 2000    0    0    0    0    0    0    0    0    0     1     0     0 #> Nov 2000    0    0    0    0    0    0    0    0    0     0     1     0 #> Dec 2000    0    0    0    0    0    0    0    0    0     0     0     1 #> Jan 2001    1    0    0    0    0    0    0    0    0     0     0     0 #> Feb 2001    0    1    0    0    0    0    0    0    0     0     0     0 #> Mar 2001    0    0    1    0    0    0    0    0    0     0     0     0 #> Apr 2001    0    0    0    1    0    0    0    0    0     0     0     0 #> May 2001    0    0    0    0    1    0    0    0    0     0     0     0 #> Jun 2001    0    0    0    0    0    1    0    0    0     0     0     0 #> Jul 2001    0    0    0    0    0    0    1    0    0     0     0     0 #> Aug 2001    0    0    0    0    0    0    0    1    0     0     0     0 #> Sep 2001    0    0    0    0    0    0    0    0    1     0     0     0 #> Oct 2001    0    0    0    0    0    0    0    0    0     1     0     0 #> Nov 2001    0    0    0    0    0    0    0    0    0     0     1     0 #> Dec 2001    0    0    0    0    0    0    0    0    0     0     0     1 #> Jan 2002    1    0    0    0    0    0    0    0    0     0     0     0 #> Feb 2002    0    1    0    0    0    0    0    0    0     0     0     0 #> Mar 2002    0    0    1    0    0    0    0    0    0     0     0     0 #> Apr 2002    0    0    0    1    0    0    0    0    0     0     0     0 #> May 2002    0    0    0    0    1    0    0    0    0     0     0     0 #> Jun 2002    0    0    0    0    0    1    0    0    0     0     0     0"},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecasting with 'arx' models — predict.arx","title":"Forecasting with 'arx' models — predict.arx","text":"Generate --sample forecasts n steps ahead objects class arx. Optionally, quantiles forecasts also returned arguments ci.levels probs specified. forecasts, confidence intervals quantiles obtained via simulation. default, 5000 simulations used, can changed via n.sim argument. Also default, simulations uses classical bootstrap sample standardised residuals. use alternative set standardised innovations, example standard normal, use innov argument. plot=TRUE, plot forecasts created.","code":""},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecasting with 'arx' models — predict.arx","text":"","code":"# S3 method for class 'arx' predict(object, spec=NULL, n.ahead=12, newmxreg=NULL,     newvxreg=NULL, newindex=NULL, n.sim=5000, innov=NULL, probs=NULL,     ci.levels=NULL, quantile.type=7, return=TRUE, verbose=FALSE,     plot=NULL, plot.options=list(), ...)"},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecasting with 'arx' models — predict.arx","text":"object object class 'arx' spec NULL (default), \"mean\", \"variance\" \"\". NULL, automatically determined whether information pertaining mean variance specification returned n.ahead integer determines many steps ahead predictions generated (default 12) newmxreg matrix n.ahead rows NCOL(mxreg) columns --sample values mxreg regressors newvxreg matrix n.ahead rows NCOL(vxreg) columns --sample values vxreg regressors newindex NULL (default) date-index zoo object returned predict.arx. NULL, function uses -sample index generate --sample index n.sim integer, number replications used generation forecasts innov NULL (default) vector length n.ahead * n.sim containing standardised errors (, zero mean unit variance) used forecast simulations. NULL, classica bootstrap procedure used draw standardised -sample residuals probs NULL (default) vector quantile-levels (values strictly 0 1) forecast distribution. NULL, quantiles returned unless ci.levels non-NULL ci.levels NULL (default) vector confidence levels (expressed values strictly 0 1) forecast distribution. upper lower values confidence interval(s) returned quantiles quantile.type integer 1 9 selects algorithm used computing quantiles, see argument type quantile return logical. TRUE (default), --sample predictions returned. value FALSE, return predictions, may interest prediction plot interest verbose logical default FALSE. TRUE, additional information (typically quantiles /simulated series) used generation forecasts returned. FALSE, forecasts returned plot NULL (default) logical. NULL, value set options$plot (see options) determines whether plot produced . TRUE, --sample forecasts plotted. plot.options list options related plotting forecasts, see 'Details' ... additional arguments","code":""},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecasting with 'arx' models — predict.arx","text":"vector class zoo containing --sample forecasts, matrix class zoo containing --sample forecasts together prediction-quantiles, NULL return=FALSE","code":""},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forecasting with 'arx' models — predict.arx","text":"plot.options argument list , optionally, can contain following arguments: keep: integer greater zero (default 12) controls number -sample actual values plot line..origin: logical. TRUE, vertical line drawn forecast origin, , last -sample observation start..origin: logical. TRUE, drawing forecast line starts actual value forecast origin dot..origin: logical. TRUE, dot drawn forecast origin hlines: numeric vector indicates draw grey horisontal grid lines col: numeric vector length two controls colour plotted lines. first value controls colour forecasts fitted values, whereas second controls colour actual values lty: numeric vector length two controls line type. first value controls line type forecast, whereas second controls line type actual fitted values lwd: integer controls width plotted lines (default 1) ylim: numeric vector length two contains limits y-axis prediction plot ylab: character controls text y-axis main: character controls text overall title legend.text: character vector length two controls forecast actual lines named referred legend plot fitted: TRUE, fitted values well actual values plotted -sample newmactual: numeric vector NULL (default). Enables plotting actual values --sample mean addition forecasts newvactual: numeric vector NULL (default). Enables plotting squared residuals ('actual values') --sample addition forecasts shades: numeric vector length length(ci.levels) contains shades grey associated confidence intervals prediction plot. shades can range 100 (white) 0 (black)","code":""},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forecasting with 'arx' models — predict.arx","text":"Felix Pretis, http://www.felixpretis.org/ James Reade, https://sites.google.com/site/jjamesreade/ Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/predict.arx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecasting with 'arx' models — predict.arx","text":"","code":"##simulate from an AR(1): set.seed(123) y <- arima.sim(list(ar=0.4), 40)  ##estimate AR(2) model with intercept: mymod <- arx(y, mc=TRUE, ar=c(1,2))  ##generate out-of-sample forecasts: predict(mymod) #>           41           42           43           44           45           46  #> -0.252438775 -0.072058217 -0.013701991  0.003911825  0.009100847  0.010615781  #>           47           48           49           50           51           52  #>  0.011056546  0.011184616  0.011221809  0.011232608  0.011235743  0.011236654   ##same, but plot the predictions in addition: #predict(mymod, plot=TRUE)  ##same, but return also the quantiles of the confidence intervals: #predict(mymod, ci.levels=c(0.50,0.90), plot=TRUE)  ##same, but with non-default levels on the confidence intervals: #predict(mymod, ci.levels=c(0.20,0.80, 0.99), plot=TRUE)  ##same, but with more confidence intervals: #predict(mymod, ci.levels=seq(0.20, 0.95, by=0.05), plot=TRUE)  ##same, but with less rugged ci's (achieved by increasing n.sim): ##predict(mymod, ci.levels=seq(0.20, 0.95, by=0.05), n.sim=50000, plot=TRUE)  ##same, but using standard normals (instead of bootstrap) in the simulations: #n.sim <- 2000 #n.ahead <- 12 #the default on n.ahead #predict(mymod, ci.levels=seq(0.20, 0.95, by=0.05), n.sim=n.sim, #  innov=rnorm(n.ahead*n.sim), plot=TRUE)  ##make x-regressors: x <- matrix(rnorm(40*3), 40, 3)  ##estimate AR(1) model with intercept and covariates: mymod <- arx(y, mc=TRUE, ar=1, mxreg=x)  ##predict up to 5 steps ahead, setting x's to 0 out-of-sample: predict(mymod, n.ahead=5, newmxreg=matrix(0,5,NCOL(x))) #>           41           42           43           44           45  #> -0.273538479 -0.109501230 -0.044875996 -0.019415799 -0.009385325   ##same, but do also plot: #predict(mymod, n.ahead=5, newmxreg=matrix(0,5,NCOL(x)), #  plot=TRUE)  ##estimate an AR(2) model w/intercept and a log-ARCH(1) specification ##on the variance: #mymodel <- arx(y, mc=TRUE, ar=1:2, arch=1)  ##generate forecasts of the conditional variances: #predict(mymodel, spec=\"variance\")  ##same, but do also plot: #predict(mymodel, spec=\"variance\", plot=TRUE)  ##illustrations of the usage of plot.options: #mymodel <- arx(y, mc=TRUE, ar=1) #predict(mymodel, plot=TRUE, plot.options=list(keep=1)) #predict(mymodel, plot=TRUE, plot.options=list(line.at.origin=TRUE)) #predict(mymodel, plot=TRUE, plot.options=list(start.at.origin=FALSE)) #predict(mymodel, plot=TRUE,  #  plot.options=list(start.at.origin=FALSE, fitted=TRUE)) #predict(mymodel, plot=TRUE, plot.options=list(dot.at.origin=FALSE)) #predict(mymodel, plot=TRUE, plot.options=list(hlines=c(-2,-1,0,1,2))) #predict(mymodel, plot=TRUE, plot.options=list(col=c(\"darkred\",\"green\"))) #predict(mymodel, plot=TRUE, plot.options=list(lty=c(3,2))) #predict(mymodel, plot=TRUE, plot.options=list(lwd=3)) #predict(mymodel, plot=TRUE, plot.options=list(ylim=c(-8,8))) #predict(mymodel, plot=TRUE, plot.options=list(ylab=\"User-specified y-axis\")) #predict(mymodel, plot=TRUE,  #  plot.options=list(main=\"User-specified overall title\")) #predict(mymodel, plot=TRUE,  #  plot.options=list(legend.text=c(\"User-specified 1\",\"User-specified 2\"))) #predict(mymodel, plot=TRUE, plot.options=list(fitted=TRUE)) #predict(mymodel, plot=TRUE, plot.options=list(newmactual=rep(0,6))) #predict(mymodel, plot=TRUE, plot.options=list(shades.of.grey=c(95,50))) #predict(mymodel, plot=TRUE, plot.options=list(shades.of.grey=c(50,95))) #invert shades"},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate LaTeX code of an estimation result — printtex","title":"Generate LaTeX code of an estimation result — printtex","text":"Convenience functions generates LaTeX-code estimation result equation-form. printtex can, principle, applied object coef, vcov logLik methods exist. Note: generated LaTeX-code contains eqnarray environment, requires amsmath package loaded preamble LaTeX document.","code":""},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate LaTeX code of an estimation result — printtex","text":"","code":"printtex(x, fitted.name=NULL, xreg.names=NULL, digits=4,       intercept=TRUE, gof=TRUE, diagnostics=TRUE, nonumber=FALSE,       nobs=\"T\", index=\"t\", dec=NULL, print.info=TRUE)   # S3 method for class 'arx' toLatex(object, ...)   # S3 method for class 'gets' toLatex(object, ...)"},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate LaTeX code of an estimation result — printtex","text":"x estimation result, e.g. arx, gets isat object object estimation result class arx gets fitted.name NULL user-specified name left-hand side variable xreg.names NULL user-specified character vector names regressors digits integer, number digits printed intercept logical numeric. argument determines whether one regressors intercept , location. TRUE, intercept assumed located coef(x)[1], hence regressor-name location 1 excluded print. FALSE, assumed intercept among regressors. numeric, assumed regressors contain intercept location equal numeric value gof logical, whether include goodness--fit print diagnostics logical, whether include diagnostics print nonumber logical, whether remove (default) equation-numbering nobs character, notation use denote number observations index NULL character, relevant fitted.name NULL, object question class arx, gets isat dec NULL character (example \",\"). latter case, attempt made replace dot separator . character dec print.info logical, whether print info start ... arguments passed printtex","code":""},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate LaTeX code of an estimation result — printtex","text":"toLatex.arx toLatex.gets simply wrappers printtex","code":""},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate LaTeX code of an estimation result — printtex","text":"LaTeX code estimation result","code":""},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate LaTeX code of an estimation result — printtex","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/printtex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate LaTeX code of an estimation result — printtex","text":"","code":"##simulate random variates, estimate model: y <- rnorm(30) mX <- matrix(rnorm(30*2), 30, 2) mymod <- arx(y, ar=1:3, mxreg=mX)  ##print latex code of estimation result: printtex(mymod) #> % Date: Sat Jul 27 15:30:05 2024  #> % LaTeX code generated in R 4.4.1 by the gets package #> % Note: The {eqnarray} environment requires the {amsmath} package #> \\begin{eqnarray} #>   \\widehat{y} &=&  - \\underset{(0.1481)}{0.0258} - \\underset{(0.1921)}{0.3498}ar1 - \\underset{(0.2189)}{0.7896}ar2 - \\underset{(0.2335)}{0.4599}ar3 - \\underset{(0.1910)}{0.0491}mxreg1 - \\underset{(0.2108)}{0.4876}mxreg2 \\\\[2mm]  #>    && R^2=0.4176 \\qquad \\widehat{\\sigma}=0.7655 \\qquad LogL=-28.0945 \\qquad T = 27 \\nonumber \\\\  #>    && \\underset{[p-val]}{ AR(4) }: \\underset{[0.8518]}{1.3561}\\qquad \\underset{[p-val]}{ ARCH(1)}:\\underset{[0.2764]}{1.1848}\\qquad \\underset{[p-val]}{ Normality }:\\underset{[0.5921]}{1.0480} \\nonumber  #> \\end{eqnarray}  ##add intercept, at the end, to regressor matrix: mX <- cbind(mX,1) colnames(mX) <- c(\"xreg1\", \"xreg2\", \"intercept\") mymod <- arx(y, mc=FALSE, mxreg=mX)  ##set intercept location to 3: printtex(mymod, intercept=3) #> % Date: Sat Jul 27 15:30:05 2024  #> % LaTeX code generated in R 4.4.1 by the gets package #> % Note: The {eqnarray} environment requires the {amsmath} package #> \\begin{eqnarray} #>   \\widehat{y} &=& \\underset{(0.1903)}{0.0886}xreg1 - \\underset{(0.1957)}{0.1390}xreg2 + \\underset{(0.1616)}{0.0175} \\\\[2mm]  #>    && R^2=0.0197 \\qquad \\widehat{\\sigma}=0.8850 \\qquad LogL=-37.4045 \\qquad T = 30 \\nonumber \\\\  #>    && \\underset{[p-val]}{ AR(1) }: \\underset{[0.5953]}{0.2821}\\qquad \\underset{[p-val]}{ ARCH(1)}:\\underset{[0.8678]}{0.0277}\\qquad \\underset{[p-val]}{ Normality }:\\underset{[0.4308]}{1.6842} \\nonumber  #> \\end{eqnarray}"},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive estimation — recursive","title":"Recursive estimation — recursive","text":"Recursive estimation coefficients standard errors","code":""},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursive estimation — recursive","text":"","code":"recursive(object, spec=\"mean\", std.errors=TRUE, from=40, tol=1e-07,   LAPACK=FALSE, plot=TRUE, return=TRUE)"},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursive estimation — recursive","text":"object arx, gets isat object spec 'mean' 'variance'. 'mean' (default), recursive estimates mean-equation estimated std.errors logical. TRUE (default), coefficient standard errors also computed integer. starting point recursion tol numeric. tolerance linear dependency among regressors LAPACK logical, TRUE FALSE (default). true use LAPACK otherwise use LINPACK, see qr function plot NULL logical. TRUE, recursive coefficient estimates plotted. NULL (default), value set options determines whether plot produced . return logical. TRUE (default), recursive estimates returned list","code":""},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursive estimation — recursive","text":"return=TRUE, list returned following components: estimates zoo matrix recursive estimates standard.errors zoo matrix standard errors","code":""},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recursive estimation — recursive","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/recursive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursive estimation — recursive","text":"","code":"##generate random variates, estimate model: y <- rnorm(100) mX <- matrix(rnorm(4*100), 100, 4) mymodel <- arx(y, mc=TRUE, mxreg=mX)  ##compute recursive estimates and plot them: recursive(mymodel) #> $estimates #>         mconst      mxreg1        mxreg2        mxreg3       mxreg4 #> 1           NA          NA            NA            NA           NA #> 2           NA          NA            NA            NA           NA #> 3           NA          NA            NA            NA           NA #> 4           NA          NA            NA            NA           NA #> 5           NA          NA            NA            NA           NA #> 6           NA          NA            NA            NA           NA #> 7           NA          NA            NA            NA           NA #> 8           NA          NA            NA            NA           NA #> 9           NA          NA            NA            NA           NA #> 10          NA          NA            NA            NA           NA #> 11          NA          NA            NA            NA           NA #> 12          NA          NA            NA            NA           NA #> 13          NA          NA            NA            NA           NA #> 14          NA          NA            NA            NA           NA #> 15          NA          NA            NA            NA           NA #> 16          NA          NA            NA            NA           NA #> 17          NA          NA            NA            NA           NA #> 18          NA          NA            NA            NA           NA #> 19          NA          NA            NA            NA           NA #> 20          NA          NA            NA            NA           NA #> 21          NA          NA            NA            NA           NA #> 22          NA          NA            NA            NA           NA #> 23          NA          NA            NA            NA           NA #> 24          NA          NA            NA            NA           NA #> 25          NA          NA            NA            NA           NA #> 26          NA          NA            NA            NA           NA #> 27          NA          NA            NA            NA           NA #> 28          NA          NA            NA            NA           NA #> 29          NA          NA            NA            NA           NA #> 30          NA          NA            NA            NA           NA #> 31          NA          NA            NA            NA           NA #> 32          NA          NA            NA            NA           NA #> 33          NA          NA            NA            NA           NA #> 34          NA          NA            NA            NA           NA #> 35          NA          NA            NA            NA           NA #> 36          NA          NA            NA            NA           NA #> 37          NA          NA            NA            NA           NA #> 38          NA          NA            NA            NA           NA #> 39          NA          NA            NA            NA           NA #> 40  0.24699500 -0.13189805 -0.1256567624 -0.0141403985 -0.091668297 #> 41  0.23613833 -0.12485242 -0.1214241753 -0.0265661733 -0.095997706 #> 42  0.26413567 -0.12677380 -0.1283569495  0.0203831673 -0.122105542 #> 43  0.22005735 -0.12791618 -0.0810483967 -0.0253145453 -0.114561970 #> 44  0.18368002 -0.10060222 -0.0298869306 -0.0355987996 -0.083055899 #> 45  0.16980768 -0.08863411 -0.0635139280 -0.0271968697 -0.067362277 #> 46  0.15858224 -0.08765230 -0.0949998140  0.0184103765 -0.067102558 #> 47  0.13163610 -0.09960908 -0.0549986594 -0.0044727604 -0.055854170 #> 48  0.13312728 -0.10147787 -0.0558130552 -0.0043600995 -0.054690788 #> 49  0.07344893 -0.08862717  0.0109627348  0.0050860725 -0.082230833 #> 50  0.07712083 -0.08661176  0.0036569252  0.0024403131 -0.083813335 #> 51  0.09985008 -0.09617929  0.0022379936  0.0001916866 -0.074470053 #> 52  0.14248037 -0.08695786 -0.0072959030 -0.0210186104 -0.040320220 #> 53  0.17284889 -0.07555503 -0.0183900195 -0.0186595494 -0.011027183 #> 54  0.17969746 -0.07237178 -0.0126965193 -0.0327292822 -0.014397946 #> 55  0.13455353 -0.09913568 -0.0246786014 -0.0980992915 -0.021410065 #> 56  0.12070908 -0.09845154 -0.0247645244 -0.1005030815 -0.022501737 #> 57  0.10901830 -0.09579879 -0.0127156921 -0.1133735560 -0.035753136 #> 58  0.10969302 -0.09879617 -0.0135142084 -0.1160546191 -0.034467229 #> 59  0.10494760 -0.09898549 -0.0117736638 -0.1159058776 -0.038526638 #> 60  0.08538349 -0.11180572 -0.0235971144 -0.1001051161 -0.030860121 #> 61  0.11245626 -0.09598785 -0.0569318083 -0.1163406946 -0.018921706 #> 62  0.13499402 -0.10331257 -0.0735591612 -0.0851266988 -0.006730561 #> 63  0.13681710 -0.09721516 -0.0674341177 -0.0910873953 -0.011034017 #> 64  0.15357364 -0.09272031 -0.0727877053 -0.0838848424 -0.038799619 #> 65  0.11998795 -0.09859214 -0.0391227404 -0.1152442777 -0.060592408 #> 66  0.12889756 -0.08820805 -0.0436461527 -0.1123500619 -0.071957070 #> 67  0.12216182 -0.08093518 -0.0624156943 -0.1010199611 -0.070577347 #> 68  0.13395545 -0.08436566 -0.0594441595 -0.0899335669 -0.066194433 #> 69  0.13587488 -0.08001036 -0.0568275324 -0.0896679615 -0.064692304 #> 70  0.14082541 -0.07970072 -0.0554073470 -0.0952820828 -0.063464395 #> 71  0.14994982 -0.05644433 -0.0434574078 -0.1180022766 -0.075506628 #> 72  0.15163761 -0.05743936 -0.0449580077 -0.1155942921 -0.074248461 #> 73  0.16376066 -0.05801793 -0.0366739041 -0.1217588498 -0.051124368 #> 74  0.14598354 -0.06609392 -0.0225747898 -0.0931308571 -0.070409207 #> 75  0.12988073 -0.06958934  0.0048194113 -0.1040614125 -0.049873931 #> 76  0.15207711 -0.08315046  0.0009944043 -0.0933398323 -0.023170539 #> 77  0.15252580 -0.08337664  0.0044546721 -0.0951589051 -0.023633861 #> 78  0.13889467 -0.04951627 -0.0318862070 -0.0397931188 -0.029521044 #> 79  0.12300713 -0.06287575 -0.0544698091 -0.0411443398 -0.041140831 #> 80  0.11990564 -0.06553847 -0.0545745355 -0.0442937884 -0.041599189 #> 81  0.12860079 -0.07962998 -0.0615450682 -0.0386364717 -0.042235420 #> 82  0.12689718 -0.08152717 -0.0605052301 -0.0385590646 -0.044113633 #> 83  0.13109972 -0.08619786 -0.0627442685 -0.0410503342 -0.041158336 #> 84  0.14488343 -0.07947945 -0.0743125903 -0.0338438449 -0.027800756 #> 85  0.16552252 -0.06357034 -0.0665949781 -0.0232073004  0.020476519 #> 86  0.16226883 -0.06367565 -0.0618483135 -0.0255742284  0.018433465 #> 87  0.16032738 -0.06210375 -0.0646212006 -0.0248201157  0.018381436 #> 88  0.14013001 -0.06204354 -0.0875224143 -0.0405439709  0.061573546 #> 89  0.13611456 -0.06446657 -0.0807169910 -0.0399133730  0.052780368 #> 90  0.13023651 -0.06967477 -0.0853108853 -0.0383735002  0.055734284 #> 91  0.12312951 -0.04900989 -0.1193134279 -0.0473375655  0.033854908 #> 92  0.11751519 -0.04302978 -0.1144956110 -0.0527549944  0.032517867 #> 93  0.12292767 -0.03055433 -0.1055657034 -0.0679071959  0.043908027 #> 94  0.09339570 -0.05444992 -0.0763077439 -0.0791607669  0.042213098 #> 95  0.08953962 -0.05651592 -0.0808404563 -0.0823201365  0.040505068 #> 96  0.08922481 -0.05675273 -0.0809470238 -0.0818028668  0.040491981 #> 97  0.08289654 -0.06313945 -0.0953057757 -0.0859516001  0.042419279 #> 98  0.08157206 -0.06033453 -0.0931876006 -0.0851048472  0.042790754 #> 99  0.08718584 -0.05513504 -0.0960528801 -0.0787809856  0.047697069 #> 100 0.08536875 -0.05468269 -0.0947477579 -0.0798852315  0.047911547 #>  #> $standard.errors #>      mconstSE   mxreg1SE  mxreg2SE  mxreg3SE   mxreg4SE #> 1          NA         NA        NA        NA         NA #> 2          NA         NA        NA        NA         NA #> 3          NA         NA        NA        NA         NA #> 4          NA         NA        NA        NA         NA #> 5          NA         NA        NA        NA         NA #> 6          NA         NA        NA        NA         NA #> 7          NA         NA        NA        NA         NA #> 8          NA         NA        NA        NA         NA #> 9          NA         NA        NA        NA         NA #> 10         NA         NA        NA        NA         NA #> 11         NA         NA        NA        NA         NA #> 12         NA         NA        NA        NA         NA #> 13         NA         NA        NA        NA         NA #> 14         NA         NA        NA        NA         NA #> 15         NA         NA        NA        NA         NA #> 16         NA         NA        NA        NA         NA #> 17         NA         NA        NA        NA         NA #> 18         NA         NA        NA        NA         NA #> 19         NA         NA        NA        NA         NA #> 20         NA         NA        NA        NA         NA #> 21         NA         NA        NA        NA         NA #> 22         NA         NA        NA        NA         NA #> 23         NA         NA        NA        NA         NA #> 24         NA         NA        NA        NA         NA #> 25         NA         NA        NA        NA         NA #> 26         NA         NA        NA        NA         NA #> 27         NA         NA        NA        NA         NA #> 28         NA         NA        NA        NA         NA #> 29         NA         NA        NA        NA         NA #> 30         NA         NA        NA        NA         NA #> 31         NA         NA        NA        NA         NA #> 32         NA         NA        NA        NA         NA #> 33         NA         NA        NA        NA         NA #> 34         NA         NA        NA        NA         NA #> 35         NA         NA        NA        NA         NA #> 36         NA         NA        NA        NA         NA #> 37         NA         NA        NA        NA         NA #> 38         NA         NA        NA        NA         NA #> 39         NA         NA        NA        NA         NA #> 40  0.1820880 0.14992330 0.2003516 0.1889394 0.15798322 #> 41  0.1751911 0.14566953 0.1971314 0.1807477 0.15510975 #> 42  0.1713279 0.14507743 0.1961828 0.1712525 0.15137920 #> 43  0.1670999 0.14549396 0.1920066 0.1666631 0.15166315 #> 44  0.1660265 0.14510839 0.1893573 0.1678379 0.15088877 #> 45  0.1663094 0.14536536 0.1879323 0.1684047 0.15092917 #> 46  0.1665858 0.14586362 0.1865056 0.1640839 0.15144901 #> 47  0.1611141 0.14398594 0.1764987 0.1598338 0.14968459 #> 48  0.1572021 0.13871037 0.1738902 0.1579591 0.14660974 #> 49  0.1608263 0.14407137 0.1778317 0.1641543 0.15182833 #> 50  0.1569713 0.14179251 0.1682720 0.1612952 0.14975601 #> 51  0.1558251 0.14176510 0.1685647 0.1615671 0.14976974 #> 52  0.1584223 0.14556083 0.1731027 0.1655936 0.15275758 #> 53  0.1565528 0.14561697 0.1733084 0.1660458 0.15095336 #> 54  0.1548802 0.14442743 0.1717103 0.1627310 0.14971475 #> 55  0.1546668 0.14569094 0.1742168 0.1599870 0.15197950 #> 56  0.1525494 0.14493037 0.1733114 0.1591174 0.15118136 #> 57  0.1472698 0.14347668 0.1681213 0.1531310 0.14471415 #> 58  0.1455035 0.13429752 0.1660727 0.1458697 0.14195273 #> 59  0.1428120 0.13311428 0.1644468 0.1445858 0.13964659 #> 60  0.1430335 0.13368280 0.1653423 0.1450929 0.14049301 #> 61  0.1429538 0.13435909 0.1650444 0.1458820 0.14144795 #> 62  0.1399739 0.13370455 0.1633803 0.1405765 0.14030170 #> 63  0.1385232 0.12917561 0.1592125 0.1363073 0.13752544 #> 64  0.1376246 0.12916237 0.1592023 0.1361911 0.13490774 #> 65  0.1360958 0.12988609 0.1581248 0.1349389 0.13472591 #> 66  0.1342705 0.12766098 0.1569676 0.1340361 0.13224518 #> 67  0.1333944 0.12673545 0.1540931 0.1325430 0.13169865 #> 68  0.1314446 0.12601207 0.1532832 0.1307429 0.13088512 #> 69  0.1294656 0.11977417 0.1505615 0.1297139 0.12928198 #> 70  0.1280532 0.11899851 0.1495489 0.1281360 0.12841193 #> 71  0.1279730 0.11726150 0.1493732 0.1266327 0.12813140 #> 72  0.1244214 0.11540772 0.1465079 0.1202842 0.12574092 #> 73  0.1234675 0.11522165 0.1459751 0.1198906 0.12279934 #> 74  0.1238517 0.11601552 0.1468271 0.1192182 0.12306591 #> 75  0.1223505 0.11578014 0.1433707 0.1184139 0.12071755 #> 76  0.1219414 0.11601004 0.1441709 0.1188299 0.11977430 #> 77  0.1209965 0.11518090 0.1379521 0.1162767 0.11883567 #> 78  0.1244335 0.11763754 0.1411205 0.1171749 0.12232755 #> 79  0.1244615 0.11778050 0.1407696 0.1177512 0.12261387 #> 80  0.1224369 0.11606944 0.1398567 0.1156595 0.12179287 #> 81  0.1208052 0.11256647 0.1386083 0.1146452 0.12121802 #> 82  0.1190760 0.11057306 0.1374085 0.1139057 0.11928404 #> 83  0.1178288 0.10918134 0.1364956 0.1130544 0.11832938 #> 84  0.1164717 0.10868899 0.1355526 0.1125225 0.11704567 #> 85  0.1167946 0.10921239 0.1367087 0.1133515 0.11399276 #> 86  0.1148045 0.10855848 0.1335347 0.1119713 0.11279134 #> 87  0.1137454 0.10765471 0.1320738 0.1112558 0.11213045 #> 88  0.1142819 0.10878680 0.1327324 0.1120174 0.11021596 #> 89  0.1128019 0.10786505 0.1298841 0.1113825 0.10529648 #> 90  0.1118586 0.10702905 0.1291007 0.1108983 0.10473905 #> 91  0.1116565 0.10508642 0.1246867 0.1105628 0.10250732 #> 92  0.1101919 0.10346354 0.1234729 0.1091587 0.10195069 #> 93  0.1098230 0.10222941 0.1228141 0.1074892 0.10088353 #> 94  0.1108703 0.10342142 0.1242149 0.1093046 0.10271596 #> 95  0.1098297 0.10276659 0.1229919 0.1084329 0.10211295 #> 96  0.1089196 0.10201634 0.1222840 0.1069979 0.10155060 #> 97  0.1082580 0.10134133 0.1202644 0.1065476 0.10123877 #> 98  0.1070423 0.09769970 0.1181473 0.1057154 0.10064627 #> 99  0.1057126 0.09646264 0.1174240 0.1041460 0.09950597 #> 100 0.1043840 0.09591086 0.1164544 0.1033150 0.09897984 #>"},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the regressors of the mean equation — regressorsMean","title":"Create the regressors of the mean equation — regressorsMean","text":"function generates regressors mean equation arx model. returned value matrix regressors , default, regressand column one. default, observations (rows) missing values removed beginning end na.trim, returned matrix zoo object.","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the regressors of the mean equation — regressorsMean","text":"","code":"regressorsMean(y, mc = FALSE, ar = NULL, ewma = NULL, mxreg = NULL,   prefix=\"m\", return.regressand = TRUE, return.as.zoo = TRUE, na.trim = TRUE,   na.omit=FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the regressors of the mean equation — regressorsMean","text":"y numeric vector, time-series zoo object. mc logical. TRUE includes intercept, whereas FALSE (default) . ar either NULL (default) integer vector, say, c(2,4) 1:4 AR-lags include mean specification. NULL, lags included. ewma either NULL (default) list arguments sent eqwma function. latter case lagged moving average y included regressor. mxreg either NULL (default), numeric vector matrix, say, zoo object, data.frame containing conditioning variables (covariates). Note , y mxreg zoo objects, samples matched. prefix character, possibly length zero, e.g. \"\" character(0). prefix added constant covariate labels. default \"m\", default labels \"mconst\" \"mxreg\". return.regressand logical. TRUE, default, includes regressand column one returned matrix. return..zoo TRUE, default, returns matrix zoo object. na.trim TRUE, default, removes observations NA-values beginning end na.trim. na.omit TRUE, non-default, removes observations NA-values, necessarily beginning end, na.omit.","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the regressors of the mean equation — regressorsMean","text":"matrix, default class zoo, regressand column one (default).","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create the regressors of the mean equation — regressorsMean","text":"Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44. DOI: https://www.jstatsoft.org/article/view/v086i03","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the regressors of the mean equation — regressorsMean","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/regressorsMean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the regressors of the mean equation — regressorsMean","text":"","code":"##generate some data: y <- rnorm(10) #regressand x <- matrix(rnorm(10*5), 10, 5) #regressors  ##create regressors (examples): regressorsMean(y, mxreg=x) #>             y       mxreg1       mxreg2     mxreg3      mxreg4     mxreg5 #> 1  -2.0376825 -0.321892586  0.474911714 -1.8863252  0.23111493  0.2763155 #> 2  -0.1958892  1.487837832 -0.279072171 -0.6537798  0.64751336 -0.1582940 #> 3   0.5397906 -1.667928046  0.813400374  0.3943948  0.35628334 -2.5079178 #> 4   0.6164557 -0.436829977  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 5   0.6165678  0.457462079  0.002691661  0.8867490  0.85520221 -0.0776732 #> 6  -1.6921015 -1.617773765 -1.176692158  0.3333700  1.15293623  0.2062940 #> 7   0.3687421  0.279627862 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 8   0.9678592  1.877864021 -0.592997366  0.8188281  0.14410466  0.8215068 #> 9   1.2765787 -0.004060653  0.797380501  0.3883652 -0.07562508 -0.1941524 #> 10 -0.2249613 -0.278454025 -1.958205175 -0.4459350  2.16141585  1.2145888 regressorsMean(y, mxreg=x, return.regressand=FALSE) #>          mxreg1       mxreg2     mxreg3      mxreg4     mxreg5 #> 1  -0.321892586  0.474911714 -1.8863252  0.23111493  0.2763155 #> 2   1.487837832 -0.279072171 -0.6537798  0.64751336 -0.1582940 #> 3  -1.667928046  0.813400374  0.3943948  0.35628334 -2.5079178 #> 4  -0.436829977  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 5   0.457462079  0.002691661  0.8867490  0.85520221 -0.0776732 #> 6  -1.617773765 -1.176692158  0.3333700  1.15293623  0.2062940 #> 7   0.279627862 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 8   1.877864021 -0.592997366  0.8188281  0.14410466  0.8215068 #> 9  -0.004060653  0.797380501  0.3883652 -0.07562508 -0.1941524 #> 10 -0.278454025 -1.958205175 -0.4459350  2.16141585  1.2145888 regressorsMean(y, mc=TRUE, ar=1:3, mxreg=x) #>             y mconst        ar1        ar2        ar3       mxreg1       mxreg2 #> 4   0.6164557      1  0.5397906 -0.1958892 -2.0376825 -0.436829977  0.904435464 #> 5   0.6165678      1  0.6164557  0.5397906 -0.1958892  0.457462079  0.002691661 #> 6  -1.6921015      1  0.6165678  0.6164557  0.5397906 -1.617773765 -1.176692158 #> 7   0.3687421      1 -1.6921015  0.6165678  0.6164557  0.279627862 -1.318220727 #> 8   0.9678592      1  0.3687421 -1.6921015  0.6165678  1.877864021 -0.592997366 #> 9   1.2765787      1  0.9678592  0.3687421 -1.6921015 -0.004060653  0.797380501 #> 10 -0.2249613      1  1.2765787  0.9678592  0.3687421 -0.278454025 -1.958205175 #>        mxreg3      mxreg4     mxreg5 #> 4  -0.9135660 -0.65801021 -1.5652818 #> 5   0.8867490  0.85520221 -0.0776732 #> 6   0.3333700  1.15293623  0.2062940 #> 7  -0.1706396  0.27627456  0.2768725 #> 8   0.8188281  0.14410466  0.8215068 #> 9   0.3883652 -0.07562508 -0.1941524 #> 10 -0.4459350  2.16141585  1.2145888 regressorsMean(log(y^2), mc=TRUE, ar=c(2,4)) #>       log(y^2) mconst         ar2        ar4 #> 5  -0.96717392      1 -1.23314796  1.4236263 #> 6   1.05194252      1 -0.96753758 -3.2604117 #> 7  -1.99531582      1 -0.96717392 -1.2331480 #> 8  -0.06533729      1  1.05194252 -0.9675376 #> 9   0.48836719      1 -1.99531582 -0.9671739 #> 10 -2.98365404      1 -0.06533729  1.0519425  ##let y and x be time-series: y <- ts(y, frequency=4, end=c(2018,4)) x <- ts(x, frequency=4, end=c(2018,4)) regressorsMean(y, mxreg=x) #>                  y     Series 1     Series 2   Series 3    Series 4   Series 5 #> 2016 Q3 -2.0376825 -0.321892586  0.474911714 -1.8863252  0.23111493  0.2763155 #> 2016 Q4 -0.1958892  1.487837832 -0.279072171 -0.6537798  0.64751336 -0.1582940 #> 2017 Q1  0.5397906 -1.667928046  0.813400374  0.3943948  0.35628334 -2.5079178 #> 2017 Q2  0.6164557 -0.436829977  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 2017 Q3  0.6165678  0.457462079  0.002691661  0.8867490  0.85520221 -0.0776732 #> 2017 Q4 -1.6921015 -1.617773765 -1.176692158  0.3333700  1.15293623  0.2062940 #> 2018 Q1  0.3687421  0.279627862 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 2018 Q2  0.9678592  1.877864021 -0.592997366  0.8188281  0.14410466  0.8215068 #> 2018 Q3  1.2765787 -0.004060653  0.797380501  0.3883652 -0.07562508 -0.1941524 #> 2018 Q4 -0.2249613 -0.278454025 -1.958205175 -0.4459350  2.16141585  1.2145888 regressorsMean(y, mc=TRUE, ar=1:3, mxreg=x) #>                  y mconst        ar1        ar2        ar3     Series 1 #> 2017 Q2  0.6164557      1  0.5397906 -0.1958892 -2.0376825 -0.436829977 #> 2017 Q3  0.6165678      1  0.6164557  0.5397906 -0.1958892  0.457462079 #> 2017 Q4 -1.6921015      1  0.6165678  0.6164557  0.5397906 -1.617773765 #> 2018 Q1  0.3687421      1 -1.6921015  0.6165678  0.6164557  0.279627862 #> 2018 Q2  0.9678592      1  0.3687421 -1.6921015  0.6165678  1.877864021 #> 2018 Q3  1.2765787      1  0.9678592  0.3687421 -1.6921015 -0.004060653 #> 2018 Q4 -0.2249613      1  1.2765787  0.9678592  0.3687421 -0.278454025 #>             Series 2   Series 3    Series 4   Series 5 #> 2017 Q2  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 2017 Q3  0.002691661  0.8867490  0.85520221 -0.0776732 #> 2017 Q4 -1.176692158  0.3333700  1.15293623  0.2062940 #> 2018 Q1 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 2018 Q2 -0.592997366  0.8188281  0.14410466  0.8215068 #> 2018 Q3  0.797380501  0.3883652 -0.07562508 -0.1941524 #> 2018 Q4 -1.958205175 -0.4459350  2.16141585  1.2145888 regressorsMean(log(y^2), mc=TRUE, ar=c(2,4)) #>            log(y^2) mconst         ar2        ar4 #> 2017 Q3 -0.96717392      1 -1.23314796  1.4236263 #> 2017 Q4  1.05194252      1 -0.96753758 -3.2604117 #> 2018 Q1 -1.99531582      1 -0.96717392 -1.2331480 #> 2018 Q2 -0.06533729      1  1.05194252 -0.9675376 #> 2018 Q3  0.48836719      1 -1.99531582 -0.9671739 #> 2018 Q4 -2.98365404      1 -0.06533729  1.0519425  ##missing values (NA): y[1] <- NA x[10,3] <- NA regressorsMean(y, mxreg=x) #>                  y     Series 1     Series 2   Series 3    Series 4   Series 5 #> 2016 Q4 -0.1958892  1.487837832 -0.279072171 -0.6537798  0.64751336 -0.1582940 #> 2017 Q1  0.5397906 -1.667928046  0.813400374  0.3943948  0.35628334 -2.5079178 #> 2017 Q2  0.6164557 -0.436829977  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 2017 Q3  0.6165678  0.457462079  0.002691661  0.8867490  0.85520221 -0.0776732 #> 2017 Q4 -1.6921015 -1.617773765 -1.176692158  0.3333700  1.15293623  0.2062940 #> 2018 Q1  0.3687421  0.279627862 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 2018 Q2  0.9678592  1.877864021 -0.592997366  0.8188281  0.14410466  0.8215068 #> 2018 Q3  1.2765787 -0.004060653  0.797380501  0.3883652 -0.07562508 -0.1941524 regressorsMean(y, mxreg=x, na.trim=FALSE) #>                  y     Series 1     Series 2   Series 3    Series 4   Series 5 #> 2016 Q3         NA -0.321892586  0.474911714 -1.8863252  0.23111493  0.2763155 #> 2016 Q4 -0.1958892  1.487837832 -0.279072171 -0.6537798  0.64751336 -0.1582940 #> 2017 Q1  0.5397906 -1.667928046  0.813400374  0.3943948  0.35628334 -2.5079178 #> 2017 Q2  0.6164557 -0.436829977  0.904435464 -0.9135660 -0.65801021 -1.5652818 #> 2017 Q3  0.6165678  0.457462079  0.002691661  0.8867490  0.85520221 -0.0776732 #> 2017 Q4 -1.6921015 -1.617773765 -1.176692158  0.3333700  1.15293623  0.2062940 #> 2018 Q1  0.3687421  0.279627862 -1.318220727 -0.1706396  0.27627456  0.2768725 #> 2018 Q2  0.9678592  1.877864021 -0.592997366  0.8188281  0.14410466  0.8215068 #> 2018 Q3  1.2765787 -0.004060653  0.797380501  0.3883652 -0.07562508 -0.1941524 #> 2018 Q4 -0.2249613 -0.278454025 -1.958205175         NA  2.16141585  1.2145888"},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the regressors of the variance equation — regressorsVariance","title":"Create the regressors of the variance equation — regressorsVariance","text":"function generates regressors log-variance equation arx model. returned value matrix regressors , default, regressand column one. default, observations (rows) missing values removed beginning end na.trim, returned matrix zoo object.","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the regressors of the variance equation — regressorsVariance","text":"","code":"regressorsVariance(e, vc = TRUE, arch = NULL, asym = NULL,   log.ewma = NULL, vxreg = NULL, zero.adj = 0.1, vc.adj = TRUE,   return.regressand = TRUE, return.as.zoo = TRUE, na.trim = TRUE,   na.omit = FALSE)"},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the regressors of the variance equation — regressorsVariance","text":"e numeric vector, time-series zoo object. vc logical. TRUE includes intercept log-variance specification, whereas FALSE (default) . log-variance specification contains item log-variance intercept, vc set TRUE arch either NULL (default) integer vector, say, c(1,3) 2:5. log-ARCH lags include log-variance specification asym either NULL (default) integer vector, say, c(1) 1:3. asymmetry (.e. 'leverage') terms include log-variance specification log.ewma either NULL (default) vector lengths volatility proxies, see leqwma vxreg either NULL (default) numeric vector matrix, say, zoo object, conditioning variables. y mxreg zoo objects, samples chosen match zero.adj numeric value 0 1. quantile adjustment zero values. default 0.1 means zero residuals replaced 10 percent quantile absolute residuals taking logarithm vc.adj logical. TRUE (default), log-variance intercept adjusted estimate E[ln(z^2)], z standardised error. adjustment needed conditional scale equal conditional standard deviation. FALSE, log-variance intercept adjusted return.regressand logical. TRUE, default, includes regressand column one returned matrix. return..zoo TRUE, default, returns matrix zoo object. na.trim TRUE, default, removes observations NA-values beginning end na.trim. na.omit TRUE, non-default, removes observations NA-values, necessarily beginning end, na.omit.","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the regressors of the variance equation — regressorsVariance","text":"matrix, default class zoo, regressand column one (default).","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create the regressors of the variance equation — regressorsVariance","text":"Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44. DOI: https://www.jstatsoft.org/article/view/v086i03 Sucarrat, Genaro Escribano, Alvaro (2012): 'Automated Financial Model Selection: General--Specific Modelling Mean Volatility Specifications', Oxford Bulletin Economics Statistics 74, Issue 5 (October), pp. 716-735","code":""},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the regressors of the variance equation — regressorsVariance","text":"Genaro Sucarrat, http://www.sucarrat.net/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/regressorsVariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the regressors of the variance equation — regressorsVariance","text":"","code":"##generate some data: eps <- rnorm(10) #error term x <- matrix(rnorm(10*5), 10, 5) #regressors  ##create regressors (examples): regressorsVariance(eps, vxreg=x) #>         loge2 vconst     vxreg1      vxreg2      vxreg3     vxreg4     vxreg5 #> 1  -0.1634702      1 -1.1696153  0.05621485  1.61554532  0.1467085 -0.5272343 #> 2   0.3786650      1 -1.4420346  0.29908690 -0.02969397  1.6236212  1.6659909 #> 3   0.4123792      1  1.0543223 -0.75939812  0.56226735  0.9112097 -1.1392006 #> 4  -0.5960116      1 -0.5973301  2.68485900 -0.09741250  0.1424584  0.1436232 #> 5  -4.9797594      1  0.7894599 -0.45839014  1.01645522 -1.3894835 -1.0995509 #> 6  -0.4719057      1  1.5164906  0.06424356 -1.15616739 -0.8660377  0.9035164 #> 7  -2.6357287      1 -0.1917748  0.64979187  2.32086022 -0.1632849  1.4837795 #> 8  -1.0488618      1  0.2838789 -0.02601863 -0.60353125  2.5530261  1.9507210 #> 9  -1.9974294      1 -1.7510675 -0.64356739 -1.45884941 -1.8602276  0.7976007 #> 10  1.2331983      1 -0.8186698  1.04530566 -0.35091783  1.1310547  1.8432663 regressorsVariance(eps, vxreg=x, return.regressand=FALSE) #>    vconst     vxreg1      vxreg2      vxreg3     vxreg4     vxreg5 #> 1       1 -1.1696153  0.05621485  1.61554532  0.1467085 -0.5272343 #> 2       1 -1.4420346  0.29908690 -0.02969397  1.6236212  1.6659909 #> 3       1  1.0543223 -0.75939812  0.56226735  0.9112097 -1.1392006 #> 4       1 -0.5973301  2.68485900 -0.09741250  0.1424584  0.1436232 #> 5       1  0.7894599 -0.45839014  1.01645522 -1.3894835 -1.0995509 #> 6       1  1.5164906  0.06424356 -1.15616739 -0.8660377  0.9035164 #> 7       1 -0.1917748  0.64979187  2.32086022 -0.1632849  1.4837795 #> 8       1  0.2838789 -0.02601863 -0.60353125  2.5530261  1.9507210 #> 9       1 -1.7510675 -0.64356739 -1.45884941 -1.8602276  0.7976007 #> 10      1 -0.8186698  1.04530566 -0.35091783  1.1310547  1.8432663 regressorsVariance(eps, arch=1:3, vxreg=x) #>         loge2 vconst      arch1      arch2      arch3     vxreg1      vxreg2 #> 4  -0.5960116      1  0.4123792  0.3786650 -0.1634702 -0.5973301  2.68485900 #> 5  -4.9797594      1 -0.5960116  0.4123792  0.3786650  0.7894599 -0.45839014 #> 6  -0.4719057      1 -4.9797594 -0.5960116  0.4123792  1.5164906  0.06424356 #> 7  -2.6357287      1 -0.4719057 -4.9797594 -0.5960116 -0.1917748  0.64979187 #> 8  -1.0488618      1 -2.6357287 -0.4719057 -4.9797594  0.2838789 -0.02601863 #> 9  -1.9974294      1 -1.0488618 -2.6357287 -0.4719057 -1.7510675 -0.64356739 #> 10  1.2331983      1 -1.9974294 -1.0488618 -2.6357287 -0.8186698  1.04530566 #>        vxreg3     vxreg4     vxreg5 #> 4  -0.0974125  0.1424584  0.1436232 #> 5   1.0164552 -1.3894835 -1.0995509 #> 6  -1.1561674 -0.8660377  0.9035164 #> 7   2.3208602 -0.1632849  1.4837795 #> 8  -0.6035312  2.5530261  1.9507210 #> 9  -1.4588494 -1.8602276  0.7976007 #> 10 -0.3509178  1.1310547  1.8432663 regressorsVariance(eps, arch=1:2, asym=1, vxreg=x) #>         loge2 vconst      arch1      arch2      asym1     vxreg1      vxreg2 #> 3   0.4123792      1  0.3786650 -0.1634702  0.3786650  1.0543223 -0.75939812 #> 4  -0.5960116      1  0.4123792  0.3786650  0.4123792 -0.5973301  2.68485900 #> 5  -4.9797594      1 -0.5960116  0.4123792  0.0000000  0.7894599 -0.45839014 #> 6  -0.4719057      1 -4.9797594 -0.5960116 -4.9797594  1.5164906  0.06424356 #> 7  -2.6357287      1 -0.4719057 -4.9797594  0.0000000 -0.1917748  0.64979187 #> 8  -1.0488618      1 -2.6357287 -0.4719057 -2.6357287  0.2838789 -0.02601863 #> 9  -1.9974294      1 -1.0488618 -2.6357287 -1.0488618 -1.7510675 -0.64356739 #> 10  1.2331983      1 -1.9974294 -1.0488618 -1.9974294 -0.8186698  1.04530566 #>        vxreg3     vxreg4     vxreg5 #> 3   0.5622673  0.9112097 -1.1392006 #> 4  -0.0974125  0.1424584  0.1436232 #> 5   1.0164552 -1.3894835 -1.0995509 #> 6  -1.1561674 -0.8660377  0.9035164 #> 7   2.3208602 -0.1632849  1.4837795 #> 8  -0.6035312  2.5530261  1.9507210 #> 9  -1.4588494 -1.8602276  0.7976007 #> 10 -0.3509178  1.1310547  1.8432663 regressorsVariance(eps, arch=1:2, asym=1, log.ewma=5) #>         loge2 vconst      arch1      arch2     asym1 logEqWMA(5) #> 6  -0.4719057      1 -4.9797594 -0.5960116 -4.979759  -0.1328886 #> 7  -2.6357287      1 -0.4719057 -4.9797594  0.000000  -0.1857433 #> 8  -1.0488618      1 -2.6357287 -0.4719057 -2.635729  -0.5928434 #> 9  -1.9974294      1 -1.0488618 -2.6357287 -1.048862  -1.1371270 #> 10  1.2331983      1 -1.9974294 -1.0488618 -1.997429  -1.4368514  ##let eps and x be time-series: eps <- ts(eps, frequency=4, end=c(2018,4)) x <- ts(x, frequency=4, end=c(2018,4)) regressorsVariance(eps, vxreg=x) #>              loge2 vconst   Series 1    Series 2    Series 3   Series 4 #> 2016 Q3 -0.1634702      1 -1.1696153  0.05621485  1.61554532  0.1467085 #> 2016 Q4  0.3786650      1 -1.4420346  0.29908690 -0.02969397  1.6236212 #> 2017 Q1  0.4123792      1  1.0543223 -0.75939812  0.56226735  0.9112097 #> 2017 Q2 -0.5960116      1 -0.5973301  2.68485900 -0.09741250  0.1424584 #> 2017 Q3 -4.9797594      1  0.7894599 -0.45839014  1.01645522 -1.3894835 #> 2017 Q4 -0.4719057      1  1.5164906  0.06424356 -1.15616739 -0.8660377 #> 2018 Q1 -2.6357287      1 -0.1917748  0.64979187  2.32086022 -0.1632849 #> 2018 Q2 -1.0488618      1  0.2838789 -0.02601863 -0.60353125  2.5530261 #> 2018 Q3 -1.9974294      1 -1.7510675 -0.64356739 -1.45884941 -1.8602276 #> 2018 Q4  1.2331983      1 -0.8186698  1.04530566 -0.35091783  1.1310547 #>           Series 5 #> 2016 Q3 -0.5272343 #> 2016 Q4  1.6659909 #> 2017 Q1 -1.1392006 #> 2017 Q2  0.1436232 #> 2017 Q3 -1.0995509 #> 2017 Q4  0.9035164 #> 2018 Q1  1.4837795 #> 2018 Q2  1.9507210 #> 2018 Q3  0.7976007 #> 2018 Q4  1.8432663 regressorsVariance(eps, arch=1:3, vxreg=x) #>              loge2 vconst      arch1      arch2      arch3   Series 1 #> 2017 Q2 -0.5960116      1  0.4123792  0.3786650 -0.1634702 -0.5973301 #> 2017 Q3 -4.9797594      1 -0.5960116  0.4123792  0.3786650  0.7894599 #> 2017 Q4 -0.4719057      1 -4.9797594 -0.5960116  0.4123792  1.5164906 #> 2018 Q1 -2.6357287      1 -0.4719057 -4.9797594 -0.5960116 -0.1917748 #> 2018 Q2 -1.0488618      1 -2.6357287 -0.4719057 -4.9797594  0.2838789 #> 2018 Q3 -1.9974294      1 -1.0488618 -2.6357287 -0.4719057 -1.7510675 #> 2018 Q4  1.2331983      1 -1.9974294 -1.0488618 -2.6357287 -0.8186698 #>            Series 2   Series 3   Series 4   Series 5 #> 2017 Q2  2.68485900 -0.0974125  0.1424584  0.1436232 #> 2017 Q3 -0.45839014  1.0164552 -1.3894835 -1.0995509 #> 2017 Q4  0.06424356 -1.1561674 -0.8660377  0.9035164 #> 2018 Q1  0.64979187  2.3208602 -0.1632849  1.4837795 #> 2018 Q2 -0.02601863 -0.6035312  2.5530261  1.9507210 #> 2018 Q3 -0.64356739 -1.4588494 -1.8602276  0.7976007 #> 2018 Q4  1.04530566 -0.3509178  1.1310547  1.8432663 regressorsVariance(eps, arch=1:2, asym=1, vxreg=x) #>              loge2 vconst      arch1      arch2      asym1   Series 1 #> 2017 Q1  0.4123792      1  0.3786650 -0.1634702  0.3786650  1.0543223 #> 2017 Q2 -0.5960116      1  0.4123792  0.3786650  0.4123792 -0.5973301 #> 2017 Q3 -4.9797594      1 -0.5960116  0.4123792  0.0000000  0.7894599 #> 2017 Q4 -0.4719057      1 -4.9797594 -0.5960116 -4.9797594  1.5164906 #> 2018 Q1 -2.6357287      1 -0.4719057 -4.9797594  0.0000000 -0.1917748 #> 2018 Q2 -1.0488618      1 -2.6357287 -0.4719057 -2.6357287  0.2838789 #> 2018 Q3 -1.9974294      1 -1.0488618 -2.6357287 -1.0488618 -1.7510675 #> 2018 Q4  1.2331983      1 -1.9974294 -1.0488618 -1.9974294 -0.8186698 #>            Series 2   Series 3   Series 4   Series 5 #> 2017 Q1 -0.75939812  0.5622673  0.9112097 -1.1392006 #> 2017 Q2  2.68485900 -0.0974125  0.1424584  0.1436232 #> 2017 Q3 -0.45839014  1.0164552 -1.3894835 -1.0995509 #> 2017 Q4  0.06424356 -1.1561674 -0.8660377  0.9035164 #> 2018 Q1  0.64979187  2.3208602 -0.1632849  1.4837795 #> 2018 Q2 -0.02601863 -0.6035312  2.5530261  1.9507210 #> 2018 Q3 -0.64356739 -1.4588494 -1.8602276  0.7976007 #> 2018 Q4  1.04530566 -0.3509178  1.1310547  1.8432663 regressorsVariance(eps, arch=1:2, asym=1, log.ewma=5) #>              loge2 vconst      arch1      arch2     asym1 logEqWMA(5) #> 2017 Q4 -0.4719057      1 -4.9797594 -0.5960116 -4.979759  -0.1328886 #> 2018 Q1 -2.6357287      1 -0.4719057 -4.9797594  0.000000  -0.1857433 #> 2018 Q2 -1.0488618      1 -2.6357287 -0.4719057 -2.635729  -0.5928434 #> 2018 Q3 -1.9974294      1 -1.0488618 -2.6357287 -1.048862  -1.1371270 #> 2018 Q4  1.2331983      1 -1.9974294 -1.0488618 -1.997429  -1.4368514"},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":null,"dir":"Reference","previous_headings":"","what":"UK SO2 Data — so2data","title":"UK SO2 Data — so2data","text":"UK Annual Total Anthropogenic Sulphur Dioxide (SO2) Emissions 1946-2005.","code":""},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK SO2 Data — so2data","text":"","code":"data(\"so2data\")"},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK SO2 Data — so2data","text":"data frame 60 observations following 4 variables. year Year observation uk_tot_so2 UK annual total anthropogenic SO2 emissions gigagrams Luk_tot_so2 Log UK annual total anthropogenic SO2 emissions DLuk_tot_so2 First difference Log UK annual total anthropogenic SO2 emissions","code":""},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UK SO2 Data — so2data","text":"Data reports total estimated anthropogenic SO2 emissions aggregated coal, petroleum, biomass combustion, smelting, fuel processing, processes.","code":""},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK SO2 Data — so2data","text":"Smith, SJ, J van Aardenne, Z Klimont, RJ Andres, Volke, S Delgado Arias. (2011). Anthropogenic Sulfur Dioxide Emissions, 1850-2005: National Regional Data Set Source Category, Version 2.86. Data distributed NASA Socioeconomic Data Applications Center (SEDAC), CIESIN, Columbia University, Palisades, New York. Available http://sedac.ciesin.columbia.edu/data/set/haso2-anthro-sulfur-dioxide-emissions-1850-2005-v2-86","code":""},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"UK SO2 Data — so2data","text":"Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44 Smith, SJ, J van Aardenne, Z Klimont, RJ Andres, Volke, S Delgado Arias. (2011). Anthropogenic Sulfur Dioxide Emissions: 1850-2005, Atmospheric Chemistry Physics, 11:1101-1116.","code":""},{"path":"http://moritzschwarz.org/gets/reference/so2data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UK SO2 Data — so2data","text":"","code":"data(so2data)  ##create annual zoo object: newso2data<- zooreg(so2data[,-1], start=1946, frequency=1)  ##plot UK annual total anthropogenic SO2 emissions: plot(newso2data$uk_tot_so2)"},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Standard and Poor's 500 index data — sp500data","title":"Daily Standard and Poor's 500 index data — sp500data","text":"Daily Standard Poor's 500 (SP500) index data 3 January 1950 8 March 2016.","code":""},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Standard and Poor's 500 index data — sp500data","text":"","code":"data(\"sp500data\")"},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily Standard and Poor's 500 index data — sp500data","text":"data frame 16652 observations following 7 variables: Date dates Open opening values index High daily maximum value index Low daily minimum value index Close closing values index Volume traded volume Adj.Close adjusted closing values index","code":""},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily Standard and Poor's 500 index data — sp500data","text":"Yahoo Finance, retrieved 9 March 2016","code":""},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Daily Standard and Poor's 500 index data — sp500data","text":"Pretis, Felix, Reade, James Sucarrat, Genaro (2018): 'Automated General--Specific (GETS) Regression Modeling Indicator Saturation Outliers Structural Breaks'. Journal Statistical Software 86, Number 3, pp. 1-44","code":""},{"path":"http://moritzschwarz.org/gets/reference/sp500data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily Standard and Poor's 500 index data — sp500data","text":"","code":"data(sp500data) sp500data <- zoo(sp500data[, -1], order.by = as.Date(sp500data[, \"Date\"])) plot(window(sp500data, start = as.Date(\"2000-01-03\")))"},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"Computes variance gauge (false-positive rate outliers null outliers) impulse indicator saturation based Jiao Pretis (2019).","code":""},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"","code":"vargaugeiis(t.pval, T, infty=FALSE, m=1)"},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"t.pval numeric, 0 1. Selection p-value used indicator saturation. T integer, sample sized used indicator saturation. m integer, number iterations variance computation, default=1 infty logical, argument used variance computation","code":""},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"function computes variance Gauge (false-positive rate outliers impulse indicator saturation) given level significance selection (t.pval) sample size (T) based Jiao Pretis (2019). auxilliary function used within outliertest function.","code":""},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"Returns dataframe variance standard deviation gauge, well asymptotic variance standard deviation.","code":""},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"Jiao, X. & Pretis, F. (2019). Testing Presence Outliers Regression Models. Discussion Paper. Pretis, F., Reade, J., & Sucarrat, G. (2018). Automated General--Specific (GETS) regression modeling indicator saturation methods detection outliers structural breaks. Journal Statistical Software, 86(3).","code":""},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"Felix Pretis, http://www.felixpretis.org/","code":""},{"path":[]},{"path":"http://moritzschwarz.org/gets/reference/vargaugeiis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the Impulse Indicator Saturation Gauge — vargaugeiis","text":"","code":"###Computing the variance of the gauge under the null for a sample of T=200 observations:   vargaugeiis(t.pval=0.05, T=200, infty=FALSE, m=1) #>   var_iisgauge sd_iisgauge asy_var_iisgauge asy_sd_iisgauge #> 1 0.0001062824  0.01030934       0.02125649       0.1457961"}]
